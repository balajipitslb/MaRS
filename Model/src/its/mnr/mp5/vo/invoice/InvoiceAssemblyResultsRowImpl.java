package its.mnr.mp5.vo.invoice;

import its.mnr.mp5.baseclass.ExtendedViewRowImpl;

import its.mnr.mp5.vo.invoice.common.InvoiceAssemblyResultsRow;
import its.mnr.mp5.vo.workorder.WOEventsImpl;

import java.sql.Timestamp;

import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.DBTransaction;
import oracle.jbo.server.SequenceImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Aug 03 14:09:10 PDT 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class InvoiceAssemblyResultsRowImpl extends ExtendedViewRowImpl implements InvoiceAssemblyResultsRow {
    
    public Number createInvoiceHeader(){
        //System.out.println("inside InvoiceAssemblyResultsRowImpl:createInvoiceHeader()");
        Number pHeaderId;
        Double dLabor = this.getTotalLaborCost();
        Double dPart = this.getTotalPartTotal();
        Double pTax = this.getTotalSalesTax();
        Double pTotal = this.getTotalWOTotal();
        String pAcctNum = this.getEvtCostcode();
        String pInt = "N";
        Double pInvCr = null;
        Number pRef = null;
        String pType = "STD";
                                                                                                           
        DBTransaction trans = getDBTransaction();
        pHeaderId = getValueFromSequence("MRLTINVHEADERSEQ", trans); 
        
        RowSet rs = this.getMrltInvoiceheaderView();
        MrltInvoiceheaderViewImpl invHeaderImpl = (MrltInvoiceheaderViewImpl)rs.getViewObject();
        
        Boolean chk = invHeaderImpl.createInvoiceHeader(pHeaderId, pType, dLabor, dPart, pTax, pTotal, pAcctNum, pInt, pInvCr, pRef);
            
        if(chk){
        return pHeaderId;
        }
        return null;
        }
    
    public boolean createInvoiceItem(Number pHeaderId,String pWO, String pEquip, String pVer,
                                     Double pLabor, Double pPart, Double pTax, Double pTotal,Date pCompdt, Date pStartdt,
                                     String pHdrCode){
        //System.out.println("inside InvoiceAssemblyResultsRowImpl:createInvoiceItem()");
        Boolean ret = false;
        //Number pHeaderId;
        /*
        String pWO = this.getEvtCode();
        String pEquip = this.getEvtDesc();
        String pVer = this.getVer();
        Double pLabor = this.getLaborcost();
        Double pPart = this.getParttotal();
        Double pTax = this.getSalestax();
        Double pTotal = this.getWototal();
        Date pCompdt = this.getEvtCompleted();
           */                                                                                                
        DBTransaction trans = getDBTransaction();

        Number pItemId = getValueFromSequence("MRLTINVITEMSEQ", trans); 
            
        RowSet rsItem = this.getMrltInvoiceitemView();
        MrltInvoiceitemViewImpl invItemImpl = (MrltInvoiceitemViewImpl)rsItem.getViewObject();
        ret = invItemImpl.createInvoiceItem(pItemId, pHeaderId, pWO, pEquip, pVer, pLabor, pPart, pTax, pTotal, pCompdt, pStartdt, pHdrCode);
        rsItem.closeRowSet();
        //System.out.println("closing rowset");
        return ret;
        }

    public Number getInvoiceNum(Number pHeaderId) {
        //System.out.println("getInvoiceNum()");
        //set and execute View Criteria
        RowSet rs = this.getMrltInvoiceheaderView();
        MrltInvoiceheaderViewImpl invHeaderImpl = (MrltInvoiceheaderViewImpl)rs.getViewObject();
        ViewCriteria vc = invHeaderImpl.getViewCriteria("getInvoiceNumByHeaderId");
        vc.resetCriteria();
        invHeaderImpl.setInvHeaderIdBind(pHeaderId);
        invHeaderImpl.applyViewCriteria(vc);
        // set range size to 1 since we expect a single record
        invHeaderImpl.setRangeSize(1);
        // execute query to make sure we get latest data!
        invHeaderImpl.executeQuery();
        Row rw = invHeaderImpl.first();
        if (rw != null) {
            //System.out.println("getInvoiceNum Ret = " + (Number)rw.getAttribute("Invnum"));
            Number nInvNum = (Number)rw.getAttribute("Invnum");
            rs.closeRowSet();
            return nInvNum;
        }
        return null;
    }
        
    public static Number getValueFromSequence(String sequenceName, DBTransaction trans){
        SequenceImpl s = new SequenceImpl(sequenceName, trans);
        return s.getSequenceNumber();
        }
    

    public Boolean updateWORFI(String pevtcode) {
        Boolean ret = false;
        //System.out.println("updateWORFI()");
        //set and execute View Criteria
        RowSet rs = this.getWOEvents();
        WOEventsImpl Impl = (WOEventsImpl)rs.getViewObject();
        ViewCriteria vc = Impl.getViewCriteria("WObyEvtCode");
        vc.resetCriteria();
        Impl.setWOEvtCodeBind(pevtcode);
        Impl.applyViewCriteria(vc);
        // set range size to 1 since we expect a single record
        Impl.setRangeSize(1);
        // execute query to make sure we get latest data!
        Impl.executeQuery();
        Row rw = Impl.first();
        if (rw != null) {
            String sstatus = (String)rw.getAttribute("EvtStatus");
            //System.out.println("EvtStatus = " + sstatus);
            if ("C".equals(sstatus)) {
                //System.out.println("setting " + pevtcode + " to RFI");
                rw.setAttribute("EvtStatus", "RFI");
                ret = true;
            } else
                ret = false;
        }
        rs.closeRowSet();
        return ret;
    }
    
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        EvtCode {
            public Object get(InvoiceAssemblyResultsRowImpl obj) {
                return obj.getEvtCode();
            }

            public void put(InvoiceAssemblyResultsRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        EvtDesc {
            public Object get(InvoiceAssemblyResultsRowImpl obj) {
                return obj.getEvtDesc();
            }

            public void put(InvoiceAssemblyResultsRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        EvtCompleted {
            public Object get(InvoiceAssemblyResultsRowImpl obj) {
                return obj.getEvtCompleted();
            }

            public void put(InvoiceAssemblyResultsRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        EvtStart {
            public Object get(InvoiceAssemblyResultsRowImpl obj) {
                return obj.getEvtStart();
            }

            public void put(InvoiceAssemblyResultsRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        EvtCostcode {
            public Object get(InvoiceAssemblyResultsRowImpl obj) {
                return obj.getEvtCostcode();
            }

            public void put(InvoiceAssemblyResultsRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        EvtClass {
            public Object get(InvoiceAssemblyResultsRowImpl obj) {
                return obj.getEvtClass();
            }

            public void put(InvoiceAssemblyResultsRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        EvtJobtype {
            public Object get(InvoiceAssemblyResultsRowImpl obj) {
                return obj.getEvtJobtype();
            }

            public void put(InvoiceAssemblyResultsRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        ItsAccountrateid {
            public Object get(InvoiceAssemblyResultsRowImpl obj) {
                return obj.getItsAccountrateid();
            }

            public void put(InvoiceAssemblyResultsRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Ver {
            public Object get(InvoiceAssemblyResultsRowImpl obj) {
                return obj.getVer();
            }

            public void put(InvoiceAssemblyResultsRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Laborcost {
            public Object get(InvoiceAssemblyResultsRowImpl obj) {
                return obj.getLaborcost();
            }

            public void put(InvoiceAssemblyResultsRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Parttotal {
            public Object get(InvoiceAssemblyResultsRowImpl obj) {
                return obj.getParttotal();
            }

            public void put(InvoiceAssemblyResultsRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Salestax {
            public Object get(InvoiceAssemblyResultsRowImpl obj) {
                return obj.getSalestax();
            }

            public void put(InvoiceAssemblyResultsRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Wototal {
            public Object get(InvoiceAssemblyResultsRowImpl obj) {
                return obj.getWototal();
            }

            public void put(InvoiceAssemblyResultsRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        isSelected {
            public Object get(InvoiceAssemblyResultsRowImpl obj) {
                return obj.getisSelected();
            }

            public void put(InvoiceAssemblyResultsRowImpl obj, Object value) {
                obj.setisSelected((String) value);
            }
        }
        ,
        TotalLaborCost {
            public Object get(InvoiceAssemblyResultsRowImpl obj) {
                return obj.getTotalLaborCost();
            }

            public void put(InvoiceAssemblyResultsRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        TotalPartTotal {
            public Object get(InvoiceAssemblyResultsRowImpl obj) {
                return obj.getTotalPartTotal();
            }

            public void put(InvoiceAssemblyResultsRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        TotalSalesTax {
            public Object get(InvoiceAssemblyResultsRowImpl obj) {
                return obj.getTotalSalesTax();
            }

            public void put(InvoiceAssemblyResultsRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        TotalWOTotal {
            public Object get(InvoiceAssemblyResultsRowImpl obj) {
                return obj.getTotalWOTotal();
            }

            public void put(InvoiceAssemblyResultsRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        isSelectedCount {
            public Object get(InvoiceAssemblyResultsRowImpl obj) {
                return obj.getisSelectedCount();
            }

            public void put(InvoiceAssemblyResultsRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        MrlrefWorkordermasterView {
            public Object get(InvoiceAssemblyResultsRowImpl obj) {
                return obj.getMrlrefWorkordermasterView();
            }

            public void put(InvoiceAssemblyResultsRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        InvoiceAssemblyResults {
            public Object get(InvoiceAssemblyResultsRowImpl obj) {
                return obj.getInvoiceAssemblyResults();
            }

            public void put(InvoiceAssemblyResultsRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        MrltInvoiceheaderView {
            public Object get(InvoiceAssemblyResultsRowImpl obj) {
                return obj.getMrltInvoiceheaderView();
            }

            public void put(InvoiceAssemblyResultsRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        MrltInvoiceitemView {
            public Object get(InvoiceAssemblyResultsRowImpl obj) {
                return obj.getMrltInvoiceitemView();
            }

            public void put(InvoiceAssemblyResultsRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        WOEvents {
            public Object get(InvoiceAssemblyResultsRowImpl obj) {
                return obj.getWOEvents();
            }

            public void put(InvoiceAssemblyResultsRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(InvoiceAssemblyResultsRowImpl object);

        public abstract void put(InvoiceAssemblyResultsRowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int EVTCODE = AttributesEnum.EvtCode.index();
    public static final int EVTDESC = AttributesEnum.EvtDesc.index();
    public static final int EVTCOMPLETED = AttributesEnum.EvtCompleted.index();
    public static final int EVTSTART = AttributesEnum.EvtStart.index();
    public static final int EVTCOSTCODE = AttributesEnum.EvtCostcode.index();
    public static final int EVTCLASS = AttributesEnum.EvtClass.index();
    public static final int EVTJOBTYPE = AttributesEnum.EvtJobtype.index();
    public static final int ITSACCOUNTRATEID = AttributesEnum.ItsAccountrateid.index();
    public static final int VER = AttributesEnum.Ver.index();
    public static final int LABORCOST = AttributesEnum.Laborcost.index();
    public static final int PARTTOTAL = AttributesEnum.Parttotal.index();
    public static final int SALESTAX = AttributesEnum.Salestax.index();
    public static final int WOTOTAL = AttributesEnum.Wototal.index();
    public static final int ISSELECTED = AttributesEnum.isSelected.index();
    public static final int TOTALLABORCOST = AttributesEnum.TotalLaborCost.index();
    public static final int TOTALPARTTOTAL = AttributesEnum.TotalPartTotal.index();
    public static final int TOTALSALESTAX = AttributesEnum.TotalSalesTax.index();
    public static final int TOTALWOTOTAL = AttributesEnum.TotalWOTotal.index();
    public static final int ISSELECTEDCOUNT = AttributesEnum.isSelectedCount.index();
    public static final int MRLREFWORKORDERMASTERVIEW = AttributesEnum.MrlrefWorkordermasterView.index();
    public static final int INVOICEASSEMBLYRESULTS = AttributesEnum.InvoiceAssemblyResults.index();
    public static final int MRLTINVOICEHEADERVIEW = AttributesEnum.MrltInvoiceheaderView.index();
    public static final int MRLTINVOICEITEMVIEW = AttributesEnum.MrltInvoiceitemView.index();
    public static final int WOEVENTS = AttributesEnum.WOEvents.index();

    /**
     * This is the default constructor (do not remove).
     */
    public InvoiceAssemblyResultsRowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute EvtCode.
     * @return the EvtCode
     */
    public String getEvtCode() {
        return (String) getAttributeInternal(EVTCODE);
    }


    /**
     * Gets the attribute value for the calculated attribute EvtDesc.
     * @return the EvtDesc
     */
    public String getEvtDesc() {
        return (String) getAttributeInternal(EVTDESC);
    }


    /**
     * Gets the attribute value for the calculated attribute EvtCompleted.
     * @return the EvtCompleted
     */
    public Date getEvtCompleted() {
        return (Date) getAttributeInternal(EVTCOMPLETED);
    }


    /**
     * Gets the attribute value for the calculated attribute EvtStart.
     * @return the EvtStart
     */
    public Date getEvtStart() {
        return (Date) getAttributeInternal(EVTSTART);
    }


    /**
     * Gets the attribute value for the calculated attribute EvtCostcode.
     * @return the EvtCostcode
     */
    public String getEvtCostcode() {
        return (String) getAttributeInternal(EVTCOSTCODE);
    }


    /**
     * Gets the attribute value for the calculated attribute EvtClass.
     * @return the EvtClass
     */
    public String getEvtClass() {
        return (String) getAttributeInternal(EVTCLASS);
    }


    /**
     * Gets the attribute value for the calculated attribute EvtJobtype.
     * @return the EvtJobtype
     */
    public String getEvtJobtype() {
        return (String) getAttributeInternal(EVTJOBTYPE);
    }


    /**
     * Gets the attribute value for the calculated attribute ItsAccountrateid.
     * @return the ItsAccountrateid
     */
    public String getItsAccountrateid() {
        return (String) getAttributeInternal(ITSACCOUNTRATEID);
    }


    /**
     * Gets the attribute value for the calculated attribute Ver.
     * @return the Ver
     */
    public String getVer() {
        return (String) getAttributeInternal(VER);
    }


    /**
     * Gets the attribute value for the calculated attribute Laborcost.
     * @return the Laborcost
     */
    public Double getLaborcost() {
        return (Double) getAttributeInternal(LABORCOST);
    }


    /**
     * Gets the attribute value for the calculated attribute Parttotal.
     * @return the Parttotal
     */
    public Double getParttotal() {
        return (Double) getAttributeInternal(PARTTOTAL);
    }


    /**
     * Gets the attribute value for the calculated attribute Salestax.
     * @return the Salestax
     */
    public Double getSalestax() {
        return (Double) getAttributeInternal(SALESTAX);
    }


    /**
     * Gets the attribute value for the calculated attribute Wototal.
     * @return the Wototal
     */
    public Double getWototal() {
        return (Double) getAttributeInternal(WOTOTAL);
    }


    /**
     * Gets the attribute value for the calculated attribute isSelected.
     * @return the isSelected
     */
    public String getisSelected() {
        return (String) getAttributeInternal(ISSELECTED);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute isSelected.
     * @param value value to set the  isSelected
     */
    public void setisSelected(String value) {
        setAttributeInternal(ISSELECTED, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TotalLaborCost.
     * @return the TotalLaborCost
     */
    public Double getTotalLaborCost() {
        return (Double) getAttributeInternal(TOTALLABORCOST);
    }


    /**
     * Gets the attribute value for the calculated attribute TotalPartTotal.
     * @return the TotalPartTotal
     */
    public Double getTotalPartTotal() {
        return (Double) getAttributeInternal(TOTALPARTTOTAL);
    }


    /**
     * Gets the attribute value for the calculated attribute TotalSalesTax.
     * @return the TotalSalesTax
     */
    public Double getTotalSalesTax() {
        return (Double) getAttributeInternal(TOTALSALESTAX);
    }


    /**
     * Gets the attribute value for the calculated attribute TotalWOTotal.
     * @return the TotalWOTotal
     */
    public Double getTotalWOTotal() {
        return (Double) getAttributeInternal(TOTALWOTOTAL);
    }


    /**
     * Gets the attribute value for the calculated attribute isSelectedCount.
     * @return the isSelectedCount
     */
    public String getisSelectedCount() {
        return (String) getAttributeInternal(ISSELECTEDCOUNT);
    }


    /**
     * Gets the view accessor <code>RowSet</code> MrlrefWorkordermasterView.
     */
    public RowSet getMrlrefWorkordermasterView() {
        return (RowSet)getAttributeInternal(MRLREFWORKORDERMASTERVIEW);
    }

    /**
     * Gets the view accessor <code>RowSet</code> InvoiceAssemblyResults.
     */
    public RowSet getInvoiceAssemblyResults() {
        return (RowSet)getAttributeInternal(INVOICEASSEMBLYRESULTS);
    }

    /**
     * Gets the view accessor <code>RowSet</code> MrltInvoiceheaderView.
     */
    public RowSet getMrltInvoiceheaderView() {
        return (RowSet)getAttributeInternal(MRLTINVOICEHEADERVIEW);
    }

    /**
     * Gets the view accessor <code>RowSet</code> MrltInvoiceitemView.
     */
    public RowSet getMrltInvoiceitemView() {
        return (RowSet)getAttributeInternal(MRLTINVOICEITEMVIEW);
    }

    /**
     * Gets the view accessor <code>RowSet</code> WOEvents.
     */
    public RowSet getWOEvents() {
        return (RowSet)getAttributeInternal(WOEVENTS);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
