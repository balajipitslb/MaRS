package its.mnr.mp5.vo.invoice;

import its.mnr.mp5.baseclass.ExtendedEntityImpl;
import its.mnr.mp5.baseclass.ExtendedViewRowImpl;

import its.mnr.mp5.vo.admin.MrlrefMp5profileViewImpl;
import its.mnr.mp5.model.Util;

import its.mnr.mp5.vo.invoice.common.MrltInvoiceheaderViewRow;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;
import java.util.HashMap;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.ViewCriteria;
import oracle.jbo.XMLInterface;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.AttributeDefImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Aug 03 16:29:27 PDT 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MrltInvoiceheaderViewRowImpl extends ExtendedViewRowImpl implements MrltInvoiceheaderViewRow {


    // Some constants
    public static final int ENTITY_MRLTINVOICEHEADER = 0;
    public static int NUMBER = Types.NUMERIC;
    public static int DATE = Types.DATE;
    public static int VARCHAR2 = Types.VARCHAR;
    
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }
    
    public boolean writeInvoiceStdXML(Number pInvNum) {
        //System.out.println("inside writeInvoiceStdXML()");
        Boolean ret = false;

        //check Invoice EDI Flag
        String sendInvoiceThruEDIFlg = getMP5Profile("SendInvoiceThruEDIFlg");
        if ("N".equals(sendInvoiceThruEDIFlg)) {
            ret = true;
        }

        if ("Y".equals(sendInvoiceThruEDIFlg)) {
            MrltInvoiceheaderViewImpl impl = (MrltInvoiceheaderViewImpl)this.getViewObject();
            ViewCriteria vc = impl.getViewCriteria("getInvoiceByInvNum");
            vc.resetCriteria();
            impl.setInvNumBind(pInvNum);
            impl.applyViewCriteria(vc);
            // set range size to 1 since we expect a single record
            impl.setRangeSize(1);
            // execute query to make sure we get latest data!
            impl.executeQuery();
            Row rw = impl.first();

            if (rw != null) {
                HashMap attrMap = new HashMap(2);
                String HEADERVODEF = "its.mnr.mp5.vo.invoice.MrltInvoiceheaderView";
                String DETAILVODEF = "its.mnr.mp5.vo.invoice.MrltInvoiceitemView";
                String ACTDETAILVODEF = "its.mnr.mp5.vo.workorder.WOActivities";
                String MLISTDETAILVODEF = "its.mnr.mp5.vo.workorder.Matlists";
                String MPARTSDETAILVODEF = "its.mnr.mp5.vo.workorder.Matlparts";
                String[] HEADERATTRS =
                { "Invoiceheaderid","Invnum", "Acctnum", "Invdt", "Type", "Ref", "Labor", "Part", "Tax", "Total", "InvWorkOrders" };
                String[] DETAILATTRS =
                { "Invoiceheaderid","Wo", "Hdrcode", "Equip", "Startdt", "Completedt", "TotalHrs", "TotalCst", "Part", "Tax","Total", /*"WOTotal",*/
                  "WOActivities" };
                String[] ACTDETAILATTRS =
                { "ActEvent","ActAct", "ItsTaskdesc", "ActUom", "ActMechanicid", "ItsComment", "ItsCompcode", "ItsLoccode",
                  "ItsLocdesc", "ItsDamcode", "ItsDamdesc", "ItsRepcode", "ItsRepdesc", "ActRatetype", "ActTimetype",
                  "ActBillableLbrHrs", "ActBillableLbrCost", "TotalPartCost","ActMatlist","Matlists" };
                String[] MLISTDETAILATTRS = { "MtlCode","Matlparts" };
                String[] MPARTSDETAILATTRS =
                { "MlpMatlist","MlpPart", "MlpQty", "PartDesc", "PartUOM", "MlpActualUnitcost", "MlpBillableUnitcost",
                  "ItsPartaxamt", "ItsTaxper" };
                attrMap.put(HEADERVODEF, HEADERATTRS);
                attrMap.put(DETAILVODEF, DETAILATTRS);
                attrMap.put(ACTDETAILVODEF, ACTDETAILATTRS);
                attrMap.put(MLISTDETAILVODEF, MLISTDETAILATTRS);
                attrMap.put(MPARTSDETAILVODEF, MPARTSDETAILATTRS);

                String filepath = getMP5Profile("InvoiceOutPath");
                String filename = filepath + pInvNum + "#STD.xml";
                Util.printXML(rw.writeXML(XMLInterface.XML_OPT_ALL_ROWS, attrMap), filename);

                /*Uncomment to print to screen
            Node n = rw.writeXML(-1,attrMap);
            PrintWriter pw = new PrintWriter(System.out);
            try {
                ((XMLNode)n).print(pw);
            } catch (IOException e) {
            }*/
                ret = true;
            }
        }
        return ret;
    }
    
    public boolean writeInvoiceCrXML(Number pInvNum) {
        //System.out.println("inside writeInvoiceCrXML()");
        Boolean ret = false;

        //check Invoice EDI Flag
        String sendInvoiceThruEDIFlg = getMP5Profile("SendInvoiceThruEDIFlg");
        if ("N".equals(sendInvoiceThruEDIFlg)) {
            ret = true;
        }

        if ("Y".equals(sendInvoiceThruEDIFlg)) {
            MrltInvoiceheaderViewImpl impl = (MrltInvoiceheaderViewImpl)this.getViewObject();
            ViewCriteria vc = impl.getViewCriteria("getInvoiceByInvNum");
            vc.resetCriteria();
            impl.setInvNumBind(pInvNum);
            impl.applyViewCriteria(vc);
            // set range size to 1 since we expect a single record
            impl.setRangeSize(1);
            // execute query to make sure we get latest data!
            impl.executeQuery();
            Row rw = impl.first();

            if (rw != null) {
                HashMap attrMap = new HashMap(2);
                String HEADERVODEF = "its.mnr.mp5.vo.invoice.MrltInvoiceheaderView";
                String DETAILVODEF = "its.mnr.mp5.vo.invoice.MrltInvoicecritemView";
                String[] HEADERATTRS =
                { "Invoiceheaderid","Invnum", "Acctnum", "Invdt", "Type", "Ref", "Labor", "Part", "Tax", "Total","Int1","Invcr", "InvCrWorkOrders" };
                String[] DETAILATTRS =
                { "Invoiceheaderid","Wo", "Hdrcode", "Labor", "Part", "Tax", "Laborcr", "Partcr", "Taxcr", "Totalcr"};
                attrMap.put(HEADERVODEF, HEADERATTRS);
                attrMap.put(DETAILVODEF, DETAILATTRS);

                String filepath = getMP5Profile("InvoiceOutPath");
                String filename = filepath + pInvNum + "#CR.xml";
                Util.printXML(rw.writeXML(XMLInterface.XML_OPT_ALL_ROWS, attrMap), filename);

                /*Uncomment to print to screen
            Node n = rw.writeXML(-1,attrMap);
            PrintWriter pw = new PrintWriter(System.out);
            try {
                ((XMLNode)n).print(pw);
            } catch (IOException e) {
            }*/
                ret = true;
            }
        }
        return ret;
    }
    
    public boolean writeInvoiceRtroXML(Number pInvNum) {
        //System.out.println("inside writeInvoiceRtroXML()");
        Boolean ret = false;

        //check Invoice EDI Flag
        String sendInvoiceThruEDIFlg = getMP5Profile("SendInvoiceThruEDIFlg");
        if ("N".equals(sendInvoiceThruEDIFlg)) {
            ret = true;
        }

        if ("Y".equals(sendInvoiceThruEDIFlg)) {
            MrltInvoiceheaderViewImpl impl = (MrltInvoiceheaderViewImpl)this.getViewObject();
            ViewCriteria vc = impl.getViewCriteria("getInvoiceByInvNum");
            vc.resetCriteria();
            impl.setInvNumBind(pInvNum);
            impl.applyViewCriteria(vc);
            // set range size to 1 since we expect a single record
            impl.setRangeSize(1);
            // execute query to make sure we get latest data!
            impl.executeQuery();
            Row rw = impl.first();

            if (rw != null) {
                HashMap attrMap = new HashMap(2);
                String HEADERVODEF = "its.mnr.mp5.vo.invoice.MrltInvoiceheaderView";
                String DETAILVODEF = "its.mnr.mp5.vo.invoice.MrltInvoicertroitemView";
                String[] HEADERATTRS =
                { "Invoiceheaderid","Invnum", "Acctnum", "Invdt", "Type", "Labor","Total", "RetroItemDetail" };
                String[] DETAILATTRS =
                { "Invoiceheaderid","Wo", "Hdrcode", "Act","Equipcharge", "Lbrhrs", "Shift", "Oldratetype", "Newratetype", "Oldrate","Newrate","CreditDebit",
                "Task","Compcd","Damcd","Damdesc","Loccd","Locdesc","Repcd","Reppdesc"};
                attrMap.put(HEADERVODEF, HEADERATTRS);
                attrMap.put(DETAILVODEF, DETAILATTRS);

                String filepath = getMP5Profile("InvoiceOutPath");
                String filename = filepath + pInvNum + "#RTRO.xml";
                Util.printXML(rw.writeXML(XMLInterface.XML_OPT_ALL_ROWS, attrMap), filename);

                /*Uncomment to print to screen
            Node n = rw.writeXML(-1,attrMap);
            PrintWriter pw = new PrintWriter(System.out);
            try {
                ((XMLNode)n).print(pw);
            } catch (IOException e) {
            }*/
                ret = true;
            }
        }
        return ret;
    }
    
    public boolean writeInvoiceEstXML(Number pInvNum) {
        //System.out.println("inside writeInvoiceEstXML()");
        Boolean ret = false;

        //check Invoice EDI Flag
        String sendInvoiceThruEDIFlg = getMP5Profile("SendInvoiceThruEDIFlg");
        if ("N".equals(sendInvoiceThruEDIFlg)) {
            ret = true;
        }

        if ("Y".equals(sendInvoiceThruEDIFlg)) {
            MrltInvoiceheaderViewImpl impl = (MrltInvoiceheaderViewImpl)this.getViewObject();
            ViewCriteria vc = impl.getViewCriteria("getInvoiceByInvNum");
            vc.resetCriteria();
            impl.setInvNumBind(pInvNum);
            impl.applyViewCriteria(vc);
            // set range size to 1 since we expect a single record
            impl.setRangeSize(1);
            // execute query to make sure we get latest data!
            impl.executeQuery();
            Row rw = impl.first();

            if (rw != null) {
                HashMap attrMap = new HashMap(2);
                String HEADERVODEF = "its.mnr.mp5.vo.invoice.MrltInvoiceheaderView";
                String DETAILVODEF = "its.mnr.mp5.vo.invoice.MrltInvoiceitemView";
                String ACTDETAILVODEF = "its.mnr.mp5.vo.workorder.WOActivities";
                String MLISTDETAILVODEF = "its.mnr.mp5.vo.workorder.Matlists";
                String MPARTSDETAILVODEF = "its.mnr.mp5.vo.workorder.Matlparts";
                String[] HEADERATTRS =
                { "Invoiceheaderid","Invnum", "Acctnum", "Invdt", "Type", "Ref", "Labor", "Part", "Tax", "Total", "InvWorkOrders" };
                String[] DETAILATTRS =
                { "Invoiceheaderid","Wo", "Hdrcode", "Equip", "Startdt", "Completedt", "TotalHrs", "TotalCst", "TotalPartCst", "Tax",
                  "WOActivities" };
                String[] ACTDETAILATTRS =
                { "ActEvent","ActAct", "ItsTaskdesc", "ActUom", "ActMechanicid", "ItsComment", "ItsCompcode", "ItsLoccode",
                  "ItsLocdesc", "ItsDamcode", "ItsDamdesc", "ItsRepcode", "ItsRepdesc", "ActRatetype", "ActTimetype",
                  "ActBillableLbrHrs", "ActBillableLbrCost", "TotalPartCost","ActMatlist","Matlists" };
                String[] MLISTDETAILATTRS = { "MtlCode","Matlparts" };
                String[] MPARTSDETAILATTRS =
                { "MlpMatlist","MlpPart", "MlpQty", "PartDesc", "PartUOM", "MlpActualUnitcost", "MlpBillableUnitcost",
                  "ItsPartaxamt", "ItsTaxper" };
                attrMap.put(HEADERVODEF, HEADERATTRS);
                attrMap.put(DETAILVODEF, DETAILATTRS);
                attrMap.put(ACTDETAILVODEF, ACTDETAILATTRS);
                attrMap.put(MLISTDETAILVODEF, MLISTDETAILATTRS);
                attrMap.put(MPARTSDETAILVODEF, MPARTSDETAILATTRS);

                String filepath = getMP5Profile("InvoiceOutPath");
                String filename = filepath + pInvNum + "#PEND.xml";
                Util.printXML(rw.writeXML(XMLInterface.XML_OPT_ALL_ROWS, attrMap), filename);

                /*Uncomment to print to screen
            Node n = rw.writeXML(-1,attrMap);
            PrintWriter pw = new PrintWriter(System.out);
            try {
                ((XMLNode)n).print(pw);
            } catch (IOException e) {
            }*/
                ret = true;
            }
        }
        return ret;
    }

    public Boolean deleteInvoiceXMLFile(Number pInvNum, String pType) {
        Boolean deleteChk = false;
        String filepath = getMP5Profile("InvoiceOutPath");

        if (filepath != null) {
            String invType;
            if ("STD".equals(pType)) {
                invType = "#STD.xml";
            } else if ("CR".equals(pType)) {
                invType = "#CR.xml";
            } else if ("RTRO".equals(pType)) {
                invType = "#RTRO.xml";
            } else if ("PEND".equals(pType)) {
                invType = "#PEND.xml";
            } else return deleteChk;
            String filename = filepath + pInvNum + invType;
            deleteChk = Util.deleteFile(filename);
        }
        return deleteChk;
    }
    
    public String getMP5Profile(String sprofile){
            String ret;
            //set and execute View Criteria
            RowSet rs = this.getMrlrefMp5profileView();
            MrlrefMp5profileViewImpl impl =  (MrlrefMp5profileViewImpl)rs.getViewObject();
            ViewCriteria vc = impl.getViewCriteria("MP5ProfileByProfile");
            vc.resetCriteria();
            impl.setprofileBind(sprofile);
            impl.applyViewCriteria(vc);
            // set range size to 1 since we expect a single record
            impl.setRangeSize(1);
            // execute query to make sure we get latest data!
            impl.executeQuery();
            Row rw = impl.first();
            if (rw != null) {
                ret = (String)rw.getAttribute("Value");
                rs.closeRowSet();
                return ret;
            }

            return null;
        }

    public boolean updateInvoiceStatus(Number pInvNum, String newStatus) {
        //System.out.println("updateInvoiceStatus():" + pInvNum + " to " + newStatus);
        Boolean ret = false;
               
        MrltInvoiceheaderViewImpl impl = (MrltInvoiceheaderViewImpl)this.getViewObject();
        ViewCriteria vc = impl.getViewCriteria("getInvoiceByInvNum");
        vc.resetCriteria();
        impl.setInvNumBind(pInvNum);
        impl.applyViewCriteria(vc);
        // set range size to 1 since we expect a single record
        impl.setRangeSize(1);
        // execute query to make sure we get latest data!
        impl.executeQuery();
        Row rw = impl.first();
        if (rw != null) {
            //System.out.println("setting status: getInvnum():" + rw.getAttribute("Status"));
            //rw.setStatus(newStatus);
            rw.setAttribute("Status", newStatus);
            ret = true;
        }
        return ret;
    }
    
    public String WorkOrderRFIUpd(Number pInvHdrId, String pNewStatus) {
       // System.out.println("Function getWOJobType");
        String ret = (String)callStoredFunction(VARCHAR2, "mnrpkg.WorkOrderRFIUpd(?,?)",
                                          new Object[] { pInvHdrId, pNewStatus});
        //System.out.println("Function WorkOrderRFIUpd = " + ret);
        return ret;
    }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Invoiceheaderid {
            public Object get(MrltInvoiceheaderViewRowImpl obj) {
                return obj.getInvoiceheaderid();
            }

            public void put(MrltInvoiceheaderViewRowImpl obj, Object value) {
                obj.setInvoiceheaderid((Number) value);
            }
        }
        ,
        Invnum {
            public Object get(MrltInvoiceheaderViewRowImpl obj) {
                return obj.getInvnum();
            }

            public void put(MrltInvoiceheaderViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Labor {
            public Object get(MrltInvoiceheaderViewRowImpl obj) {
                return obj.getLabor();
            }

            public void put(MrltInvoiceheaderViewRowImpl obj, Object value) {
                obj.setLabor((Double) value);
            }
        }
        ,
        Part {
            public Object get(MrltInvoiceheaderViewRowImpl obj) {
                return obj.getPart();
            }

            public void put(MrltInvoiceheaderViewRowImpl obj, Object value) {
                obj.setPart((Double) value);
            }
        }
        ,
        Tax {
            public Object get(MrltInvoiceheaderViewRowImpl obj) {
                return obj.getTax();
            }

            public void put(MrltInvoiceheaderViewRowImpl obj, Object value) {
                obj.setTax((Double) value);
            }
        }
        ,
        Total {
            public Object get(MrltInvoiceheaderViewRowImpl obj) {
                return obj.getTotal();
            }

            public void put(MrltInvoiceheaderViewRowImpl obj, Object value) {
                obj.setTotal((Double) value);
            }
        }
        ,
        Invdt {
            public Object get(MrltInvoiceheaderViewRowImpl obj) {
                return obj.getInvdt();
            }

            public void put(MrltInvoiceheaderViewRowImpl obj, Object value) {
                obj.setInvdt((Timestamp) value);
            }
        }
        ,
        Status {
            public Object get(MrltInvoiceheaderViewRowImpl obj) {
                return obj.getStatus();
            }

            public void put(MrltInvoiceheaderViewRowImpl obj, Object value) {
                obj.setStatus((String) value);
            }
        }
        ,
        Acctnum {
            public Object get(MrltInvoiceheaderViewRowImpl obj) {
                return obj.getAcctnum();
            }

            public void put(MrltInvoiceheaderViewRowImpl obj, Object value) {
                obj.setAcctnum((String) value);
            }
        }
        ,
        Type {
            public Object get(MrltInvoiceheaderViewRowImpl obj) {
                return obj.getType();
            }

            public void put(MrltInvoiceheaderViewRowImpl obj, Object value) {
                obj.setType((String) value);
            }
        }
        ,
        Int1 {
            public Object get(MrltInvoiceheaderViewRowImpl obj) {
                return obj.getInt1();
            }

            public void put(MrltInvoiceheaderViewRowImpl obj, Object value) {
                obj.setInt1((String) value);
            }
        }
        ,
        Invcr {
            public Object get(MrltInvoiceheaderViewRowImpl obj) {
                return obj.getInvcr();
            }

            public void put(MrltInvoiceheaderViewRowImpl obj, Object value) {
                obj.setInvcr((Double) value);
            }
        }
        ,
        Ref {
            public Object get(MrltInvoiceheaderViewRowImpl obj) {
                return obj.getRef();
            }

            public void put(MrltInvoiceheaderViewRowImpl obj, Object value) {
                obj.setRef((Number) value);
            }
        }
        ,
        InvWorkOrders {
            public Object get(MrltInvoiceheaderViewRowImpl obj) {
                return obj.getInvWorkOrders();
            }

            public void put(MrltInvoiceheaderViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        InvCrWorkOrders {
            public Object get(MrltInvoiceheaderViewRowImpl obj) {
                return obj.getInvCrWorkOrders();
            }

            public void put(MrltInvoiceheaderViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        RetroItemDetail {
            public Object get(MrltInvoiceheaderViewRowImpl obj) {
                return obj.getRetroItemDetail();
            }

            public void put(MrltInvoiceheaderViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        InvoiceStatusLOV {
            public Object get(MrltInvoiceheaderViewRowImpl obj) {
                return obj.getInvoiceStatusLOV();
            }

            public void put(MrltInvoiceheaderViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        InvoiceTypeLOV {
            public Object get(MrltInvoiceheaderViewRowImpl obj) {
                return obj.getInvoiceTypeLOV();
            }

            public void put(MrltInvoiceheaderViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        YesNoBoolean {
            public Object get(MrltInvoiceheaderViewRowImpl obj) {
                return obj.getYesNoBoolean();
            }

            public void put(MrltInvoiceheaderViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        MrltAccountmasterView {
            public Object get(MrltInvoiceheaderViewRowImpl obj) {
                return obj.getMrltAccountmasterView();
            }

            public void put(MrltInvoiceheaderViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        MrlrefMp5profileView {
            public Object get(MrltInvoiceheaderViewRowImpl obj) {
                return obj.getMrlrefMp5profileView();
            }

            public void put(MrltInvoiceheaderViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        WOEvents {
            public Object get(MrltInvoiceheaderViewRowImpl obj) {
                return obj.getWOEvents();
            }

            public void put(MrltInvoiceheaderViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        static AttributesEnum[] vals = null;
        ;
        private static int firstIndex = 0;

        public abstract Object get(MrltInvoiceheaderViewRowImpl object);

        public abstract void put(MrltInvoiceheaderViewRowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int INVOICEHEADERID = AttributesEnum.Invoiceheaderid.index();
    public static final int INVNUM = AttributesEnum.Invnum.index();
    public static final int LABOR = AttributesEnum.Labor.index();
    public static final int PART = AttributesEnum.Part.index();
    public static final int TAX = AttributesEnum.Tax.index();
    public static final int TOTAL = AttributesEnum.Total.index();
    public static final int INVDT = AttributesEnum.Invdt.index();
    public static final int STATUS = AttributesEnum.Status.index();
    public static final int ACCTNUM = AttributesEnum.Acctnum.index();
    public static final int TYPE = AttributesEnum.Type.index();
    public static final int INT1 = AttributesEnum.Int1.index();
    public static final int INVCR = AttributesEnum.Invcr.index();
    public static final int REF = AttributesEnum.Ref.index();
    public static final int INVWORKORDERS = AttributesEnum.InvWorkOrders.index();
    public static final int INVCRWORKORDERS = AttributesEnum.InvCrWorkOrders.index();
    public static final int RETROITEMDETAIL = AttributesEnum.RetroItemDetail.index();
    public static final int INVOICESTATUSLOV = AttributesEnum.InvoiceStatusLOV.index();
    public static final int INVOICETYPELOV = AttributesEnum.InvoiceTypeLOV.index();
    public static final int YESNOBOOLEAN = AttributesEnum.YesNoBoolean.index();
    public static final int MRLTACCOUNTMASTERVIEW = AttributesEnum.MrltAccountmasterView.index();
    public static final int MRLREFMP5PROFILEVIEW = AttributesEnum.MrlrefMp5profileView.index();
    public static final int WOEVENTS = AttributesEnum.WOEvents.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MrltInvoiceheaderViewRowImpl() {
    }

    /**
     * Gets MrltInvoiceheader entity object.
     * @return the MrltInvoiceheader
     */
    public ExtendedEntityImpl getMrltInvoiceheader() {
        return (ExtendedEntityImpl)getEntity(ENTITY_MRLTINVOICEHEADER);
    }

    /**
     * Gets the attribute value for INVOICEHEADERID using the alias name Invoiceheaderid.
     * @return the INVOICEHEADERID
     */
    public Number getInvoiceheaderid() {
        return (Number) getAttributeInternal(INVOICEHEADERID);
    }

    /**
     * Sets <code>value</code> as attribute value for INVOICEHEADERID using the alias name Invoiceheaderid.
     * @param value value to set the INVOICEHEADERID
     */
    public void setInvoiceheaderid(Number value) {
        setAttributeInternal(INVOICEHEADERID, value);
    }

    /**
     * Gets the attribute value for INVNUM using the alias name Invnum.
     * @return the INVNUM
     */
    public Number getInvnum() {
        return (Number) getAttributeInternal(INVNUM);
    }


    /**
     * Gets the attribute value for LABOR using the alias name Labor.
     * @return the LABOR
     */
    public Double getLabor() {
        return (Double) getAttributeInternal(LABOR);
    }

    /**
     * Sets <code>value</code> as attribute value for LABOR using the alias name Labor.
     * @param value value to set the LABOR
     */
    public void setLabor(Double value) {
        setAttributeInternal(LABOR, value);
    }

    /**
     * Gets the attribute value for PART using the alias name Part.
     * @return the PART
     */
    public Double getPart() {
        return (Double) getAttributeInternal(PART);
    }

    /**
     * Sets <code>value</code> as attribute value for PART using the alias name Part.
     * @param value value to set the PART
     */
    public void setPart(Double value) {
        setAttributeInternal(PART, value);
    }

    /**
     * Gets the attribute value for TAX using the alias name Tax.
     * @return the TAX
     */
    public Double getTax() {
        return (Double) getAttributeInternal(TAX);
    }

    /**
     * Sets <code>value</code> as attribute value for TAX using the alias name Tax.
     * @param value value to set the TAX
     */
    public void setTax(Double value) {
        setAttributeInternal(TAX, value);
    }

    /**
     * Gets the attribute value for TOTAL using the alias name Total.
     * @return the TOTAL
     */
    public Double getTotal() {
        return (Double) getAttributeInternal(TOTAL);
    }

    /**
     * Sets <code>value</code> as attribute value for TOTAL using the alias name Total.
     * @param value value to set the TOTAL
     */
    public void setTotal(Double value) {
        setAttributeInternal(TOTAL, value);
    }

    /**
     * Gets the attribute value for INVDT using the alias name Invdt.
     * @return the INVDT
     */
    public Timestamp getInvdt() {
        return (Timestamp) getAttributeInternal(INVDT);
    }

    /**
     * Sets <code>value</code> as attribute value for INVDT using the alias name Invdt.
     * @param value value to set the INVDT
     */
    public void setInvdt(Timestamp value) {
        setAttributeInternal(INVDT, value);
    }

    /**
     * Gets the attribute value for STATUS using the alias name Status.
     * @return the STATUS
     */
    public String getStatus() {
        return (String) getAttributeInternal(STATUS);
    }

    /**
     * Sets <code>value</code> as attribute value for STATUS using the alias name Status.
     * @param value value to set the STATUS
     */
    public void setStatus(String value) {
        setAttributeInternal(STATUS, value);
    }

    /**
     * Gets the attribute value for ACCTNUM using the alias name Acctnum.
     * @return the ACCTNUM
     */
    public String getAcctnum() {
        return (String) getAttributeInternal(ACCTNUM);
    }

    /**
     * Sets <code>value</code> as attribute value for ACCTNUM using the alias name Acctnum.
     * @param value value to set the ACCTNUM
     */
    public void setAcctnum(String value) {
        setAttributeInternal(ACCTNUM, value);
    }

    /**
     * Gets the attribute value for TYPE using the alias name Type.
     * @return the TYPE
     */
    public String getType() {
        return (String) getAttributeInternal(TYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for TYPE using the alias name Type.
     * @param value value to set the TYPE
     */
    public void setType(String value) {
        setAttributeInternal(TYPE, value);
    }

    /**
     * Gets the attribute value for INT using the alias name Int1.
     * @return the INT
     */
    public String getInt1() {
        return (String) getAttributeInternal(INT1);
    }

    /**
     * Sets <code>value</code> as attribute value for INT using the alias name Int1.
     * @param value value to set the INT
     */
    public void setInt1(String value) {
        setAttributeInternal(INT1, value);
    }

    /**
     * Gets the attribute value for INVCR using the alias name Invcr.
     * @return the INVCR
     */
    public Double getInvcr() {
        return (Double)getAttributeInternal(INVCR);
    }

    /**
     * Sets <code>value</code> as attribute value for INVCR using the alias name Invcr.
     * @param value value to set the INVCR
     */
    public void setInvcr(Double value) {
        setAttributeInternal(INVCR, value);
    }

    /**
     * Gets the attribute value for REF using the alias name Ref.
     * @return the REF
     */
    public Number getRef() {
        return (Number)getAttributeInternal(REF);
    }

    /**
     * Sets <code>value</code> as attribute value for REF using the alias name Ref.
     * @param value value to set the REF
     */
    public void setRef(Number value) {
        setAttributeInternal(REF, value);
    }


    /**
     * Gets the associated <code>RowIterator</code> using master-detail link InvWorkOrders.
     */
    public RowIterator getInvWorkOrders() {
        return (RowIterator)getAttributeInternal(INVWORKORDERS);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link InvCrWorkOrders.
     */
    public RowIterator getInvCrWorkOrders() {
        return (RowIterator)getAttributeInternal(INVCRWORKORDERS);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link RetroItemDetail.
     */
    public RowIterator getRetroItemDetail() {
        return (RowIterator)getAttributeInternal(RETROITEMDETAIL);
    }

    /**
     * Gets the view accessor <code>RowSet</code> InvoiceStatusLOV.
     */
    public RowSet getInvoiceStatusLOV() {
        return (RowSet)getAttributeInternal(INVOICESTATUSLOV);
    }

    /**
     * Gets the view accessor <code>RowSet</code> InvoiceTypeLOV.
     */
    public RowSet getInvoiceTypeLOV() {
        return (RowSet)getAttributeInternal(INVOICETYPELOV);
    }

    /**
     * Gets the view accessor <code>RowSet</code> YesNoBoolean.
     */
    public RowSet getYesNoBoolean() {
        return (RowSet)getAttributeInternal(YESNOBOOLEAN);
    }

    /**
     * Gets the view accessor <code>RowSet</code> MrltAccountmasterView.
     */
    public RowSet getMrltAccountmasterView() {
        return (RowSet)getAttributeInternal(MRLTACCOUNTMASTERVIEW);
    }

    /**
     * Gets the view accessor <code>RowSet</code> MrlrefMp5profileView.
     */
    public RowSet getMrlrefMp5profileView() {
        return (RowSet)getAttributeInternal(MRLREFMP5PROFILEVIEW);
    }

    /**
     * Gets the view accessor <code>RowSet</code> WOEvents.
     */
    public RowSet getWOEvents() {
        return (RowSet)getAttributeInternal(WOEVENTS);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
