package its.mnr.mp5.vo.invoice;

import its.mnr.mp5.baseclass.ExtendedEntityImpl;
import its.mnr.mp5.baseclass.ExtendedViewRowImpl;

import java.math.BigDecimal;

import java.sql.Timestamp;

import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.server.AttributeDefImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Aug 30 11:05:21 PDT 2021
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MrltInvoicexmlfeedViewRowImpl extends ExtendedViewRowImpl {


    public static final int ENTITY_MRLTINVOICEXMLFEED = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Invnum {
            public Object get(MrltInvoicexmlfeedViewRowImpl obj) {
                return obj.getInvnum();
            }

            public void put(MrltInvoicexmlfeedViewRowImpl obj, Object value) {
                obj.setInvnum((BigDecimal) value);
            }
        }
        ,
        Isprocessed {
            public Object get(MrltInvoicexmlfeedViewRowImpl obj) {
                return obj.getIsprocessed();
            }

            public void put(MrltInvoicexmlfeedViewRowImpl obj, Object value) {
                obj.setIsprocessed((String) value);
            }
        }
        ,
        tSel {
            public Object get(MrltInvoicexmlfeedViewRowImpl obj) {
                return obj.gettSel();
            }

            public void put(MrltInvoicexmlfeedViewRowImpl obj, Object value) {
                obj.settSel((String) value);
            }
        }
        ,
        Processeddate {
            public Object get(MrltInvoicexmlfeedViewRowImpl obj) {
                return obj.getProcesseddate();
            }

            public void put(MrltInvoicexmlfeedViewRowImpl obj, Object value) {
                obj.setProcesseddate((Timestamp) value);
            }
        }
        ,
        MrltInvoiceheaderView {
            public Object get(MrltInvoicexmlfeedViewRowImpl obj) {
                return obj.getMrltInvoiceheaderView();
            }

            public void put(MrltInvoicexmlfeedViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        YesNoBoolean1 {
            public Object get(MrltInvoicexmlfeedViewRowImpl obj) {
                return obj.getYesNoBoolean1();
            }

            public void put(MrltInvoicexmlfeedViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        public abstract Object get(MrltInvoicexmlfeedViewRowImpl object);

        public abstract void put(MrltInvoicexmlfeedViewRowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int INVNUM = AttributesEnum.Invnum.index();
    public static final int ISPROCESSED = AttributesEnum.Isprocessed.index();
    public static final int TSEL = AttributesEnum.tSel.index();
    public static final int PROCESSEDDATE = AttributesEnum.Processeddate.index();
    public static final int MRLTINVOICEHEADERVIEW = AttributesEnum.MrltInvoiceheaderView.index();
    public static final int YESNOBOOLEAN1 = AttributesEnum.YesNoBoolean1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MrltInvoicexmlfeedViewRowImpl() {
    }

    /**
     * Gets MrltInvoicexmlfeed entity object.
     * @return the MrltInvoicexmlfeed
     */
    public ExtendedEntityImpl getMrltInvoicexmlfeed() {
        return (ExtendedEntityImpl) getEntity(ENTITY_MRLTINVOICEXMLFEED);
    }

    /**
     * Gets the attribute value for INVNUM using the alias name Invnum.
     * @return the INVNUM
     */
    public BigDecimal getInvnum() {
        return (BigDecimal) getAttributeInternal(INVNUM);
    }

    /**
     * Sets <code>value</code> as attribute value for INVNUM using the alias name Invnum.
     * @param value value to set the INVNUM
     */
    public void setInvnum(BigDecimal value) {
        setAttributeInternal(INVNUM, value);
    }

    /**
     * Gets the attribute value for ISPROCESSED using the alias name Isprocessed.
     * @return the ISPROCESSED
     */
    public String getIsprocessed() {
        return (String) getAttributeInternal(ISPROCESSED);
    }

    /**
     * Sets <code>value</code> as attribute value for ISPROCESSED using the alias name Isprocessed.
     * @param value value to set the ISPROCESSED
     */
    public void setIsprocessed(String value) {
        setAttributeInternal(ISPROCESSED, value);
    }

    /**
     * Gets the attribute value for the calculated attribute tSel.
     * @return the tSel
     */
    public String gettSel() {
        return (String) getAttributeInternal(TSEL);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute tSel.
     * @param value value to set the  tSel
     */
    public void settSel(String value) {
        setAttributeInternal(TSEL, value);
    }


    /**
     * Gets the attribute value for PROCESSEDDATE using the alias name Processeddate.
     * @return the PROCESSEDDATE
     */
    public Timestamp getProcesseddate() {
        return (Timestamp) getAttributeInternal(PROCESSEDDATE);
    }

    /**
     * Sets <code>value</code> as attribute value for PROCESSEDDATE using the alias name Processeddate.
     * @param value value to set the PROCESSEDDATE
     */
    public void setProcesseddate(Timestamp value) {
        setAttributeInternal(PROCESSEDDATE, value);
    }

    /**
     * Gets the associated <code>Row</code> using master-detail link MrltInvoiceheaderView.
     */
    public Row getMrltInvoiceheaderView() {
        return (Row) getAttributeInternal(MRLTINVOICEHEADERVIEW);
    }

    /**
     * Sets the master-detail link MrltInvoiceheaderView between this object and <code>value</code>.
     */
    public void setMrltInvoiceheaderView(Row value) {
        setAttributeInternal(MRLTINVOICEHEADERVIEW, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> YesNoBoolean1.
     */
    public RowSet getYesNoBoolean1() {
        return (RowSet) getAttributeInternal(YESNOBOOLEAN1);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}

