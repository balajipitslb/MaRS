package its.mnr.mp5.vo.asset;

import its.mnr.mp5.baseclass.ExtendedViewRowImpl;
import its.mnr.mp5.eo.local.MrltReadingImpl;


import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.RowID;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.AttributeDefImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Aug 30 10:17:10 PDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AssetReadingRowImpl extends ExtendedViewRowImpl {


    public static final int ENTITY_MRLTREADING = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Rowid {
            public Object get(AssetReadingRowImpl obj) {
                return obj.getRowid();
            }

            public void put(AssetReadingRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Org {
            public Object get(AssetReadingRowImpl obj) {
                return obj.getOrg();
            }

            public void put(AssetReadingRowImpl obj, Object value) {
                obj.setOrg((String) value);
            }
        }
        ,
        Readingitem {
            public Object get(AssetReadingRowImpl obj) {
                return obj.getReadingitem();
            }

            public void put(AssetReadingRowImpl obj, Object value) {
                obj.setReadingitem((String) value);
            }
        }
        ,
        Readingdate {
            public Object get(AssetReadingRowImpl obj) {
                return obj.getReadingdate();
            }

            public void put(AssetReadingRowImpl obj, Object value) {
                obj.setReadingdate((Date) value);
            }
        }
        ,
        Readingvalue {
            public Object get(AssetReadingRowImpl obj) {
                return obj.getReadingvalue();
            }

            public void put(AssetReadingRowImpl obj, Object value) {
                obj.setReadingvalue((Integer) value);
            }
        }
        ,
        Readingdiff {
            public Object get(AssetReadingRowImpl obj) {
                return obj.getReadingdiff();
            }

            public void put(AssetReadingRowImpl obj, Object value) {
                obj.setReadingdiff((Integer) value);
            }
        }
        ,
        Uom {
            public Object get(AssetReadingRowImpl obj) {
                return obj.getUom();
            }

            public void put(AssetReadingRowImpl obj, Object value) {
                obj.setUom((String) value);
            }
        }
        ,
        Readinglabel {
            public Object get(AssetReadingRowImpl obj) {
                return obj.getReadinglabel();
            }

            public void put(AssetReadingRowImpl obj, Object value) {
                obj.setReadinglabel((Integer) value);
            }
        }
        ,
        tAssetClass {
            public Object get(AssetReadingRowImpl obj) {
                return obj.gettAssetClass();
            }

            public void put(AssetReadingRowImpl obj, Object value) {
                obj.settAssetClass((String) value);
            }
        }
        ,
        tLastReadingValue {
            public Object get(AssetReadingRowImpl obj) {
                return obj.gettLastReadingValue();
            }

            public void put(AssetReadingRowImpl obj, Object value) {
                obj.settLastReadingValue((Integer) value);
            }
        }
        ,
        tLastReadingDate {
            public Object get(AssetReadingRowImpl obj) {
                return obj.gettLastReadingDate();
            }

            public void put(AssetReadingRowImpl obj, Object value) {
                obj.settLastReadingDate((Date) value);
            }
        }
        ,
        tLabelDesc {
            public Object get(AssetReadingRowImpl obj) {
                return obj.gettLabelDesc();
            }

            public void put(AssetReadingRowImpl obj, Object value) {
                obj.settLabelDesc((String) value);
            }
        }
        ,
        tAssetStatus {
            public Object get(AssetReadingRowImpl obj) {
                return obj.gettAssetStatus();
            }

            public void put(AssetReadingRowImpl obj, Object value) {
                obj.settAssetStatus((String) value);
            }
        }
        ,
        Createdt {
            public Object get(AssetReadingRowImpl obj) {
                return obj.getCreatedt();
            }

            public void put(AssetReadingRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        MrltAssetView {
            public Object get(AssetReadingRowImpl obj) {
                return obj.getMrltAssetView();
            }

            public void put(AssetReadingRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        MrltLabelsViewReading {
            public Object get(AssetReadingRowImpl obj) {
                return obj.getMrltLabelsViewReading();
            }

            public void put(AssetReadingRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        static AttributesEnum[] vals = null;
        ;
        private static int firstIndex = 0;

        public abstract Object get(AssetReadingRowImpl object);

        public abstract void put(AssetReadingRowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ROWID = AttributesEnum.Rowid.index();
    public static final int ORG = AttributesEnum.Org.index();
    public static final int READINGITEM = AttributesEnum.Readingitem.index();
    public static final int READINGDATE = AttributesEnum.Readingdate.index();
    public static final int READINGVALUE = AttributesEnum.Readingvalue.index();
    public static final int READINGDIFF = AttributesEnum.Readingdiff.index();
    public static final int UOM = AttributesEnum.Uom.index();
    public static final int READINGLABEL = AttributesEnum.Readinglabel.index();
    public static final int TASSETCLASS = AttributesEnum.tAssetClass.index();
    public static final int TLASTREADINGVALUE = AttributesEnum.tLastReadingValue.index();
    public static final int TLASTREADINGDATE = AttributesEnum.tLastReadingDate.index();
    public static final int TLABELDESC = AttributesEnum.tLabelDesc.index();
    public static final int TASSETSTATUS = AttributesEnum.tAssetStatus.index();
    public static final int CREATEDT = AttributesEnum.Createdt.index();
    public static final int MRLTASSETVIEW = AttributesEnum.MrltAssetView.index();
    public static final int MRLTLABELSVIEWREADING = AttributesEnum.MrltLabelsViewReading.index();

    /**
     * This is the default constructor (do not remove).
     */
    public AssetReadingRowImpl() {
    }

    /**
     * Gets MrltReading entity object.
     * @return the MrltReading
     */
    public MrltReadingImpl getMrltReading() {
        return (MrltReadingImpl)getEntity(ENTITY_MRLTREADING);
    }

    /**
     * Gets the attribute value for ROWID using the alias name Rowid.
     * @return the ROWID
     */
    public RowID getRowid() {
        return (RowID) getAttributeInternal(ROWID);
    }


    /**
     * Gets the attribute value for ORG using the alias name Org.
     * @return the ORG
     */
    public String getOrg() {
        return (String) getAttributeInternal(ORG);
    }

    /**
     * Sets <code>value</code> as attribute value for ORG using the alias name Org.
     * @param value value to set the ORG
     */
    public void setOrg(String value) {
        setAttributeInternal(ORG, value);
    }

    /**
     * Gets the attribute value for READINGITEM using the alias name Readingitem.
     * @return the READINGITEM
     */
    public String getReadingitem() {
        return (String) getAttributeInternal(READINGITEM);
    }

    /**
     * Sets <code>value</code> as attribute value for READINGITEM using the alias name Readingitem.
     * @param value value to set the READINGITEM
     */
    public void setReadingitem(String value) {
        setAttributeInternal(READINGITEM, value);
    }

    /**
     * Gets the attribute value for READINGDATE using the alias name Readingdate.
     * @return the READINGDATE
     */
    
    public Date getReadingdate() {
        return (Date) getAttributeInternal(READINGDATE);
    }

    /**
     * Sets <code>value</code> as attribute value for READINGDATE using the alias name Readingdate.
     * @param value value to set the READINGDATE
     */
    public void setReadingdate(Date value) {
        setAttributeInternal(READINGDATE, value);
    }

    /**
     * Gets the attribute value for READINGVALUE using the alias name Readingvalue.
     * @return the READINGVALUE
     */
    public Integer getReadingvalue() {
        return (Integer) getAttributeInternal(READINGVALUE);
    }

    /**
     * Sets <code>value</code> as attribute value for READINGVALUE using the alias name Readingvalue.
     * @param value value to set the READINGVALUE
     */
    public void setReadingvalue(Integer value) {
        setAttributeInternal(READINGVALUE, value);
    }

    /**
     * Gets the attribute value for READINGDIFF using the alias name Readingdiff.
     * @return the READINGDIFF
     */
    public Integer getReadingdiff() {
        return (Integer) getAttributeInternal(READINGDIFF);
    }

    /**
     * Sets <code>value</code> as attribute value for READINGDIFF using the alias name Readingdiff.
     * @param value value to set the READINGDIFF
     */
    public void setReadingdiff(Integer value) {
        setAttributeInternal(READINGDIFF, value);
    }

    /**
     * Gets the attribute value for UOM using the alias name Uom.
     * @return the UOM
     */
    public String getUom() {
        return (String) getAttributeInternal(UOM);
    }

    /**
     * Sets <code>value</code> as attribute value for UOM using the alias name Uom.
     * @param value value to set the UOM
     */
    public void setUom(String value) {
        setAttributeInternal(UOM, value);
    }

    /**
     * Gets the attribute value for READINGLABEL using the alias name Readinglabel.
     * @return the READINGLABEL
     */
    public Integer getReadinglabel() {
        return (Integer) getAttributeInternal(READINGLABEL);
    }

    /**
     * Sets <code>value</code> as attribute value for READINGLABEL using the alias name Readinglabel.
     * @param value value to set the READINGLABEL
     */
    public void setReadinglabel(Integer value) {
        setAttributeInternal(READINGLABEL, value);
    }

    /**
     * Gets the attribute value for T_ASSET_CLASS using the alias name tAssetClass.
     * @return the T_ASSET_CLASS
     */
    public String gettAssetClass() {
        return (String) getAttributeInternal(TASSETCLASS);
    }

    /**
     * Sets <code>value</code> as attribute value for T_ASSET_CLASS using the alias name tAssetClass.
     * @param value value to set the T_ASSET_CLASS
     */
    public void settAssetClass(String value) {
        setAttributeInternal(TASSETCLASS, value);
    }

    /**
     * Gets the attribute value for T_LAST_READING_VALUE using the alias name tLastReadingValue.
     * @return the T_LAST_READING_VALUE
     */
    public Integer gettLastReadingValue() {
        return (Integer) getAttributeInternal(TLASTREADINGVALUE);
    }

    /**
     * Sets <code>value</code> as attribute value for T_LAST_READING_VALUE using the alias name tLastReadingValue.
     * @param value value to set the T_LAST_READING_VALUE
     */
    public void settLastReadingValue(Integer value) {
        setAttributeInternal(TLASTREADINGVALUE, value);
    }

    /**
     * Gets the attribute value for T_LAST_READING_DATE using the alias name tLastReadingDate.
     * @return the T_LAST_READING_DATE
     */
    public Date gettLastReadingDate() {
        return (Date) getAttributeInternal(TLASTREADINGDATE);
    }

    /**
     * Sets <code>value</code> as attribute value for T_LAST_READING_DATE using the alias name tLastReadingDate.
     * @param value value to set the T_LAST_READING_DATE
     */
    public void settLastReadingDate(Date value) {
        setAttributeInternal(TLASTREADINGDATE, value);
    }

    /**
     * Gets the attribute value for T_LABEL_DESC using the alias name tLabelDesc.
     * @return the T_LABEL_DESC
     */
    public String gettLabelDesc() {
        return (String) getAttributeInternal(TLABELDESC);
    }

    /**
     * Sets <code>value</code> as attribute value for T_LABEL_DESC using the alias name tLabelDesc.
     * @param value value to set the T_LABEL_DESC
     */
    public void settLabelDesc(String value) {
        setAttributeInternal(TLABELDESC, value);
    }

    /**
     * Gets the attribute value for T_ASSET_STATUS using the alias name tAssetStatus.
     * @return the T_ASSET_STATUS
     */
    public String gettAssetStatus() {
        return (String) getAttributeInternal(TASSETSTATUS);
    }

    /**
     * Sets <code>value</code> as attribute value for T_ASSET_STATUS using the alias name tAssetStatus.
     * @param value value to set the T_ASSET_STATUS
     */
    public void settAssetStatus(String value) {
        setAttributeInternal(TASSETSTATUS, value);
    }

    /**
     * Gets the attribute value for CREATEDT using the alias name Createdt.
     * @return the CREATEDT
     */
    public Date getCreatedt() {
        return (Date) getAttributeInternal(CREATEDT);
    }


    /**
     * Gets the associated <code>Row</code> using master-detail link MrltAssetView.
     */
    public Row getMrltAssetView() {
        return (Row)getAttributeInternal(MRLTASSETVIEW);
    }

    /**
     * Sets the master-detail link MrltAssetView between this object and <code>value</code>.
     */
    public void setMrltAssetView(Row value) {
        setAttributeInternal(MRLTASSETVIEW, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> MrltLabelsViewReading.
     */
    public RowSet getMrltLabelsViewReading() {
        return (RowSet)getAttributeInternal(MRLTLABELSVIEWREADING);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
