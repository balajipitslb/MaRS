package its.mnr.mp5.vo.cyclecount;

import its.mnr.mp5.baseclass.ExtendedViewRowImpl;

import its.mnr.mp5.model.Util;
import its.mnr.mp5.vo.admin.MrlrefMp5profileViewImpl;
import its.mnr.mp5.vo.cyclecount.common.CycleCountPartsRow;
import its.mnr.mp5.vo.invoice.MrltInvoiceheaderViewImpl;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;

import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.Calendar;
import java.util.HashMap;

import oracle.adf.share.ADFContext;

import oracle.jbo.JboException;

import org.w3c.dom.Node;

import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.ViewCriteria;
import oracle.jbo.XMLInterface;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.AttributeDefImpl;

import oracle.xml.parser.v2.XMLNode;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Feb 24 09:18:04 PST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CycleCountPartsRowImpl extends ExtendedViewRowImpl implements CycleCountPartsRow {
    public static int NUMBER = Types.NUMERIC;
    public static int DATE = Types.DATE;
    public static int VARCHAR2 = Types.VARCHAR;

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }

  

    protected void callStoredProcedure(String stmt, Object[] bindVars) {
        PreparedStatement st = null;
        try {
            // 1. Create a JDBC PreparedStatement for
            st = getDBTransaction().createPreparedStatement("begin " + stmt + ";end;", 0);
            if (bindVars != null) {
                // 2. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 3. Set the value of each bind variable in the statement
                    st.setObject(z + 1, bindVars[z]);
                   
                }
            }
            // 4. Execute the statement
            st.executeUpdate();
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    // 5. Close the statement
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }  

    /**Method to call Database function
         * @param stmt
         * @param bindVars
         * @return
         */
        protected String callSCH_CREATE_JOBS(String stmt, Object[] bindVars) {
            CallableStatement st = null;
            String ret = "";
            try {
              //Creating sql statement
                st = this.getDBTransaction().createCallableStatement("begin " + stmt + ";end;", 0);
                
              
                //  Set the bind values of the IN parameters (Employee Id is Input parameter here)
                st.setObject(1, bindVars[0]);
                st.setObject(2, bindVars[1]);
                st.setObject(3, bindVars[2]);
                st.setObject(4, bindVars[3]);
                st.setObject(5, bindVars[4]);
                st.setObject(6, bindVars[5]);
               //Register out parameters and their types (In this case procedure has 2 out parameters)

                st.registerOutParameter(7, Types.VARCHAR);
                
                // Execute the statement
                st.executeUpdate();
               
               // Print Return Values of out parameters

                ret = st.getString(7);
                //System.out.println("RETURN: " + ret);
            
              
            } catch (SQLException e) {
                throw new JboException(e.getMessage());
              
            } finally {
                if (st != null) {
                    try {
                        st.close();
                    } catch (SQLException e) {

                    }
                }
            }
            return ret;
        }


    
        //method to get startDate for the dbms_scheduler
        public Timestamp getStartDate(){
            long retryDate = System.currentTimeMillis();
            Timestamp original = new Timestamp(retryDate);
            Calendar cal = Calendar.getInstance();
            cal.setTimeInMillis(original.getTime());
            cal.add(Calendar.SECOND, 3);
            Timestamp startDate = new Timestamp(cal.getTime().getTime());
            return startDate;
        }
        
        //method to get endDate for the dbms_scheduler
        public Timestamp getEndDate(){
            long retryDate = System.currentTimeMillis();
            Timestamp original = new Timestamp(retryDate);
            Calendar cal = Calendar.getInstance();
            cal.setTimeInMillis(original.getTime());
            cal.add(Calendar.MINUTE, 3);
            Timestamp endDate = new Timestamp(cal.getTime().getTime());
            return endDate;
        } 

    public String getMP5Profile(String sprofile) {
        String ret;
        //set and execute View Criteria
        RowSet rs = this.getMrlrefMp5profileView();
        MrlrefMp5profileViewImpl impl = (MrlrefMp5profileViewImpl)rs.getViewObject();
        ViewCriteria vc = impl.getViewCriteria("MP5ProfileByProfile");
        vc.resetCriteria();
        impl.setprofileBind(sprofile);
        impl.applyViewCriteria(vc);
        // set range size to 1 since we expect a single record
        impl.setRangeSize(1);
        // execute query to make sure we get latest data!
        impl.executeQuery();
        Row rw = impl.first();
        if (rw != null) {
            ret = (String)rw.getAttribute("Value");
            rs.closeRowSet();
            return ret;
        }

        return null;
    }

    public String writeCCListXML(String pList, String pType, String recEmail) {
        //System.out.println("inside CycleCountPartsRowImpl writeCCListXML() pList:"+pList+" pType: "+pType+" recEmail: "+recEmail);
        
        String ret = "FALSE";
        //java.util.Date date= new java.util.Date();
        //Timestamp time = new Timestamp(date.getTime());

        CycleCountPartsImpl vo = (CycleCountPartsImpl)this.getViewObject();
        ////System.out.println("Start: " + new Timestamp(date.getTime()));
        //System.out.println("vo.getEstimatedRowCount(): " + vo.getEstimatedRowCount());
            
        HashMap attrMap = new HashMap(2);
        String HEADERVODEF = "its.mnr.mp5.vo.cyclecount.CycleCountParts";
        String[] HEADERATTRS =
        { "ParCode", "ParOrg", "BisBin", "BisLot", "BisStore", "BisQty", "BisPartOrg", "ParClass" };
        attrMap.put(HEADERVODEF, HEADERATTRS);

        String filepath = getMP5Profile("CCListOutPath");

        File testfile = new java.io.File(filepath);
        Boolean bRet = testfile.canWrite();
        if (!bRet) {
            throw new JboException("testfile.canWrite(): " + bRet.toString());
        } else {
            //System.out.println("testfile.canWrite(): " + bRet.toString());
        }
        
        String filename = pList + "#" + pType + "#CCLIST.xml";
        String filenamelong = filepath + filename;
        Util.printXML(vo.writeXML(XMLInterface.XML_OPT_ALL_ROWS, attrMap), filenamelong);

        /*Uncomment to print to screen
            Node n = vo.writeXML(-1,attrMap);
            PrintWriter pw = new PrintWriter(System.out);
            try {
                ((XMLNode)n).print(pw);
            } catch (IOException e) {
            }*/

        //Check if file exists
        File xmlExist = new File(filenamelong);
        //System.out.println("inside writeCCListXML(): xmlExist: ");
        String jobName = "CC"+pList+"CreateList";
      //  String jobName1 = "MP5PRD.CCPROCESSLISTXML_JOB_"+pList+"_"+pType;
      String retCCPROCESSLISTXML = "";
        if (xmlExist.exists()) {
            //System.out.println("xmlExist: " + xmlExist);
            if((recEmail!=null)&&(recEmail!="")){
                //System.out.println("inside writeCCListXML() 2 pList:"+pList+" pType: "+pType+" recEmail: "+recEmail);
                retCCPROCESSLISTXML = CCPROCESSLISTXML(pList, pType, filename, jobName,recEmail);
                //System.out.println("retCCPROCESSLISTXML: " + retCCPROCESSLISTXML);
            }
           
           /* 
            if((retCCPROCESSLISTXML.equals("TRUE"))&&(recEmail!=null)&&(recEmail!="")){
                //System.out.println("inside writeCCListXML() 2 pList:"+pList+" pType: "+pType+" recEmail: "+recEmail);                
                String eventsStr = "JOB_FAILED, JOB_BROKEN, JOB_DISABLED, JOB_SCH_LIM_REACHED, JOB_STARTED, JOB_SUCCEEDED";  
                emailSubscription(jobName1, recEmail, eventsStr);
            }*/
            ret = retCCPROCESSLISTXML;
        }
        return ret;
        //return null;
    }

    public Boolean writeTest(String pPath, String pFileName, String pText) {
        ////System.out.println("inside writeInvoiceCrXML()");
        Boolean ret = false;
        //java.util.Date date= new java.util.Date();
        //Timestamp time = new Timestamp(date.getTime());

        File testfile = new java.io.File(pPath);
        String filename = pFileName;
        String filenamelong = pPath + filename;
        
        Boolean bRet = testfile.canWrite();
        if (!bRet) {
            throw new JboException("System can not print: " + filenamelong);
        } else {            
            Util.writeTextFile(filenamelong, pText);
            ret = true;
        }
        
        /*Uncomment to print to screen
            Node n = vo.writeXML(-1,attrMap);
            PrintWriter pw = new PrintWriter(System.out);
            try {
                ((XMLNode)n).print(pw);
            } catch (IOException e) {
            }*/

        return ret;
    }
    
    public String CCPROCESSLISTXML(String PLISTID, String PTYPE, String PFILE, String jobName, String recEmail) {
        // //System.out.println("Function getWOJobType");
        /*
        String ret =
            (String)callStoredFunction(VARCHAR2, "mnrpkg.CCPROCESSLISTXML(?,?,?)", new Object[] { PLISTID, PTYPE,
                                                                                                  PFILE });
        */
        if(ADFContext.getCurrent().getSessionScope().containsKey("emailSubCh")){
            //System.out.println("emailSubChk value: "+ADFContext.getCurrent().getSessionScope().get("emailSubCh"));
        }
        System.out.println("Inside CCPROCESSLISTXML_email str = CCPROCESSLISTXML list "+PLISTID+" "+PTYPE+" "+PFILE+ " "+recEmail+", SYSDATE + 3/86400, SYSDATE + 3/1440, CCPROCESSLISTXML list "+PLISTID+" "+PTYPE+" "+PFILE);
        String str = "";
        str = "BEGIN MNRPKG.CCPROCESSLISTXML_email('"+PLISTID+"','"+PTYPE+"','"+PFILE+"','"+recEmail+"'); END;";
         //System.out.println("Inside CCPROCESSLISTXML_email str = " + str);
        
        //String jobName = "CCPROCESSLISTXML_JOB_"+PLISTID+"_"+PTYPE;
        
        Timestamp startDate = getStartDate();
        Timestamp endDate = getEndDate();   
        //String comments = "CCPROCESSLISTXML_JOB_"+PLISTID+"_"+PTYPE;
        String comments = jobName;
        String ret = callSCH_CREATE_JOBS("MNRPKG.SCH_CREATE_JOBS(?,?,?,?,?,?,?)",new Object[]{str, jobName, startDate, endDate,comments,recEmail});
        //System.out.println("Function WorkOrderRFIUpd = " + ret);
        return ret;
        // return "TRUE";
    }

    public void emailSubscription(String jobName, String recipients, String eventsStr) {
        // //System.out.println("Function getWOJobType");
        /*
        String ret =
            (String)callStoredFunction(VARCHAR2, "mnrpkg.CCPROCESSLISTXML(?,?,?)", new Object[] { PLISTID, PTYPE,
                                                                                                  PFILE });
        */
        String str = "";
        str = "BEGIN MNRPKG.SCH_ADD_JOB_EMAIL_NOTIFICATION('"+jobName+"','"+recipients+"','"+eventsStr+"'); END;";
         //System.out.println("Inside emailSubscription str = " + str);
        //System.out.println("Inside emailSubscription str = emailSubscription list "+jobName+" "+recipients+" "+eventsStr);
       // String jobName = "CCPROCESSLISTXML_job_"+PLISTID+"_"+PTYPE;
        
        Timestamp startDate = getStartDate();
        Timestamp endDate = getEndDate();   
        String comments = jobName;
        //String ret = 
       callStoredProcedure("MNRPKG.SCH_ADD_JOB_EMAIL_NOTIFICATION(?,?,?)",new Object[]{jobName, recipients, eventsStr});
       // //System.out.println("Function WorkOrderRFIUpd = " + ret);
       // return ret;
        // return "TRUE";
    }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        ParCode {
            public Object get(CycleCountPartsRowImpl obj) {
                return obj.getParCode();
            }

            public void put(CycleCountPartsRowImpl obj, Object value) {
                obj.setParCode((String)value);
            }
        }
        ,
        ParOrg {
            public Object get(CycleCountPartsRowImpl obj) {
                return obj.getParOrg();
            }

            public void put(CycleCountPartsRowImpl obj, Object value) {
                obj.setParOrg((String)value);
            }
        }
        ,
        ParClass {
            public Object get(CycleCountPartsRowImpl obj) {
                return obj.getParClass();
            }

            public void put(CycleCountPartsRowImpl obj, Object value) {
                obj.setParClass((String)value);
            }
        }
        ,
        BisStore {
            public Object get(CycleCountPartsRowImpl obj) {
                return obj.getBisStore();
            }

            public void put(CycleCountPartsRowImpl obj, Object value) {
                obj.setBisStore((String)value);
            }
        }
        ,
        BisBin {
            public Object get(CycleCountPartsRowImpl obj) {
                return obj.getBisBin();
            }

            public void put(CycleCountPartsRowImpl obj, Object value) {
                obj.setBisBin((String)value);
            }
        }
        ,
        BisLot {
            public Object get(CycleCountPartsRowImpl obj) {
                return obj.getBisLot();
            }

            public void put(CycleCountPartsRowImpl obj, Object value) {
                obj.setBisLot((String)value);
            }
        }
        ,
        BisQty {
            public Object get(CycleCountPartsRowImpl obj) {
                return obj.getBisQty();
            }

            public void put(CycleCountPartsRowImpl obj, Object value) {
                obj.setBisQty((Number)value);
            }
        }
        ,
        BisPart {
            public Object get(CycleCountPartsRowImpl obj) {
                return obj.getBisPart();
            }

            public void put(CycleCountPartsRowImpl obj, Object value) {
                obj.setBisPart((String)value);
            }
        }
        ,
        BisPartOrg {
            public Object get(CycleCountPartsRowImpl obj) {
                return obj.getBisPartOrg();
            }

            public void put(CycleCountPartsRowImpl obj, Object value) {
                obj.setBisPartOrg((String)value);
            }
        }
        ,
        Displayed {
            public Object get(CycleCountPartsRowImpl obj) {
                return obj.getDisplayed();
            }

            public void put(CycleCountPartsRowImpl obj, Object value) {
                obj.setDisplayed((String)value);
            }
        }
        ,
        tStoreroom {
            public Object get(CycleCountPartsRowImpl obj) {
                return obj.gettStoreroom();
            }

            public void put(CycleCountPartsRowImpl obj, Object value) {
                obj.settStoreroom((String)value);
            }
        }
        ,
        MrltCyclecountpartstoresView {
            public Object get(CycleCountPartsRowImpl obj) {
                return obj.getMrltCyclecountpartstoresView();
            }

            public void put(CycleCountPartsRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        MrlrefMp5profileView {
            public Object get(CycleCountPartsRowImpl obj) {
                return obj.getMrlrefMp5profileView();
            }

            public void put(CycleCountPartsRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(CycleCountPartsRowImpl object);

        public abstract void put(CycleCountPartsRowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int PARCODE = AttributesEnum.ParCode.index();
    public static final int PARORG = AttributesEnum.ParOrg.index();
    public static final int PARCLASS = AttributesEnum.ParClass.index();
    public static final int BISSTORE = AttributesEnum.BisStore.index();
    public static final int BISBIN = AttributesEnum.BisBin.index();
    public static final int BISLOT = AttributesEnum.BisLot.index();
    public static final int BISQTY = AttributesEnum.BisQty.index();
    public static final int BISPART = AttributesEnum.BisPart.index();
    public static final int BISPARTORG = AttributesEnum.BisPartOrg.index();
    public static final int DISPLAYED = AttributesEnum.Displayed.index();
    public static final int TSTOREROOM = AttributesEnum.tStoreroom.index();
    public static final int MRLTCYCLECOUNTPARTSTORESVIEW = AttributesEnum.MrltCyclecountpartstoresView.index();
    public static final int MRLREFMP5PROFILEVIEW = AttributesEnum.MrlrefMp5profileView.index();

    /**
     * This is the default constructor (do not remove).
     */
    public CycleCountPartsRowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute ParCode.
     * @return the ParCode
     */
    public String getParCode() {
        return (String)getAttributeInternal(PARCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ParCode.
     * @param value value to set the  ParCode
     */
    public void setParCode(String value) {
        setAttributeInternal(PARCODE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ParOrg.
     * @return the ParOrg
     */
    public String getParOrg() {
        return (String)getAttributeInternal(PARORG);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ParOrg.
     * @param value value to set the  ParOrg
     */
    public void setParOrg(String value) {
        setAttributeInternal(PARORG, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ParClass.
     * @return the ParClass
     */
    public String getParClass() {
        return (String)getAttributeInternal(PARCLASS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ParClass.
     * @param value value to set the  ParClass
     */
    public void setParClass(String value) {
        setAttributeInternal(PARCLASS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute BisStore.
     * @return the BisStore
     */
    public String getBisStore() {
        return (String)getAttributeInternal(BISSTORE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute BisStore.
     * @param value value to set the  BisStore
     */
    public void setBisStore(String value) {
        setAttributeInternal(BISSTORE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute BisBin.
     * @return the BisBin
     */
    public String getBisBin() {
        return (String)getAttributeInternal(BISBIN);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute BisBin.
     * @param value value to set the  BisBin
     */
    public void setBisBin(String value) {
        setAttributeInternal(BISBIN, value);
    }

    /**
     * Gets the attribute value for the calculated attribute BisLot.
     * @return the BisLot
     */
    public String getBisLot() {
        return (String)getAttributeInternal(BISLOT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute BisLot.
     * @param value value to set the  BisLot
     */
    public void setBisLot(String value) {
        setAttributeInternal(BISLOT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute BisQty.
     * @return the BisQty
     */
    public Number getBisQty() {
        return (Number)getAttributeInternal(BISQTY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute BisQty.
     * @param value value to set the  BisQty
     */
    public void setBisQty(Number value) {
        setAttributeInternal(BISQTY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute BisPart.
     * @return the BisPart
     */
    public String getBisPart() {
        return (String)getAttributeInternal(BISPART);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute BisPart.
     * @param value value to set the  BisPart
     */
    public void setBisPart(String value) {
        setAttributeInternal(BISPART, value);
    }

    /**
     * Gets the attribute value for the calculated attribute BisPartOrg.
     * @return the BisPartOrg
     */
    public String getBisPartOrg() {
        return (String)getAttributeInternal(BISPARTORG);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute BisPartOrg.
     * @param value value to set the  BisPartOrg
     */
    public void setBisPartOrg(String value) {
        setAttributeInternal(BISPARTORG, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Displayed.
     * @return the Displayed
     */
    public String getDisplayed() {
        return (String)getAttributeInternal(DISPLAYED);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Displayed.
     * @param value value to set the  Displayed
     */
    public void setDisplayed(String value) {
        setAttributeInternal(DISPLAYED, value);
    }


    /**
     * Gets the attribute value for the calculated attribute tStoreroom.
     * @return the tStoreroom
     */
    public String gettStoreroom() {
        return (String)getAttributeInternal(TSTOREROOM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute tStoreroom.
     * @param value value to set the  tStoreroom
     */
    public void settStoreroom(String value) {
        setAttributeInternal(TSTOREROOM, value);
    }


    /**
     * Gets the view accessor <code>RowSet</code> MrltCyclecountpartstoresView.
     */
    public RowSet getMrltCyclecountpartstoresView() {
        return (RowSet)getAttributeInternal(MRLTCYCLECOUNTPARTSTORESVIEW);
    }

    /**
     * Gets the view accessor <code>RowSet</code> MrlrefMp5profileView.
     */
    public RowSet getMrlrefMp5profileView() {
        return (RowSet)getAttributeInternal(MRLREFMP5PROFILEVIEW);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
