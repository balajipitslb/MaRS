package its.mnr.mp5.vo.cyclecount;

import its.mnr.mp5.baseclass.ExtendedEntityImpl;
import its.mnr.mp5.baseclass.ExtendedViewRowImpl;

import its.mnr.mp5.model.Util;
import its.mnr.mp5.vo.admin.MrlrefMp5profileViewImpl;


import its.mnr.mp5.vo.cyclecount.common.CycleCountPartsMainRow;

import java.io.File;

import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.HashMap;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.ViewCriteria;
import oracle.jbo.XMLInterface;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.AttributeDefImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Jul 09 10:28:38 PDT 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CycleCountPartsMainRowImpl extends ExtendedViewRowImpl implements CycleCountPartsMainRow {
    public static final int ENTITY_MRLTCYCLECOUNTPARTS = 0;
    public static int NUMBER = Types.NUMERIC;
    public static int DATE = Types.DATE;
    public static int VARCHAR2 = Types.VARCHAR;

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }

    protected void callStoredProcedure(String stmt, Object[] bindVars) {
        PreparedStatement st = null;
        try {
            // 1. Create a JDBC PreparedStatement for
            st = getDBTransaction().createPreparedStatement("begin " + stmt + ";end;", 0);
            if (bindVars != null) {
                // 2. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 3. Set the value of each bind variable in the statement
                    st.setObject(z + 1, bindVars[z]);
                }
            }
            // 4. Execute the statement
            st.executeUpdate();
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    // 5. Close the statement
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }    

    public String getMP5Profile(String sprofile) {
        String ret;
        //set and execute View Criteria
        RowSet rs = this.getMrlrefMp5profileView();
        MrlrefMp5profileViewImpl impl = (MrlrefMp5profileViewImpl)rs.getViewObject();
        ViewCriteria vc = impl.getViewCriteria("MP5ProfileByProfile");
        vc.resetCriteria();
        impl.setprofileBind(sprofile);
        impl.applyViewCriteria(vc);
        // set range size to 1 since we expect a single record
        impl.setRangeSize(1);
        // execute query to make sure we get latest data!
        impl.executeQuery();
        Row rw = impl.first();
        if (rw != null) {
            ret = (String)rw.getAttribute("Value");
            rs.closeRowSet();
            return ret;
        }

        return null;
    }

    public  String writeCCStoreListXML(String pList, String pType) {
        //System.out.println("inside writeInvoiceCrXML()");
        String ret = "FALSE";
        //java.util.Date date= new java.util.Date();
        //Timestamp time = new Timestamp(date.getTime());

        CycleCountPartsMainImpl vo = (CycleCountPartsMainImpl)this.getViewObject();
        //System.out.println("Start: " + new Timestamp(date.getTime()));

        HashMap attrMap = new HashMap(2);
        String HEADERVODEF = "its.mnr.mp5.vo.cyclecount.CycleCountPartsMain";
        String[] HEADERATTRS =
        { "StlPart", "StlPartOrg", "StlBin", "StlLot", "StlStore", "StlExpqty", "StlPartclass" };
        attrMap.put(HEADERVODEF, HEADERATTRS);

        String filepath = getMP5Profile("CCListOutPath");
        File testfile = new java.io.File(filepath);
        Boolean bRet = testfile.canWrite();
        if (!bRet) {
            throw new JboException("testfile.canWrite(): " + bRet.toString());
        } else {
            System.out.println("testfile.canWrite(): " + bRet.toString());
        }
        String filename = pList + "#" + pType + "#CCLIST.xml";
        String filenamelong = filepath + filename;
        Util.printXML(vo.writeXML(XMLInterface.XML_OPT_ALL_ROWS, attrMap), filenamelong);

        /*Uncomment to print to screen
            Node n = vo.writeXML(-1,attrMap);
            PrintWriter pw = new PrintWriter(System.out);
            try {
                ((XMLNode)n).print(pw);
            } catch (IOException e) {
            }*/

        //Check if file exists
        File xmlExist = new File(filenamelong);
        if (xmlExist.exists()) {
            //System.out.println("xmlExist: " + xmlExist);
            String retCCPROCESSLISTXML = CCPROCESSLISTXML(pList, pType, filename);
           // System.out.println("retCCPROCESSLISTXML: " + retCCPROCESSLISTXML);
           // ret = "TRUE".equals(retCCPROCESSLISTXML)? true : false;
            ret = retCCPROCESSLISTXML;
        }
        return ret;
    }

    public String CCPROCESSLISTXML(String PLISTID, String PTYPE, String PFILE) {
        // System.out.println("Function getWOJobType");
        String ret =
            (String)callStoredFunction(VARCHAR2, "mnrpkg.CCPROCESSLISTXML(?,?,?)", new Object[] { PLISTID, PTYPE,
                                                                                                  PFILE });
        //System.out.println("Function WorkOrderRFIUpd = " + ret);
        return ret;
    }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Ccpid {
            public Object get(CycleCountPartsMainRowImpl obj) {
                return obj.getCcpid();
            }

            public void put(CycleCountPartsMainRowImpl obj, Object value) {
                obj.setCcpid((Number) value);
            }
        }
        ,
        StlBin {
            public Object get(CycleCountPartsMainRowImpl obj) {
                return obj.getStlBin();
            }

            public void put(CycleCountPartsMainRowImpl obj, Object value) {
                obj.setStlBin((String) value);
            }
        }
        ,
        StlExpqty {
            public Object get(CycleCountPartsMainRowImpl obj) {
                return obj.getStlExpqty();
            }

            public void put(CycleCountPartsMainRowImpl obj, Object value) {
                obj.setStlExpqty((Number) value);
            }
        }
        ,
        StlListid {
            public Object get(CycleCountPartsMainRowImpl obj) {
                return obj.getStlListid();
            }

            public void put(CycleCountPartsMainRowImpl obj, Object value) {
                obj.setStlListid((Integer) value);
            }
        }
        ,
        StlLot {
            public Object get(CycleCountPartsMainRowImpl obj) {
                return obj.getStlLot();
            }

            public void put(CycleCountPartsMainRowImpl obj, Object value) {
                obj.setStlLot((String) value);
            }
        }
        ,
        StlPart {
            public Object get(CycleCountPartsMainRowImpl obj) {
                return obj.getStlPart();
            }

            public void put(CycleCountPartsMainRowImpl obj, Object value) {
                obj.setStlPart((String) value);
            }
        }
        ,
        StlPartOrg {
            public Object get(CycleCountPartsMainRowImpl obj) {
                return obj.getStlPartOrg();
            }

            public void put(CycleCountPartsMainRowImpl obj, Object value) {
                obj.setStlPartOrg((String) value);
            }
        }
        ,
        StlPartclass {
            public Object get(CycleCountPartsMainRowImpl obj) {
                return obj.getStlPartclass();
            }

            public void put(CycleCountPartsMainRowImpl obj, Object value) {
                obj.setStlPartclass((String) value);
            }
        }
        ,
        StlPhyqty {
            public Object get(CycleCountPartsMainRowImpl obj) {
                return obj.getStlPhyqty();
            }

            public void put(CycleCountPartsMainRowImpl obj, Object value) {
                obj.setStlPhyqty((Number) value);
            }
        }
        ,
        StlStore {
            public Object get(CycleCountPartsMainRowImpl obj) {
                return obj.getStlStore();
            }

            public void put(CycleCountPartsMainRowImpl obj, Object value) {
                obj.setStlStore((String) value);
            }
        }
        ,
        StlTimestamp {
            public Object get(CycleCountPartsMainRowImpl obj) {
                return obj.getStlTimestamp();
            }

            public void put(CycleCountPartsMainRowImpl obj, Object value) {
                obj.setStlTimestamp((Timestamp) value);
            }
        }
        ,
        StlTrans {
            public Object get(CycleCountPartsMainRowImpl obj) {
                return obj.getStlTrans();
            }

            public void put(CycleCountPartsMainRowImpl obj, Object value) {
                obj.setStlTrans((String) value);
            }
        }
        ,
        StlType {
            public Object get(CycleCountPartsMainRowImpl obj) {
                return obj.getStlType();
            }

            public void put(CycleCountPartsMainRowImpl obj, Object value) {
                obj.setStlType((String) value);
            }
        }
        ,
        Selected {
            public Object get(CycleCountPartsMainRowImpl obj) {
                return obj.getSelected();
            }

            public void put(CycleCountPartsMainRowImpl obj, Object value) {
                obj.setSelected((Boolean) value);
            }
        }
        ,
        MrlrefMp5profileView {
            public Object get(CycleCountPartsMainRowImpl obj) {
                return obj.getMrlrefMp5profileView();
            }

            public void put(CycleCountPartsMainRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        static AttributesEnum[] vals = null;
        ;
        private static int firstIndex = 0;

        public abstract Object get(CycleCountPartsMainRowImpl object);

        public abstract void put(CycleCountPartsMainRowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CCPID = AttributesEnum.Ccpid.index();
    public static final int STLBIN = AttributesEnum.StlBin.index();
    public static final int STLEXPQTY = AttributesEnum.StlExpqty.index();
    public static final int STLLISTID = AttributesEnum.StlListid.index();
    public static final int STLLOT = AttributesEnum.StlLot.index();
    public static final int STLPART = AttributesEnum.StlPart.index();
    public static final int STLPARTORG = AttributesEnum.StlPartOrg.index();
    public static final int STLPARTCLASS = AttributesEnum.StlPartclass.index();
    public static final int STLPHYQTY = AttributesEnum.StlPhyqty.index();
    public static final int STLSTORE = AttributesEnum.StlStore.index();
    public static final int STLTIMESTAMP = AttributesEnum.StlTimestamp.index();
    public static final int STLTRANS = AttributesEnum.StlTrans.index();
    public static final int STLTYPE = AttributesEnum.StlType.index();
    public static final int SELECTED = AttributesEnum.Selected.index();
    public static final int MRLREFMP5PROFILEVIEW = AttributesEnum.MrlrefMp5profileView.index();

    /**
     * This is the default constructor (do not remove).
     */
    public CycleCountPartsMainRowImpl() {
    }

    /**
     * Gets MrltCyclecountparts entity object.
     * @return the MrltCyclecountparts
     */
    public ExtendedEntityImpl getMrltCyclecountparts() {
        return (ExtendedEntityImpl)getEntity(ENTITY_MRLTCYCLECOUNTPARTS);
    }

    /**
     * Gets the attribute value for CCPID using the alias name Ccpid.
     * @return the CCPID
     */
    public Number getCcpid() {
        return (Number) getAttributeInternal(CCPID);
    }

    /**
     * Sets <code>value</code> as attribute value for CCPID using the alias name Ccpid.
     * @param value value to set the CCPID
     */
    public void setCcpid(Number value) {
        setAttributeInternal(CCPID, value);
    }

    /**
     * Gets the attribute value for STL_BIN using the alias name StlBin.
     * @return the STL_BIN
     */
    public String getStlBin() {
        return (String) getAttributeInternal(STLBIN);
    }

    /**
     * Sets <code>value</code> as attribute value for STL_BIN using the alias name StlBin.
     * @param value value to set the STL_BIN
     */
    public void setStlBin(String value) {
        setAttributeInternal(STLBIN, value);
    }

    /**
     * Gets the attribute value for STL_EXPQTY using the alias name StlExpqty.
     * @return the STL_EXPQTY
     */
    public Number getStlExpqty() {
        return (Number) getAttributeInternal(STLEXPQTY);
    }

    /**
     * Sets <code>value</code> as attribute value for STL_EXPQTY using the alias name StlExpqty.
     * @param value value to set the STL_EXPQTY
     */
    public void setStlExpqty(Number value) {
        setAttributeInternal(STLEXPQTY, value);
    }

    /**
     * Gets the attribute value for STL_LISTID using the alias name StlListid.
     * @return the STL_LISTID
     */
    public Integer getStlListid() {
        return (Integer) getAttributeInternal(STLLISTID);
    }

    /**
     * Sets <code>value</code> as attribute value for STL_LISTID using the alias name StlListid.
     * @param value value to set the STL_LISTID
     */
    public void setStlListid(Integer value) {
        setAttributeInternal(STLLISTID, value);
    }

    /**
     * Gets the attribute value for STL_LOT using the alias name StlLot.
     * @return the STL_LOT
     */
    public String getStlLot() {
        return (String) getAttributeInternal(STLLOT);
    }

    /**
     * Sets <code>value</code> as attribute value for STL_LOT using the alias name StlLot.
     * @param value value to set the STL_LOT
     */
    public void setStlLot(String value) {
        setAttributeInternal(STLLOT, value);
    }

    /**
     * Gets the attribute value for STL_PART using the alias name StlPart.
     * @return the STL_PART
     */
    public String getStlPart() {
        return (String) getAttributeInternal(STLPART);
    }

    /**
     * Sets <code>value</code> as attribute value for STL_PART using the alias name StlPart.
     * @param value value to set the STL_PART
     */
    public void setStlPart(String value) {
        setAttributeInternal(STLPART, value);
    }

    /**
     * Gets the attribute value for STL_PART_ORG using the alias name StlPartOrg.
     * @return the STL_PART_ORG
     */
    public String getStlPartOrg() {
        return (String) getAttributeInternal(STLPARTORG);
    }

    /**
     * Sets <code>value</code> as attribute value for STL_PART_ORG using the alias name StlPartOrg.
     * @param value value to set the STL_PART_ORG
     */
    public void setStlPartOrg(String value) {
        setAttributeInternal(STLPARTORG, value);
    }

    /**
     * Gets the attribute value for STL_PARTCLASS using the alias name StlPartclass.
     * @return the STL_PARTCLASS
     */
    public String getStlPartclass() {
        return (String) getAttributeInternal(STLPARTCLASS);
    }

    /**
     * Sets <code>value</code> as attribute value for STL_PARTCLASS using the alias name StlPartclass.
     * @param value value to set the STL_PARTCLASS
     */
    public void setStlPartclass(String value) {
        setAttributeInternal(STLPARTCLASS, value);
    }

    /**
     * Gets the attribute value for STL_PHYQTY using the alias name StlPhyqty.
     * @return the STL_PHYQTY
     */
    public Number getStlPhyqty() {
        return (Number) getAttributeInternal(STLPHYQTY);
    }

    /**
     * Sets <code>value</code> as attribute value for STL_PHYQTY using the alias name StlPhyqty.
     * @param value value to set the STL_PHYQTY
     */
    public void setStlPhyqty(Number value) {
        setAttributeInternal(STLPHYQTY, value);
    }

    /**
     * Gets the attribute value for STL_STORE using the alias name StlStore.
     * @return the STL_STORE
     */
    public String getStlStore() {
        return (String) getAttributeInternal(STLSTORE);
    }

    /**
     * Sets <code>value</code> as attribute value for STL_STORE using the alias name StlStore.
     * @param value value to set the STL_STORE
     */
    public void setStlStore(String value) {
        setAttributeInternal(STLSTORE, value);
    }

    /**
     * Gets the attribute value for STL_TIMESTAMP using the alias name StlTimestamp.
     * @return the STL_TIMESTAMP
     */
    public Timestamp getStlTimestamp() {
        return (Timestamp) getAttributeInternal(STLTIMESTAMP);
    }

    /**
     * Sets <code>value</code> as attribute value for STL_TIMESTAMP using the alias name StlTimestamp.
     * @param value value to set the STL_TIMESTAMP
     */
    public void setStlTimestamp(Timestamp value) {
        setAttributeInternal(STLTIMESTAMP, value);
    }

    /**
     * Gets the attribute value for STL_TRANS using the alias name StlTrans.
     * @return the STL_TRANS
     */
    public String getStlTrans() {
        return (String) getAttributeInternal(STLTRANS);
    }

    /**
     * Sets <code>value</code> as attribute value for STL_TRANS using the alias name StlTrans.
     * @param value value to set the STL_TRANS
     */
    public void setStlTrans(String value) {
        setAttributeInternal(STLTRANS, value);
    }

    /**
     * Gets the attribute value for STL_TYPE using the alias name StlType.
     * @return the STL_TYPE
     */
    public String getStlType() {
        return (String) getAttributeInternal(STLTYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for STL_TYPE using the alias name StlType.
     * @param value value to set the STL_TYPE
     */
    public void setStlType(String value) {
        setAttributeInternal(STLTYPE, value);
    }

    /**
     * Gets the attribute value for SELECTED using the alias name Selected.
     * @return the SELECTED
     */
    public Boolean getSelected() {
        return (Boolean) getAttributeInternal(SELECTED);
    }

    /**
     * Sets <code>value</code> as attribute value for SELECTED using the alias name Selected.
     * @param value value to set the SELECTED
     */
    public void setSelected(Boolean value) {
        setAttributeInternal(SELECTED, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> MrlrefMp5profileView.
     */
    public RowSet getMrlrefMp5profileView() {
        return (RowSet)getAttributeInternal(MRLREFMP5PROFILEVIEW);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
