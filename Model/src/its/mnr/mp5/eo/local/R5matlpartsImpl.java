package its.mnr.mp5.eo.local;

import its.mnr.mp5.baseclass.ExtendedEntityImpl;
import its.mnr.mp5.model.Util;
import its.mnr.mp5.baseclass.ExtendedViewRowImpl;
import its.mnr.mp5.vo.workorder.TransactionsRowImpl;
import its.mnr.mp5.vo.workorder.TranslinesRowImpl;

import its.mnr.mp5.vo.admin.MrlrefMp5profileViewImpl;

import its.mnr.mp5.vo.admin.MrltAccountmasterViewImpl;

import its.mnr.mp5.vo.parts.PartsBinstockViewImpl;
import its.mnr.mp5.vo.workorder.TransactionsImpl;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import oracle.adf.share.ADFContext;
import oracle.jbo.ApplicationModule;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.VariableValueManager;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.DBTransaction;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Jun 05 15:22:24 PDT 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class R5matlpartsImpl extends ExtendedEntityImpl {
    public static int VARCHAR2 = Types.VARCHAR;
    
    /* Helper methods */    
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }

    //Business Rules

    public Boolean createTranlines(Number difQty) {
        //System.out.println("createTranlines(): " +difQty);
        String actEvtCd = (String)getActivityEvent();
        String traorg = getMlpPartOrg();
        //get Current User from ApplicationModule
        //AppModuleImpl am = (AppModuleImpl)this.getDBTransaction().findApplicationModule("AppModule");
        String traauth = ADFContext.getCurrent().getSecurityContext().getUserName().toUpperCase(); //am.getCurrentUser();
        //get BisStore value
        //R5binstockImpl bsimp = (R5binstockImpl)getR5binstock();
        String trafromcode = "01"; //bsimp.getBisStore();
        String trlpart = getMlpPart();
        String trlbin = getItsBin(); // bsimp.getBisBin();
        String trllot = getItsLot(); //bsimp.getBisLot();
       // System.out.println("trlbin: " +trlbin);
      //  System.out.println("trllot: " +trllot);
        Number trlqty = difQty;
        String trlact = getAct();
        String trlstore = trafromcode;
        String trlevent = actEvtCd;
        String trlcostcode = (String)getActivityAccountCd();
        Double trlprice = getMlpActualUnitcost();
        String trltype = "I";
        String trlrtype = "I";
        Integer trlmlpline = getMlpLine();
        Integer trlio = -1;
        String trlpartorg = traorg;
        Boolean ret = false;
        String tranCreatedChk = "FAIL";

        //check if Transaction(R5Transactions) record is created
        tranCreatedChk = createWOTrans(actEvtCd, traauth, traorg);
        //System.out.println("tranCreatedChk:" + tranCreatedChk);
        
        if (tranCreatedChk.equals("PASS")) {
       //     System.out.println("tranCreatedChk is TRUE");
            DBTransaction trans = getDBTransaction();
            RowSet traRS = this.getTransactions();
            TransactionsImpl traImpl = (TransactionsImpl)traRS.getViewObject();
            ViewCriteria vc = traImpl.getViewCriteria("R5transactionsByTraCode");
            //vc.resetCriteria();
            traImpl.settraToCodeBind(actEvtCd);
            traImpl.applyViewCriteria(vc);
            // set range size to 1 since we expect a single record
            traImpl.setRangeSize(1);
            // execute query to make sure we get latest data!
            traImpl.executeQuery();
            Row rw = traImpl.first();
            // if(traFound != null && traFound.length > 0){
            if (rw != null) {
                //TransactionsRowImpl impltra = (TransactionsRowImpl)traFound[0];
                TransactionsRowImpl impltra = (TransactionsRowImpl)rw;
                //System.out.println("impltra2.getAttribute(\"TraTocode\"):" + impltra.getAttribute("TraTocode")
                //                + "; " +impltra.getAttribute("TraCode"));
                //System.out.println("Creating new Transline");
                
              
                RowIterator itertrl = impltra.getTranslines();
                TranslinesRowImpl rowtrl = (TranslinesRowImpl)itertrl.createRow();
                itertrl.insertRow(rowtrl);
                //System.out.println("createRow()");
                
                Number ntrlacd = getValueFromSequence("S5ACCOUNTDETAIL", trans); 
                
                rowtrl.setAttribute("TrlPart", trlpart);
                rowtrl.setAttribute("TrlPartOrg", trlpartorg);
                rowtrl.setAttribute("TrlBin", trlbin);
                rowtrl.setAttribute("TrlDate", new Timestamp(new java.sql.Timestamp(System.currentTimeMillis())));
                rowtrl.setAttribute("TrlLot", trllot);
                rowtrl.setAttribute("TrlQty", trlqty);
                rowtrl.setAttribute("TrlAct", trlact);
                rowtrl.setAttribute("TrlMlpline", trlmlpline);
                rowtrl.setAttribute("TrlStore", trlstore);
                rowtrl.setAttribute("TrlEvent", trlevent);
                rowtrl.setAttribute("TrlCostcode", trlcostcode);
                rowtrl.setAttribute("TrlPrice", trlprice);
                rowtrl.setAttribute("TrlRtype", trlrtype);
                rowtrl.setAttribute("TrlType", trltype);
                rowtrl.setAttribute("TrlIo", trlio);
                rowtrl.setAttribute("TrlAcd", ntrlacd);

                ret = true;
            } else if (rw == null){
                    //System.out.println("transaction not found");
                }
        }
        return ret;
    }
    public String createWOTrans(String pEvtCode, String pUser, String pOrg) {
             //System.out.println("inside createWOTrans function: " + pEvtCode + ", " +pUser+ ", " +pOrg);
             
             String ret = (String)callStoredFunction(VARCHAR2, "mnrpkg.createWOTrans(?,?,?)",
                                               new Object[] {pEvtCode,pUser,pOrg});
             //System.out.println("createWOTrans Ret = " + ret);
             return ret;
         }
    

    public static Number getValueFromSequence(String sequenceName, DBTransaction trans){
        SequenceImpl s = new SequenceImpl(sequenceName, trans);
        return s.getSequenceNumber();
        }
    
    /**
     * BR: When Part Qty changes, automatically update stock levels in R5Binstock
     */
    public Boolean updateStock(String crud) {
        //System.out.println("updateStock(): " +crud);
        Number oldQty = (Number)getPostedAttribute(MLPQTY);
        Number newQty = getMlpQty();
        Number difQty = new oracle.jbo.domain.Number(0);
        Number navail;
        Number nnewavail;
        Boolean updchk = false;

        if (crud.equals("CR")) {
            oldQty = new oracle.jbo.domain.Number(0);
            //System.out.println("CR");
        }

        if (crud.equals("U")) {
            //System.out.println("U");
            //Do something here
        }
        if (crud.equals("D")) {
            newQty = new oracle.jbo.domain.Number(0);
            //System.out.println("D");
        }

        difQty = newQty.subtract(oldQty);
        //System.out.println("difQty: " + difQty);
        //System.out.println("oldQty: " + oldQty);
        //System.out.println("newQty: " + newQty);
        //get current Stock available
        //R5binstockImpl impl = (R5binstockImpl)this.getR5binstock();
        navail = (getAvailable() == null? new oracle.jbo.domain.Number(0) : getAvailable());
        
        //System.out.println("navail: " + navail);
        //if (newQty.compareTo(navail) <= 0) {
        if (difQty.compareTo(navail) <= 0) {
            //new Qty is less than or equal to stock
            nnewavail = navail.subtract(difQty);
            //System.out.println("nnewavail: " + nnewavail);
            //System.out.println("nnewavail.compareTo(0) <= 0:" + nnewavail.compareTo(0));
            //if (difQty.compareTo(nnewavail) <= 0) {
            //if (nnewavail.compareTo(0) <= 0) {
                //Qty change is less than or equal to stock. Update R5Binstock Qty and R5Matlparts Available.
                //System.out.println("difQty.compareTo(nnewavail) <= 0");
                // No  need to update. R5Translines trigger already updates BisQty.
                //impl.setBisQty(nnewavail);
                if (!crud.equals("D")) {
                    this.setAvailable(nnewavail);
                    //updchk = true;
                }
                //System.out.println("Update Stock Qty to " + nnewavail);
                updchk = true;
            //} else {
                // New Qty difference is more than available in stock
                //System.out.println("New Qty difference is more than available in stock" );
           //     updchk = false;
            //}
        } else {
            // New Qty is more than available in stock
            //System.out.println("New Qty is more than available in stock" );
            updchk = false;
        }
        //System.out.println("b4 call to createTransaction" );
        //create tansaction log. Param: Part change
        if (updchk.equals(true)) {
            //System.out.println("updchk 1: " + updchk);
            Boolean ret = createTranlines(difQty);
            if (ret.equals(true)) {
                return ret;
            }
        } else {
            //System.out.println("updchk 2: " + updchk);
            return false;
        }
        //System.out.println("final return");
        return false;
    }
    

    /**
     * BR: Auto-calculate Part Tax
     */
    public void calculatePartTax() {
        //System.out.println("inside calculatePartTax()");
        String isCharged;
        Double sMarkup;
        Double sTaxPer = null;
        Double sTaxAmt = null;
        Double sbillablecst = null;

        isCharged = this.isPartTaxCharged();

        Double sactualcst = getMlpActualUnitcost();
        //System.out.println("sactualcst: " + sactualcst);

        //set billable unit cost
        if (sactualcst != null ) {
            //System.out.println("sactualcst not null ");
            sbillablecst = sactualcst;
            sbillablecst = Util.roundToHundredth(sbillablecst);
            if (sbillablecst != null) {
                //set billable unit cost
                //this.setMlpBillableUnitcost(sbillablecst);
                //System.out.println("sbillablecst: " + sbillablecst);
                // if part tax is charged for account
                if (isCharged.equals("Y")) {
                    sMarkup = this.getMarkup();
                   //System.out.println("sMarkup: " + sMarkup);
                    //get tax percent for part
                    sTaxPer = getPartTaxPercent();
                    //System.out.println("sTaxPer: " + sTaxPer);
                    if (sTaxPer != null && sMarkup != null) {
                        sbillablecst = sactualcst * ((sMarkup / 100) + 1);
                        sbillablecst = Util.roundToHundredth(sbillablecst);
                        sTaxAmt = sbillablecst * (sTaxPer / 100);
                        sTaxAmt = Util.roundToHundredth(sTaxAmt);
                        //System.out.println("sTaxAmt: " + sTaxAmt);
                        //this.setItsTaxper(sTaxPer);
                        //this.setItsPartaxamt(sTaxAmt);
                    }
                }
            }
        }
        //set Billable Unit Cost, Tax Percent and Part Tax Amount
                
        this.setMlpBillableUnitcost(sbillablecst);
        this.setItsTaxper(sTaxPer);
        this.setItsPartaxamt(sTaxAmt);
        //update Billable Part Cost for Activity
        //setBillablePartCost();
    }
    public Double getPartTaxPercent() {
        //System.out.println("inside getPartTaxPercent()");
        Double taxpct;
        Date startdt;
        String ptaxcd;

        taxpct = null;

        //get activity start date
        startdt = (Date)getActivityStartDt();

        //get Part Tax Code
        ptaxcd = (String)getPartTaxCd();

        //get Tax percent
        if (startdt != null && ptaxcd != null) {
            //System.out.println("get Tax percent not null");
            //get tax rate percent
            RowSet trs = (RowSet)this.getTaxRateValues();
            VariableValueManager tmanager = trs.getViewObject().ensureVariableManager();
            tmanager.setVariableValue("startdtBind", startdt);
            tmanager.setVariableValue("taxcdBind", ptaxcd);
            // set range size to 1 since we expect a single record
            trs.setRangeSize(1);
            // execute query to make sure we get latest data!
            trs.executeQuery();
            Row trow = trs.first();
            if (trow != null)
                taxpct = (Double)trow.getAttribute("TxvPercent");
            //System.out.println("taxpct: " + taxpct);
            return taxpct;
        }
        return null;
    } 
    public Double getMarkup() {
        //System.out.println("inside getMarkup");
        String sprofile = "StockMarkupChargePercent";
        String smarkup;
        Double dmarkup;

        //set and execute View Criteria
        RowSet rs = this.getMrlrefMp5profileView1();
        MrlrefMp5profileViewImpl impl = (MrlrefMp5profileViewImpl)rs.getViewObject();
        ViewCriteria vc = impl.getViewCriteria("MP5ProfileByProfile");
        vc.resetCriteria();
        impl.setprofileBind(sprofile);
        impl.applyViewCriteria(vc);
        // set range size to 1 since we expect a single record
        impl.setRangeSize(1);
        // execute query to make sure we get latest data!
        impl.executeQuery();
        Row rw = impl.first();
        if (rw != null) {
            smarkup = (String)rw.getAttribute("Value");
            //convert String to Double
            dmarkup = Double.valueOf(smarkup);
            //System.out.println("dmarkup: " + dmarkup);
            return dmarkup;
        }
        return null;
    }

    public String isPartTaxCharged() {
        //System.out.println("inside isPartTaxCharged");
        String sAcctNum;
        String schgPartTax = "N";
        //get Activity Account Code
        sAcctNum = (String)this.getActivityAccountCd();

        if (sAcctNum != null) {
            //System.out.println("sAcctNum not null");
            //set and execute View Criteria
            RowSet rs = getMrltAccountmasterView1();
            MrltAccountmasterViewImpl impl = (MrltAccountmasterViewImpl)rs.getViewObject();
            ViewCriteria vc = impl.getViewCriteria("AllAccountsByAcctCd");
            vc.resetCriteria();
            impl.setActNumBind(sAcctNum);
            impl.applyViewCriteria(vc);
            // set range size to 1 since we expect a single record
            impl.setRangeSize(1);
            // execute query to make sure we get latest data!
            impl.executeQuery();
            Row rw = impl.first();
            if (rw != null) {
                schgPartTax = (String)rw.getAttribute("Parttax");
                //System.out.println("schgPartTax: " + schgPartTax);
                return schgPartTax;
            }
        }
        return schgPartTax;
    }

    public Object getActivityAccountCd() {
        String sactcd;

        //get activity start date
        R5activitiesImpl impl = this.getR5activities();
        sactcd = impl.getActAccountcode();
        //System.out.println("ActAccountcode: " + sactcd);
        return sactcd;
    }

    public Object getActivityEvent() {
        String sactevnt;

        //get activity start date
        R5activitiesImpl impl = this.getR5activities();
        sactevnt = impl.getActEvent();
        //System.out.println("ActEvent: " + sactevnt);
        return sactevnt;
    }

    public Object getActivityStartDt() {
        Date sstartdt;

        //get activity start date
        R5activitiesImpl impl = this.getR5activities();
        sstartdt = impl.getActStart();
        //System.out.println("ActStart: " + sstartdt);
        return sstartdt;
    }

    public Object getPartTaxCd() {
        String sptaxcd;

        //get Part Tax Code
        R5partsImpl impl = (R5partsImpl)this.getR5parts();
        sptaxcd = impl.getParTax();
        //System.out.println("ParTax: " + sptaxcd);
        return sptaxcd;

    }
    

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
     protected void doDML(int operation, TransactionEvent e) {
         //System.out.println("inside MATLPARTS:doDML");
         /**
          * Business Rule calls
          */
         //calculate Part Tax
         if (operation == DML_INSERT ||
             (operation == DML_UPDATE && (isAttributeChanged(MLPPART) || isAttributeChanged(MLPQTY)))) {
             //System.out.println("calling calculatePartTax()");
             calculatePartTax();
         }
         //update Stock Qty
         if (operation == DML_INSERT) {
             //System.out.println("calling updateStock(CR)");
             Boolean result = updateStock("CR");
             //System.out.println(result);
         } else if (operation == DML_UPDATE && isAttributeChanged(MLPQTY)) {
             //System.out.println("calling updateStock(U)");
             Boolean result = updateStock("U");
             //System.out.println(result);
         } else if (operation == DML_DELETE) {
             //System.out.println("calling updateStock(D)");
             Boolean result = updateStock("D");
             //System.out.println(result);
         }

         super.doDML(operation, e);
     }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        MlpMatlist {
            public Object get(R5matlpartsImpl obj) {
                return obj.getMlpMatlist();
            }

            public void put(R5matlpartsImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        MlpLine {
            public Object get(R5matlpartsImpl obj) {
                return obj.getMlpLine();
            }

            public void put(R5matlpartsImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        MlpPart {
            public Object get(R5matlpartsImpl obj) {
                return obj.getMlpPart();
            }

            public void put(R5matlpartsImpl obj, Object value) {
                obj.setMlpPart((String)value);
            }
        }
        ,
        MlpQty {
            public Object get(R5matlpartsImpl obj) {
                return obj.getMlpQty();
            }

            public void put(R5matlpartsImpl obj, Object value) {
                obj.setMlpQty((Number)value);
            }
        }
        ,
        MlpUom {
            public Object get(R5matlpartsImpl obj) {
                return obj.getMlpUom();
            }

            public void put(R5matlpartsImpl obj, Object value) {
                obj.setMlpUom((String)value);
            }
        }
        ,
        MlpReserv {
            public Object get(R5matlpartsImpl obj) {
                return obj.getMlpReserv();
            }

            public void put(R5matlpartsImpl obj, Object value) {
                obj.setMlpReserv((String)value);
            }
        }
        ,
        MlpCrit {
            public Object get(R5matlpartsImpl obj) {
                return obj.getMlpCrit();
            }

            public void put(R5matlpartsImpl obj, Object value) {
                obj.setMlpCrit((String)value);
            }
        }
        ,
        MlpObtype {
            public Object get(R5matlpartsImpl obj) {
                return obj.getMlpObtype();
            }

            public void put(R5matlpartsImpl obj, Object value) {
                obj.setMlpObtype((String)value);
            }
        }
        ,
        MlpObrtype {
            public Object get(R5matlpartsImpl obj) {
                return obj.getMlpObrtype();
            }

            public void put(R5matlpartsImpl obj, Object value) {
                obj.setMlpObrtype((String)value);
            }
        }
        ,
        MlpCode {
            public Object get(R5matlpartsImpl obj) {
                return obj.getMlpCode();
            }

            public void put(R5matlpartsImpl obj, Object value) {
                obj.setMlpCode((String)value);
            }
        }
        ,
        MlpDirect {
            public Object get(R5matlpartsImpl obj) {
                return obj.getMlpDirect();
            }

            public void put(R5matlpartsImpl obj, Object value) {
                obj.setMlpDirect((String)value);
            }
        }
        ,
        MlpReq {
            public Object get(R5matlpartsImpl obj) {
                return obj.getMlpReq();
            }

            public void put(R5matlpartsImpl obj, Object value) {
                obj.setMlpReq((String)value);
            }
        }
        ,
        MlpMatlrev {
            public Object get(R5matlpartsImpl obj) {
                return obj.getMlpMatlrev();
            }

            public void put(R5matlpartsImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        MlpCodeOrg {
            public Object get(R5matlpartsImpl obj) {
                return obj.getMlpCodeOrg();
            }

            public void put(R5matlpartsImpl obj, Object value) {
                obj.setMlpCodeOrg((String)value);
            }
        }
        ,
        MlpPartOrg {
            public Object get(R5matlpartsImpl obj) {
                return obj.getMlpPartOrg();
            }

            public void put(R5matlpartsImpl obj, Object value) {
                obj.setMlpPartOrg((String)value);
            }
        }
        ,
        MlpActualUnitcost {
            public Object get(R5matlpartsImpl obj) {
                return obj.getMlpActualUnitcost();
            }

            public void put(R5matlpartsImpl obj, Object value) {
                obj.setMlpActualUnitcost((Double)value);
            }
        }
        ,
        MlpBillableUnitcost {
            public Object get(R5matlpartsImpl obj) {
                return obj.getMlpBillableUnitcost();
            }

            public void put(R5matlpartsImpl obj, Object value) {
                obj.setMlpBillableUnitcost((Double)value);
            }
        }
        ,
        MlpBarcode {
            public Object get(R5matlpartsImpl obj) {
                return obj.getMlpBarcode();
            }

            public void put(R5matlpartsImpl obj, Object value) {
                obj.setMlpBarcode((String)value);
            }
        }
        ,
        ItsTaxper {
            public Object get(R5matlpartsImpl obj) {
                return obj.getItsTaxper();
            }

            public void put(R5matlpartsImpl obj, Object value) {
                obj.setItsTaxper((Double)value);
            }
        }
        ,
        ItsPartaxamt {
            public Object get(R5matlpartsImpl obj) {
                return obj.getItsPartaxamt();
            }

            public void put(R5matlpartsImpl obj, Object value) {
                obj.setItsPartaxamt((Double)value);
            }
        }
        ,
        Act {
            public Object get(R5matlpartsImpl obj) {
                return obj.getAct();
            }

            public void put(R5matlpartsImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        PartDesc {
            public Object get(R5matlpartsImpl obj) {
                return obj.getPartDesc();
            }

            public void put(R5matlpartsImpl obj, Object value) {
                obj.setPartDesc((String)value);
            }
        }
        ,
        PartUOM {
            public Object get(R5matlpartsImpl obj) {
                return obj.getPartUOM();
            }

            public void put(R5matlpartsImpl obj, Object value) {
                obj.setPartUOM((String)value);
            }
        }
        ,
        Available {
            public Object get(R5matlpartsImpl obj) {
                return obj.getAvailable();
            }

            public void put(R5matlpartsImpl obj, Object value) {
                obj.setAvailable((Number)value);
            }
        }
        ,
        ItsBin {
            public Object get(R5matlpartsImpl obj) {
                return obj.getItsBin();
            }

            public void put(R5matlpartsImpl obj, Object value) {
                obj.setItsBin((String)value);
            }
        }
        ,
        ItsLot {
            public Object get(R5matlpartsImpl obj) {
                return obj.getItsLot();
            }

            public void put(R5matlpartsImpl obj, Object value) {
                obj.setItsLot((String)value);
            }
        }
        ,
        DBQty {
            public Object get(R5matlpartsImpl obj) {
                return obj.getDBQty();
            }

            public void put(R5matlpartsImpl obj, Object value) {
                obj.setDBQty((Number)value);
            }
        }
        ,
        R5matlists {
            public Object get(R5matlpartsImpl obj) {
                return obj.getR5matlists();
            }

            public void put(R5matlpartsImpl obj, Object value) {
                obj.setR5matlists((ExtendedEntityImpl)value);
            }
        }
        ,
        R5objects {
            public Object get(R5matlpartsImpl obj) {
                return obj.getR5objects();
            }

            public void put(R5matlpartsImpl obj, Object value) {
                obj.setR5objects((ExtendedEntityImpl)value);
            }
        }
        ,
        R5parts {
            public Object get(R5matlpartsImpl obj) {
                return obj.getR5parts();
            }

            public void put(R5matlpartsImpl obj, Object value) {
                obj.setR5parts((R5partsImpl)value);
            }
        }
        ,
        R5binstock {
            public Object get(R5matlpartsImpl obj) {
                return obj.getR5binstock();
            }

            public void put(R5matlpartsImpl obj, Object value) {
                obj.setR5binstock((R5binstockImpl)value);
            }
        }
        ,
        R5activities {
            public Object get(R5matlpartsImpl obj) {
                return obj.getR5activities();
            }

            public void put(R5matlpartsImpl obj, Object value) {
                obj.setR5activities((R5activitiesImpl)value);
            }
        }
        ,
        R5uoms {
            public Object get(R5matlpartsImpl obj) {
                return obj.getR5uoms();
            }

            public void put(R5matlpartsImpl obj, Object value) {
                obj.setR5uoms((ExtendedEntityImpl)value);
            }
        }
        ,
        MrlrefMp5profileView1 {
            public Object get(R5matlpartsImpl obj) {
                return obj.getMrlrefMp5profileView1();
            }

            public void put(R5matlpartsImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        MrltAccountmasterView1 {
            public Object get(R5matlpartsImpl obj) {
                return obj.getMrltAccountmasterView1();
            }

            public void put(R5matlpartsImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Transactions {
            public Object get(R5matlpartsImpl obj) {
                return obj.getTransactions();
            }

            public void put(R5matlpartsImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        TaxRateValues {
            public Object get(R5matlpartsImpl obj) {
                return obj.getTaxRateValues();
            }

            public void put(R5matlpartsImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        PartsBinstockView {
            public Object get(R5matlpartsImpl obj) {
                return obj.getPartsBinstockView();
            }

            public void put(R5matlpartsImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(R5matlpartsImpl object);

        public abstract void put(R5matlpartsImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int MLPMATLIST = AttributesEnum.MlpMatlist.index();
    public static final int MLPLINE = AttributesEnum.MlpLine.index();
    public static final int MLPPART = AttributesEnum.MlpPart.index();
    public static final int MLPQTY = AttributesEnum.MlpQty.index();
    public static final int MLPUOM = AttributesEnum.MlpUom.index();
    public static final int MLPRESERV = AttributesEnum.MlpReserv.index();
    public static final int MLPCRIT = AttributesEnum.MlpCrit.index();
    public static final int MLPOBTYPE = AttributesEnum.MlpObtype.index();
    public static final int MLPOBRTYPE = AttributesEnum.MlpObrtype.index();
    public static final int MLPCODE = AttributesEnum.MlpCode.index();
    public static final int MLPDIRECT = AttributesEnum.MlpDirect.index();
    public static final int MLPREQ = AttributesEnum.MlpReq.index();
    public static final int MLPMATLREV = AttributesEnum.MlpMatlrev.index();
    public static final int MLPCODEORG = AttributesEnum.MlpCodeOrg.index();
    public static final int MLPPARTORG = AttributesEnum.MlpPartOrg.index();
    public static final int MLPACTUALUNITCOST = AttributesEnum.MlpActualUnitcost.index();
    public static final int MLPBILLABLEUNITCOST = AttributesEnum.MlpBillableUnitcost.index();
    public static final int MLPBARCODE = AttributesEnum.MlpBarcode.index();
    public static final int ITSTAXPER = AttributesEnum.ItsTaxper.index();
    public static final int ITSPARTAXAMT = AttributesEnum.ItsPartaxamt.index();
    public static final int ACT = AttributesEnum.Act.index();
    public static final int PARTDESC = AttributesEnum.PartDesc.index();
    public static final int PARTUOM = AttributesEnum.PartUOM.index();
    public static final int AVAILABLE = AttributesEnum.Available.index();
    public static final int ITSBIN = AttributesEnum.ItsBin.index();
    public static final int ITSLOT = AttributesEnum.ItsLot.index();
    public static final int DBQTY = AttributesEnum.DBQty.index();
    public static final int R5MATLISTS = AttributesEnum.R5matlists.index();
    public static final int R5OBJECTS = AttributesEnum.R5objects.index();
    public static final int R5PARTS = AttributesEnum.R5parts.index();
    public static final int R5BINSTOCK = AttributesEnum.R5binstock.index();
    public static final int R5ACTIVITIES = AttributesEnum.R5activities.index();
    public static final int R5UOMS = AttributesEnum.R5uoms.index();
    public static final int MRLREFMP5PROFILEVIEW1 = AttributesEnum.MrlrefMp5profileView1.index();
    public static final int MRLTACCOUNTMASTERVIEW1 = AttributesEnum.MrltAccountmasterView1.index();
    public static final int TRANSACTIONS = AttributesEnum.Transactions.index();
    public static final int TAXRATEVALUES = AttributesEnum.TaxRateValues.index();
    public static final int PARTSBINSTOCKVIEW = AttributesEnum.PartsBinstockView.index();

    /**
     * This is the default constructor (do not remove).
     */
    public R5matlpartsImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("its.mnr.mp5.eo.local.R5matlparts");
    }

    /**
     * Gets the attribute value for MlpMatlist, using the alias name MlpMatlist.
     * @return the value of MlpMatlist
     */
    public String getMlpMatlist() {
        return (String)getAttributeInternal(MLPMATLIST);
    }


    /**
     * Gets the attribute value for MlpLine, using the alias name MlpLine.
     * @return the value of MlpLine
     */
    public Integer getMlpLine() {
        return (Integer)getAttributeInternal(MLPLINE);
    }


    /**
     * Gets the attribute value for MlpPart, using the alias name MlpPart.
     * @return the value of MlpPart
     */
    public String getMlpPart() {
        return (String)getAttributeInternal(MLPPART);
    }

    /**
     * Sets <code>value</code> as the attribute value for MlpPart.
     * @param value value to set the MlpPart
     */
    public void setMlpPart(String value) {
        setAttributeInternal(MLPPART, value);
    }

    /**
     * Gets the attribute value for MlpQty, using the alias name MlpQty.
     * @return the value of MlpQty
     */
    public Number getMlpQty() {
        return (Number)getAttributeInternal(MLPQTY);
    }

    /**
     * Sets <code>value</code> as the attribute value for MlpQty.
     * @param value value to set the MlpQty
     */
    public void setMlpQty(Number value) {
        setAttributeInternal(MLPQTY, value);
    }

    /**
     * Gets the attribute value for MlpUom, using the alias name MlpUom.
     * @return the value of MlpUom
     */
    public String getMlpUom() {
        return (String)getAttributeInternal(MLPUOM);
    }

    /**
     * Sets <code>value</code> as the attribute value for MlpUom.
     * @param value value to set the MlpUom
     */
    public void setMlpUom(String value) {
        setAttributeInternal(MLPUOM, value);
    }

    /**
     * Gets the attribute value for MlpReserv, using the alias name MlpReserv.
     * @return the value of MlpReserv
     */
    public String getMlpReserv() {
        return (String)getAttributeInternal(MLPRESERV);
    }

    /**
     * Sets <code>value</code> as the attribute value for MlpReserv.
     * @param value value to set the MlpReserv
     */
    public void setMlpReserv(String value) {
        setAttributeInternal(MLPRESERV, value);
    }

    /**
     * Gets the attribute value for MlpCrit, using the alias name MlpCrit.
     * @return the value of MlpCrit
     */
    public String getMlpCrit() {
        return (String)getAttributeInternal(MLPCRIT);
    }

    /**
     * Sets <code>value</code> as the attribute value for MlpCrit.
     * @param value value to set the MlpCrit
     */
    public void setMlpCrit(String value) {
        setAttributeInternal(MLPCRIT, value);
    }

    /**
     * Gets the attribute value for MlpObtype, using the alias name MlpObtype.
     * @return the value of MlpObtype
     */
    public String getMlpObtype() {
        return (String)getAttributeInternal(MLPOBTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for MlpObtype.
     * @param value value to set the MlpObtype
     */
    public void setMlpObtype(String value) {
        setAttributeInternal(MLPOBTYPE, value);
    }

    /**
     * Gets the attribute value for MlpObrtype, using the alias name MlpObrtype.
     * @return the value of MlpObrtype
     */
    public String getMlpObrtype() {
        return (String)getAttributeInternal(MLPOBRTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for MlpObrtype.
     * @param value value to set the MlpObrtype
     */
    public void setMlpObrtype(String value) {
        setAttributeInternal(MLPOBRTYPE, value);
    }

    /**
     * Gets the attribute value for MlpCode, using the alias name MlpCode.
     * @return the value of MlpCode
     */
    public String getMlpCode() {
        return (String)getAttributeInternal(MLPCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for MlpCode.
     * @param value value to set the MlpCode
     */
    public void setMlpCode(String value) {
        setAttributeInternal(MLPCODE, value);
    }

    /**
     * Gets the attribute value for MlpDirect, using the alias name MlpDirect.
     * @return the value of MlpDirect
     */
    public String getMlpDirect() {
        return (String)getAttributeInternal(MLPDIRECT);
    }

    /**
     * Sets <code>value</code> as the attribute value for MlpDirect.
     * @param value value to set the MlpDirect
     */
    public void setMlpDirect(String value) {
        setAttributeInternal(MLPDIRECT, value);
    }

    /**
     * Gets the attribute value for MlpReq, using the alias name MlpReq.
     * @return the value of MlpReq
     */
    public String getMlpReq() {
        return (String)getAttributeInternal(MLPREQ);
    }

    /**
     * Sets <code>value</code> as the attribute value for MlpReq.
     * @param value value to set the MlpReq
     */
    public void setMlpReq(String value) {
        setAttributeInternal(MLPREQ, value);
    }

    /**
     * Gets the attribute value for MlpMatlrev, using the alias name MlpMatlrev.
     * @return the value of MlpMatlrev
     */
    public Integer getMlpMatlrev() {
        return (Integer)getAttributeInternal(MLPMATLREV);
    }


    /**
     * Gets the attribute value for MlpCodeOrg, using the alias name MlpCodeOrg.
     * @return the value of MlpCodeOrg
     */
    public String getMlpCodeOrg() {
        return (String)getAttributeInternal(MLPCODEORG);
    }

    /**
     * Sets <code>value</code> as the attribute value for MlpCodeOrg.
     * @param value value to set the MlpCodeOrg
     */
    public void setMlpCodeOrg(String value) {
        setAttributeInternal(MLPCODEORG, value);
    }

    /**
     * Gets the attribute value for MlpPartOrg, using the alias name MlpPartOrg.
     * @return the value of MlpPartOrg
     */
    public String getMlpPartOrg() {
        return (String)getAttributeInternal(MLPPARTORG);
    }

    /**
     * Sets <code>value</code> as the attribute value for MlpPartOrg.
     * @param value value to set the MlpPartOrg
     */
    public void setMlpPartOrg(String value) {
        setAttributeInternal(MLPPARTORG, value);
    }

    /**
     * Gets the attribute value for MlpActualUnitcost, using the alias name MlpActualUnitcost.
     * @return the value of MlpActualUnitcost
     */
    public Double getMlpActualUnitcost() {
        return (Double)getAttributeInternal(MLPACTUALUNITCOST);
    }

    /**
     * Sets <code>value</code> as the attribute value for MlpActualUnitcost.
     * @param value value to set the MlpActualUnitcost
     */
    public void setMlpActualUnitcost(Double value) {
        setAttributeInternal(MLPACTUALUNITCOST, value);
    }

    /**
     * Gets the attribute value for MlpBillableUnitcost, using the alias name MlpBillableUnitcost.
     * @return the value of MlpBillableUnitcost
     */
    public Double getMlpBillableUnitcost() {
        return (Double)getAttributeInternal(MLPBILLABLEUNITCOST);
    }

    /**
     * Sets <code>value</code> as the attribute value for MlpBillableUnitcost.
     * @param value value to set the MlpBillableUnitcost
     */
    public void setMlpBillableUnitcost(Double value) {
        setAttributeInternal(MLPBILLABLEUNITCOST, value);
    }

    /**
     * Gets the attribute value for MlpBarcode, using the alias name MlpBarcode.
     * @return the value of MlpBarcode
     */
    public String getMlpBarcode() {
        return (String)getAttributeInternal(MLPBARCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for MlpBarcode.
     * @param value value to set the MlpBarcode
     */
    public void setMlpBarcode(String value) {
        setAttributeInternal(MLPBARCODE, value);
    }

    /**
     * Gets the attribute value for ItsTaxper, using the alias name ItsTaxper.
     * @return the value of ItsTaxper
     */
    public Double getItsTaxper() {
        return (Double)getAttributeInternal(ITSTAXPER);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItsTaxper.
     * @param value value to set the ItsTaxper
     */
    public void setItsTaxper(Double value) {
        setAttributeInternal(ITSTAXPER, value);
    }

    /**
     * Gets the attribute value for ItsPartaxamt, using the alias name ItsPartaxamt.
     * @return the value of ItsPartaxamt
     */
    public Double getItsPartaxamt() {
        return (Double)getAttributeInternal(ITSPARTAXAMT);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItsPartaxamt.
     * @param value value to set the ItsPartaxamt
     */
    public void setItsPartaxamt(Double value) {
        setAttributeInternal(ITSPARTAXAMT, value);
    }

    /**
     * Gets the attribute value for Act, using the alias name Act.
     * @return the value of Act
     */
    public String getAct() {
        return (String)getAttributeInternal(ACT);
    }


    /**
     * Gets the attribute value for PartDesc, using the alias name PartDesc.
     * @return the value of PartDesc
     */
    public String getPartDesc() {
        return (String)getAttributeInternal(PARTDESC);
    }

    /**
     * Sets <code>value</code> as the attribute value for PartDesc.
     * @param value value to set the PartDesc
     */
    public void setPartDesc(String value) {
        setAttributeInternal(PARTDESC, value);
    }

    /**
     * Gets the attribute value for PartUOM, using the alias name PartUOM.
     * @return the value of PartUOM
     */
    public String getPartUOM() {
        return (String)getAttributeInternal(PARTUOM);
    }

    /**
     * Sets <code>value</code> as the attribute value for PartUOM.
     * @param value value to set the PartUOM
     */
    public void setPartUOM(String value) {
        setAttributeInternal(PARTUOM, value);
    }


    /**
     * Gets the attribute value for Available, using the alias name Available.
     * @return the value of Available
     */
    public Number getAvailable() {
        return (Number)getAttributeInternal(AVAILABLE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Available.
     * @param value value to set the Available
     */
    public void setAvailable(Number value) {
        setAttributeInternal(AVAILABLE, value);
    }

    /**
     * Gets the attribute value for ItsBin, using the alias name ItsBin.
     * @return the value of ItsBin
     */
    public String getItsBin() {
        return (String)getAttributeInternal(ITSBIN);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItsBin.
     * @param value value to set the ItsBin
     */
    public void setItsBin(String value) {
        setAttributeInternal(ITSBIN, value);
    }

    /**
     * Gets the attribute value for ItsLot, using the alias name ItsLot.
     * @return the value of ItsLot
     */
    public String getItsLot() {
        return (String)getAttributeInternal(ITSLOT);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItsLot.
     * @param value value to set the ItsLot
     */
    public void setItsLot(String value) {
        setAttributeInternal(ITSLOT, value);
    }


    /**
     * Gets the attribute value for DBQty, using the alias name DBQty.
     * @return the value of DBQty
     */
    public Number getDBQty() {
        return (Number)getAttributeInternal(DBQTY);
    }

    /**
     * Sets <code>value</code> as the attribute value for DBQty.
     * @param value value to set the DBQty
     */
    public void setDBQty(Number value) {
        setAttributeInternal(DBQTY, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity its.mnr.mp5.baseclass.ExtendedEntityImpl.
     */
    public ExtendedEntityImpl getR5matlists() {
        return (ExtendedEntityImpl)getAttributeInternal(R5MATLISTS);
    }

    /**
     * Sets <code>value</code> as the associated entity its.mnr.mp5.baseclass.ExtendedEntityImpl.
     */
    public void setR5matlists(ExtendedEntityImpl value) {
        setAttributeInternal(R5MATLISTS, value);
    }

    /**
     * @return the associated entity its.mnr.mp5.baseclass.ExtendedEntityImpl.
     */
    public ExtendedEntityImpl getR5objects() {
        return (ExtendedEntityImpl)getAttributeInternal(R5OBJECTS);
    }

    /**
     * Sets <code>value</code> as the associated entity its.mnr.mp5.baseclass.ExtendedEntityImpl.
     */
    public void setR5objects(ExtendedEntityImpl value) {
        setAttributeInternal(R5OBJECTS, value);
    }

    /**
     * @return the associated entity its.mnr.mp5.baseclass.ExtendedEntityImpl.
     */
    public R5partsImpl getR5parts() {
        return (R5partsImpl)getAttributeInternal(R5PARTS);
    }

    /**
     * Sets <code>value</code> as the associated entity its.mnr.mp5.baseclass.ExtendedEntityImpl.
     */
    public void setR5parts(R5partsImpl value) {
        setAttributeInternal(R5PARTS, value);
    }

    /**
     * @return the associated entity its.mnr.mp5.baseclass.ExtendedEntityImpl.
     */
    public R5binstockImpl getR5binstock() {
        return (R5binstockImpl)getAttributeInternal(R5BINSTOCK);
    }

    /**
     * Sets <code>value</code> as the associated entity its.mnr.mp5.baseclass.ExtendedEntityImpl.
     */
    public void setR5binstock(R5binstockImpl value) {
        setAttributeInternal(R5BINSTOCK, value);
    }

    /**
     * @return the associated entity R5activitiesImpl.
     */
    public R5activitiesImpl getR5activities() {
        return (R5activitiesImpl)getAttributeInternal(R5ACTIVITIES);
    }

    /**
     * Sets <code>value</code> as the associated entity R5activitiesImpl.
     */
    public void setR5activities(R5activitiesImpl value) {
        setAttributeInternal(R5ACTIVITIES, value);
    }


    /**
     * @return the associated entity its.mnr.mp5.baseclass.ExtendedEntityImpl.
     */
    public ExtendedEntityImpl getR5uoms() {
        return (ExtendedEntityImpl)getAttributeInternal(R5UOMS);
    }

    /**
     * Sets <code>value</code> as the associated entity its.mnr.mp5.baseclass.ExtendedEntityImpl.
     */
    public void setR5uoms(ExtendedEntityImpl value) {
        setAttributeInternal(R5UOMS, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> MrlrefMp5profileView1.
     */
    public RowSet getMrlrefMp5profileView1() {
        return (RowSet)getAttributeInternal(MRLREFMP5PROFILEVIEW1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> MrltAccountmasterView1.
     */
    public RowSet getMrltAccountmasterView1() {
        return (RowSet)getAttributeInternal(MRLTACCOUNTMASTERVIEW1);
    }


    /**
     * Gets the view accessor <code>RowSet</code> Transactions.
     */
    public RowSet getTransactions() {
        return (RowSet)getAttributeInternal(TRANSACTIONS);
    }

    /**
     * Gets the view accessor <code>RowSet</code> TaxRateValues.
     */
    public RowSet getTaxRateValues() {
        return (RowSet)getAttributeInternal(TAXRATEVALUES);
    }

    /**
     * Gets the view accessor <code>RowSet</code> PartsBinstockView.
     */
    public RowSet getPartsBinstockView() {
        return (RowSet)getAttributeInternal(PARTSBINSTOCKVIEW);
    }

    /**
     * @param mlpMatlist key constituent
     * @param mlpLine key constituent
     * @param mlpMatlrev key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String mlpMatlist, Integer mlpLine, Integer mlpMatlrev) {
        return new Key(new Object[]{mlpMatlist, mlpLine, mlpMatlrev});
    }


}
