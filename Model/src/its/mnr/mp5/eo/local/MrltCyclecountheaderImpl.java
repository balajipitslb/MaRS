package its.mnr.mp5.eo.local;

import its.mnr.mp5.baseclass.ExtendedEntityImpl;

import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.Calendar;

import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.Entity;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.TransactionEvent;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Jan 19 09:28:12 PST 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MrltCyclecountheaderImpl extends ExtendedEntityImpl {
    // ---------------------------------------------------------------------
    // ---    File generated by Oracle ADF Business Components Design Time.
    // ---    Mon Apr 28 16:08:58 PDT 2014
    // ---    Custom code may be added to this class.
    // ---    Warning: Do not modify method signatures of generated methods.
    // ---------------------------------------------------------------------

        
        public static int VARCHAR2 = Types.VARCHAR;
        
        /* Helper methods */    
        protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
            CallableStatement st = null;
            try {
                // 1. Create a JDBC CallabledStatement
                st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
                // 2. Register the first bind variable for the return value
                st.registerOutParameter(1, sqlReturnType);
                if (bindVars != null) {
                    // 3. Loop over values for the bind variables passed in, if any
                    for (int z = 0; z < bindVars.length; z++) {
                        // 4. Set the value of user-supplied bind vars in the stmt
                        st.setObject(z + 2, bindVars[z]);
                    }
                }
                // 5. Set the value of user-supplied bind vars in the stmt
                st.executeUpdate();
                // 6. Return the value of the first bind variable
                return st.getObject(1);
            } catch (SQLException e) {
                throw new JboException(e);
            } finally {
                if (st != null) {
                    try {
                        // 7. Close the statement
                        st.close();
                    } catch (SQLException e) {
                    }
                }
            }
        }
        
    protected void callStoredProcedure(String stmt, Object[] bindVars) {
        PreparedStatement st = null;
        try {
            // 1. Create a JDBC PreparedStatement for
            st = getDBTransaction().createPreparedStatement("begin " + stmt + ";end;", 0);
            if (bindVars != null) {
                // 2. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 3. Set the value of each bind variable in the statement
                    st.setObject(z + 1, bindVars[z]);
                }
            }
            // 4. Execute the statement
            st.executeUpdate();
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    // 5. Close the statement
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }        

    /**Method to call Database function
         * @param stmt
         * @param bindVars
         * @return
         */
        protected String callSCH_CREATE_JOBS(String stmt, Object[] bindVars) {
            CallableStatement st = null;
            String ret = "";
            try {
              //Creating sql statement
                st = this.getDBTransaction().createCallableStatement("begin " + stmt + ";end;", 0);
                
              
                //  Set the bind values of the IN parameters (Employee Id is Input parameter here)
                st.setObject(1, bindVars[0]);
                st.setObject(2, bindVars[1]);
                st.setObject(3, bindVars[2]);
                st.setObject(4, bindVars[3]);
                st.setObject(5, bindVars[4]);
                st.setObject(6, bindVars[5]);
               //Register out parameters and their types (In this case procedure has 2 out parameters)

                st.registerOutParameter(7, Types.VARCHAR);
                
                // Execute the statement
                st.executeUpdate();
               
               // Print Return Values of out parameters

                ret = st.getString(7);
                //System.out.println("RETURN: " + ret);
            
              
            } catch (SQLException e) {
                throw new JboException(e.getMessage());
              
            } finally {
                if (st != null) {
                    try {
                        st.close();
                    } catch (SQLException e) {

                    }
                }
            }
            return ret;
        }

        //method to get startDate for the dbms_scheduler
        public Timestamp getStartDate(){
            long retryDate = System.currentTimeMillis();
            Timestamp original = new Timestamp(retryDate);
            Calendar cal = Calendar.getInstance();
            cal.setTimeInMillis(original.getTime());
            cal.add(Calendar.SECOND, 3);
            Timestamp startDate = new Timestamp(cal.getTime().getTime());
            return startDate;
        }
        
        //method to get endDate for the dbms_scheduler
        public Timestamp getEndDate(){
            long retryDate = System.currentTimeMillis();
            Timestamp original = new Timestamp(retryDate);
            Calendar cal = Calendar.getInstance();
            cal.setTimeInMillis(original.getTime());
            cal.add(Calendar.MINUTE, 3);
            Timestamp endDate = new Timestamp(cal.getTime().getTime());
            return endDate;
        }        
        /*
        public String ccFreeze(Integer iListid, String emailStr) {
            //System.out.println("updateWODates()");
            
            //String ret = (String)callStoredFunction(VARCHAR2, "mnrpkg.CCFREEZE(?)",
            //                                  new Object[] {iListid});
            
            System.out.println("Inside ccFreeze iListid: "+iListid+" emailStr: "+emailStr);
           String str = "";
           str = "BEGIN MNRPKG.CCFREEZE_email('"+iListid+"','"+emailStr+"'); END;";
            System.out.println("Inside ccFreeze str = " + str);
            String jobName = "CC"+iListid+"FREEZE";
            Timestamp startDate = getStartDate();
            Timestamp endDate = getEndDate();   
            String comments =  "CCFREEZE_job_"+iListid;
            String ret = callSCH_CREATE_JOBS("mnrpkg.SCH_CREATE_JOBS(?,?,?,?,?,?,?)",new Object[]{str, jobName, startDate, endDate,comments,emailStr});
            System.out.println("Function WorkOrderRFIUpd = " + ret);
            return ret;
            // return "TRUE";            
           // callStoredProcedure("mnrpkg.SCH_CREATE_JOBS(?,?,?,?,?)",new Object[]{str, jobName, startDate, endDate, comments});
            //System.out.println("ITS_EstimateIns Ret = " + ret);
         //   return ret;

        }
        */
        
        public String ccFreeze(Integer iListid) {
            //System.out.println("updateWODates()");
            
            String ret = (String)callStoredFunction(VARCHAR2, "mnrpkg.CCFREEZE(?)",
                                              new Object[] {iListid});
            //System.out.println("ITS_EstimateIns Ret = " + ret);
            return ret;

        }        
        
        public String ccCancel(Integer iListid) {
            //System.out.println("updateWODates()");
            
            String ret = (String)callStoredFunction(VARCHAR2, "mnrpkg.CCCANCEL(?)",
                                              new Object[] {iListid});
            //System.out.println("ITS_EstimateIns Ret = " + ret);
            return ret;

        }
        
        public String ccComplete(Integer iListid, String emailStr) {
            //System.out.println("updateWODates()");
            /*
            String ret = (String)callStoredFunction(VARCHAR2, "mnrpkg.CCCOMPLETE(?)",
                                              new Object[] {iListid});
            */
            //System.out.println("Inside ccComplete iListid: "+iListid+" emailStr: "+emailStr);
            String str = "";
            str = "BEGIN MNRPKG.CCCOMPLETE_email('"+iListid+"','"+emailStr+"'); END;";
            // System.out.println("Inside ccComplete str = " + str);
             
                 String jobName = "CC"+iListid+"Complete";
                 Timestamp startDate = getStartDate();
                 Timestamp endDate = getEndDate();   
                 String comments =  jobName;
                String ret = callSCH_CREATE_JOBS("mnrpkg.SCH_CREATE_JOBS(?,?,?,?,?,?,?)",new Object[]{str, jobName, startDate, endDate,comments,emailStr});
               // System.out.println("Function WorkOrderRFIUpd = " + ret);
                return ret;
            // return "TRUE";                 
            // callStoredProcedure("mnrpkg.SCH_CREATE_JOBS(?,?,?,?,?)",new Object[]{str, jobName, startDate, endDate, comments});
            //System.out.println("ITS_EstimateIns Ret = " + ret);
           // return ret;

        }
        
        /**
         * Validation method for Ccstatus.
         */
        public boolean validateCcstatus(String ccstatus) {
            boolean ret = false;
            //System.out.println("CCstatus getEntityState(): " + getEntityState());
            String oldValue = (String)getPostedAttribute(CCSTATUS);
            String newValue = ccstatus;
           // System.out.println("oldValue: " + oldValue);
           // System.out.println("newValue: " + newValue);
            if ("READY".equals(oldValue) && "CANCELLED".equals(newValue)) {
                ret = true;
            }
            if ("READY".equals(oldValue) && "FROZEN".equals(newValue)) {
                ret = true;
            }
            if ("FROZEN".equals(oldValue) && "COMPLETED".equals(newValue)) {
                ret = true;
            }
            if ("COMPLETED".equals(oldValue) && "CLOSED".equals(newValue)) {
                ret = true;
            }
            if (!ret) {
                throw new JboException("Invalid Status Change: " + oldValue + " -> " + newValue);
            }
            return ret;
        }


        public String translateStatusToString(byte b) {
            String ret = null;
            switch (b) {
            case Entity.STATUS_INITIALIZED:
                {
                    ret = "Initialized";
                    break;
                }
            case Entity.STATUS_NEW:
                {
                    ret = "New";
                    break;
                }
            case Entity.STATUS_MODIFIED:
                {
                    ret = "Modified";
                    break;
                }
            case Entity.STATUS_UNMODIFIED:
                {
                    ret = "Unmodified";
                    break;
                }
            }
            return ret;
        }
        
        protected void doDML(int operation, TransactionEvent transactionEvent) {
            //System.out.println("committing Header");
            /**
              * When status = FROZEN, update Part qty & timestamp, header frozen timestamp
              */
            
           
            if (operation == DML_UPDATE && isAttributeChanged(CCSTATUS) && "FROZEN".equals(getCcstatus())) {
                //System.out.println("calling brChangeActAccountCode()");
              //  ccFreeze(getListid(), getemailStr());
              ccFreeze(getListid());
            }
            /**
              * When status = CANCELLED, update Part its_cyclecnt to null (to enable bin transfers, (de)activation)
              */
            if (operation == DML_UPDATE && isAttributeChanged(CCSTATUS) && "CANCELLED".equals(getCcstatus())) {
                //System.out.println("calling brChangeActAccountCode()");
                ccCancel(getListid());
            }
            /**
              * When status = COMPLETED, 
              * - merge parts from storerooms
              * - reconcile against Issues/Returns/Receivings
              * - create transaction and translines records
              * - update Part its_cyclecnt to null (to enable bin transfers, (de)activation)

              */
            if (operation == DML_UPDATE && isAttributeChanged(CCSTATUS) && "COMPLETED".equals(getCcstatus())) {
                //System.out.println("calling brChangeActAccountCode()");
                ccComplete(getListid(), getemailStr());
            }
            super.doDML(operation, transactionEvent);
        }
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Listid {
            public Object get(MrltCyclecountheaderImpl obj) {
                return obj.getListid();
            }

            public void put(MrltCyclecountheaderImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Ccdesc {
            public Object get(MrltCyclecountheaderImpl obj) {
                return obj.getCcdesc();
            }

            public void put(MrltCyclecountheaderImpl obj, Object value) {
                obj.setCcdesc((String) value);
            }
        }
        ,
        Ccstatus {
            public Object get(MrltCyclecountheaderImpl obj) {
                return obj.getCcstatus();
            }

            public void put(MrltCyclecountheaderImpl obj, Object value) {
                obj.setCcstatus((String) value);
            }
        }
        ,
        Created {
            public Object get(MrltCyclecountheaderImpl obj) {
                return obj.getCreated();
            }

            public void put(MrltCyclecountheaderImpl obj, Object value) {
                obj.setCreated((Timestamp) value);
            }
        }
        ,
        Frozen {
            public Object get(MrltCyclecountheaderImpl obj) {
                return obj.getFrozen();
            }

            public void put(MrltCyclecountheaderImpl obj, Object value) {
                obj.setFrozen((Timestamp) value);
            }
        }
        ,
        Completed {
            public Object get(MrltCyclecountheaderImpl obj) {
                return obj.getCompleted();
            }

            public void put(MrltCyclecountheaderImpl obj, Object value) {
                obj.setCompleted((Timestamp) value);
            }
        }
        ,
        Store {
            public Object get(MrltCyclecountheaderImpl obj) {
                return obj.getStore();
            }

            public void put(MrltCyclecountheaderImpl obj, Object value) {
                obj.setStore((String) value);
            }
        }
        ,
        Org {
            public Object get(MrltCyclecountheaderImpl obj) {
                return obj.getOrg();
            }

            public void put(MrltCyclecountheaderImpl obj, Object value) {
                obj.setOrg((String) value);
            }
        }
        ,
        Binstart {
            public Object get(MrltCyclecountheaderImpl obj) {
                return obj.getBinstart();
            }

            public void put(MrltCyclecountheaderImpl obj, Object value) {
                obj.setBinstart((String) value);
            }
        }
        ,
        Binend {
            public Object get(MrltCyclecountheaderImpl obj) {
                return obj.getBinend();
            }

            public void put(MrltCyclecountheaderImpl obj, Object value) {
                obj.setBinend((String) value);
            }
        }
        ,
        Partclass {
            public Object get(MrltCyclecountheaderImpl obj) {
                return obj.getPartclass();
            }

            public void put(MrltCyclecountheaderImpl obj, Object value) {
                obj.setPartclass((String) value);
            }
        }
        ,
        Partstart {
            public Object get(MrltCyclecountheaderImpl obj) {
                return obj.getPartstart();
            }

            public void put(MrltCyclecountheaderImpl obj, Object value) {
                obj.setPartstart((String) value);
            }
        }
        ,
        Partend {
            public Object get(MrltCyclecountheaderImpl obj) {
                return obj.getPartend();
            }

            public void put(MrltCyclecountheaderImpl obj, Object value) {
                obj.setPartend((String) value);
            }
        }
        ,
        P1 {
            public Object get(MrltCyclecountheaderImpl obj) {
                return obj.getP1();
            }

            public void put(MrltCyclecountheaderImpl obj, Object value) {
                obj.setP1((String) value);
            }
        }
        ,
        P2 {
            public Object get(MrltCyclecountheaderImpl obj) {
                return obj.getP2();
            }

            public void put(MrltCyclecountheaderImpl obj, Object value) {
                obj.setP2((String) value);
            }
        }
        ,
        P3 {
            public Object get(MrltCyclecountheaderImpl obj) {
                return obj.getP3();
            }

            public void put(MrltCyclecountheaderImpl obj, Object value) {
                obj.setP3((String) value);
            }
        }
        ,
        P4 {
            public Object get(MrltCyclecountheaderImpl obj) {
                return obj.getP4();
            }

            public void put(MrltCyclecountheaderImpl obj, Object value) {
                obj.setP4((String) value);
            }
        }
        ,
        P5 {
            public Object get(MrltCyclecountheaderImpl obj) {
                return obj.getP5();
            }

            public void put(MrltCyclecountheaderImpl obj, Object value) {
                obj.setP5((String) value);
            }
        }
        ,
        P6 {
            public Object get(MrltCyclecountheaderImpl obj) {
                return obj.getP6();
            }

            public void put(MrltCyclecountheaderImpl obj, Object value) {
                obj.setP6((String) value);
            }
        }
        ,
        Sttknum {
            public Object get(MrltCyclecountheaderImpl obj) {
                return obj.getSttknum();
            }

            public void put(MrltCyclecountheaderImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Bin {
            public Object get(MrltCyclecountheaderImpl obj) {
                return obj.getBin();
            }

            public void put(MrltCyclecountheaderImpl obj, Object value) {
                obj.setBin((String) value);
            }
        }
        ,
        emailStr {
            public Object get(MrltCyclecountheaderImpl obj) {
                return obj.getemailStr();
            }

            public void put(MrltCyclecountheaderImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Jobid {
            public Object get(MrltCyclecountheaderImpl obj) {
                return obj.getJobid();
            }

            public void put(MrltCyclecountheaderImpl obj, Object value) {
                obj.setJobid((String) value);
            }
        }
        ,
        MrltCyclecountparts {
            public Object get(MrltCyclecountheaderImpl obj) {
                return obj.getMrltCyclecountparts();
            }

            public void put(MrltCyclecountheaderImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        MrltFifoheader {
            public Object get(MrltCyclecountheaderImpl obj) {
                return obj.getMrltFifoheader();
            }

            public void put(MrltCyclecountheaderImpl obj, Object value) {
                obj.setMrltFifoheader((MrltFifoheaderImpl) value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(MrltCyclecountheaderImpl object);

        public abstract void put(MrltCyclecountheaderImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int LISTID = AttributesEnum.Listid.index();
    public static final int CCDESC = AttributesEnum.Ccdesc.index();
    public static final int CCSTATUS = AttributesEnum.Ccstatus.index();
    public static final int CREATED = AttributesEnum.Created.index();
    public static final int FROZEN = AttributesEnum.Frozen.index();
    public static final int COMPLETED = AttributesEnum.Completed.index();
    public static final int STORE = AttributesEnum.Store.index();
    public static final int ORG = AttributesEnum.Org.index();
    public static final int BINSTART = AttributesEnum.Binstart.index();
    public static final int BINEND = AttributesEnum.Binend.index();
    public static final int PARTCLASS = AttributesEnum.Partclass.index();
    public static final int PARTSTART = AttributesEnum.Partstart.index();
    public static final int PARTEND = AttributesEnum.Partend.index();
    public static final int P1 = AttributesEnum.P1.index();
    public static final int P2 = AttributesEnum.P2.index();
    public static final int P3 = AttributesEnum.P3.index();
    public static final int P4 = AttributesEnum.P4.index();
    public static final int P5 = AttributesEnum.P5.index();
    public static final int P6 = AttributesEnum.P6.index();
    public static final int STTKNUM = AttributesEnum.Sttknum.index();
    public static final int BIN = AttributesEnum.Bin.index();
    public static final int EMAILSTR = AttributesEnum.emailStr.index();
    public static final int JOBID = AttributesEnum.Jobid.index();
    public static final int MRLTCYCLECOUNTPARTS = AttributesEnum.MrltCyclecountparts.index();
    public static final int MRLTFIFOHEADER = AttributesEnum.MrltFifoheader.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MrltCyclecountheaderImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("its.mnr.mp5.eo.local.MrltCyclecountheader");
    }

    /**
     * Gets the attribute value for Listid, using the alias name Listid.
     * @return the value of Listid
     */
    public Integer getListid() {
        return (Integer)getAttributeInternal(LISTID);
    }

    /**
     * Gets the attribute value for Ccdesc, using the alias name Ccdesc.
     * @return the value of Ccdesc
     */
    public String getCcdesc() {
        return (String)getAttributeInternal(CCDESC);
    }

    /**
     * Sets <code>value</code> as the attribute value for Ccdesc.
     * @param value value to set the Ccdesc
     */
    public void setCcdesc(String value) {
        setAttributeInternal(CCDESC, value);
    }

    /**
     * Gets the attribute value for Ccstatus, using the alias name Ccstatus.
     * @return the value of Ccstatus
     */
    public String getCcstatus() {
        return (String)getAttributeInternal(CCSTATUS);
    }

    /**
     * Sets <code>value</code> as the attribute value for Ccstatus.
     * @param value value to set the Ccstatus
     */
    public void setCcstatus(String value) {
        setAttributeInternal(CCSTATUS, value);
    }

    /**
     * Gets the attribute value for Created, using the alias name Created.
     * @return the value of Created
     */
    public Timestamp getCreated() {
        return (Timestamp)getAttributeInternal(CREATED);
    }

    /**
     * Sets <code>value</code> as the attribute value for Created.
     * @param value value to set the Created
     */
    public void setCreated(Timestamp value) {
        setAttributeInternal(CREATED, value);
    }

    /**
     * Gets the attribute value for Frozen, using the alias name Frozen.
     * @return the value of Frozen
     */
    public Timestamp getFrozen() {
        return (Timestamp)getAttributeInternal(FROZEN);
    }

    /**
     * Sets <code>value</code> as the attribute value for Frozen.
     * @param value value to set the Frozen
     */
    public void setFrozen(Timestamp value) {
        setAttributeInternal(FROZEN, value);
    }

    /**
     * Gets the attribute value for Completed, using the alias name Completed.
     * @return the value of Completed
     */
    public Timestamp getCompleted() {
        return (Timestamp)getAttributeInternal(COMPLETED);
    }

    /**
     * Sets <code>value</code> as the attribute value for Completed.
     * @param value value to set the Completed
     */
    public void setCompleted(Timestamp value) {
        setAttributeInternal(COMPLETED, value);
    }

    /**
     * Gets the attribute value for Store, using the alias name Store.
     * @return the value of Store
     */
    public String getStore() {
        return (String)getAttributeInternal(STORE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Store.
     * @param value value to set the Store
     */
    public void setStore(String value) {
        setAttributeInternal(STORE, value);
    }

    /**
     * Gets the attribute value for Org, using the alias name Org.
     * @return the value of Org
     */
    public String getOrg() {
        return (String)getAttributeInternal(ORG);
    }

    /**
     * Sets <code>value</code> as the attribute value for Org.
     * @param value value to set the Org
     */
    public void setOrg(String value) {
        setAttributeInternal(ORG, value);
    }

    /**
     * Gets the attribute value for Binstart, using the alias name Binstart.
     * @return the value of Binstart
     */
    public String getBinstart() {
        return (String)getAttributeInternal(BINSTART);
    }

    /**
     * Sets <code>value</code> as the attribute value for Binstart.
     * @param value value to set the Binstart
     */
    public void setBinstart(String value) {
        setAttributeInternal(BINSTART, value);
    }

    /**
     * Gets the attribute value for Binend, using the alias name Binend.
     * @return the value of Binend
     */
    public String getBinend() {
        return (String)getAttributeInternal(BINEND);
    }

    /**
     * Sets <code>value</code> as the attribute value for Binend.
     * @param value value to set the Binend
     */
    public void setBinend(String value) {
        setAttributeInternal(BINEND, value);
    }

    /**
     * Gets the attribute value for Partclass, using the alias name Partclass.
     * @return the value of Partclass
     */
    public String getPartclass() {
        return (String)getAttributeInternal(PARTCLASS);
    }

    /**
     * Sets <code>value</code> as the attribute value for Partclass.
     * @param value value to set the Partclass
     */
    public void setPartclass(String value) {
        setAttributeInternal(PARTCLASS, value);
    }

    /**
     * Gets the attribute value for Partstart, using the alias name Partstart.
     * @return the value of Partstart
     */
    public String getPartstart() {
        return (String)getAttributeInternal(PARTSTART);
    }

    /**
     * Sets <code>value</code> as the attribute value for Partstart.
     * @param value value to set the Partstart
     */
    public void setPartstart(String value) {
        setAttributeInternal(PARTSTART, value);
    }

    /**
     * Gets the attribute value for Partend, using the alias name Partend.
     * @return the value of Partend
     */
    public String getPartend() {
        return (String)getAttributeInternal(PARTEND);
    }

    /**
     * Sets <code>value</code> as the attribute value for Partend.
     * @param value value to set the Partend
     */
    public void setPartend(String value) {
        setAttributeInternal(PARTEND, value);
    }

    /**
     * Gets the attribute value for P1, using the alias name P1.
     * @return the value of P1
     */
    public String getP1() {
        return (String)getAttributeInternal(P1);
    }

    /**
     * Sets <code>value</code> as the attribute value for P1.
     * @param value value to set the P1
     */
    public void setP1(String value) {
        setAttributeInternal(P1, value);
    }

    /**
     * Gets the attribute value for P2, using the alias name P2.
     * @return the value of P2
     */
    public String getP2() {
        return (String)getAttributeInternal(P2);
    }

    /**
     * Sets <code>value</code> as the attribute value for P2.
     * @param value value to set the P2
     */
    public void setP2(String value) {
        setAttributeInternal(P2, value);
    }

    /**
     * Gets the attribute value for P3, using the alias name P3.
     * @return the value of P3
     */
    public String getP3() {
        return (String)getAttributeInternal(P3);
    }

    /**
     * Sets <code>value</code> as the attribute value for P3.
     * @param value value to set the P3
     */
    public void setP3(String value) {
        setAttributeInternal(P3, value);
    }

    /**
     * Gets the attribute value for P4, using the alias name P4.
     * @return the value of P4
     */
    public String getP4() {
        return (String)getAttributeInternal(P4);
    }

    /**
     * Sets <code>value</code> as the attribute value for P4.
     * @param value value to set the P4
     */
    public void setP4(String value) {
        setAttributeInternal(P4, value);
    }

    /**
     * Gets the attribute value for P5, using the alias name P5.
     * @return the value of P5
     */
    public String getP5() {
        return (String)getAttributeInternal(P5);
    }

    /**
     * Sets <code>value</code> as the attribute value for P5.
     * @param value value to set the P5
     */
    public void setP5(String value) {
        setAttributeInternal(P5, value);
    }

    /**
     * Gets the attribute value for P6, using the alias name P6.
     * @return the value of P6
     */
    public String getP6() {
        return (String)getAttributeInternal(P6);
    }

    /**
     * Sets <code>value</code> as the attribute value for P6.
     * @param value value to set the P6
     */
    public void setP6(String value) {
        setAttributeInternal(P6, value);
    }

    /**
     * Gets the attribute value for Sttknum, using the alias name Sttknum.
     * @return the value of Sttknum
     */
    public String getSttknum() {
        return (String)getAttributeInternal(STTKNUM);
    }

    /**
     * Gets the attribute value for Bin, using the alias name Bin.
     * @return the value of Bin
     */
    public String getBin() {
        return (String)getAttributeInternal(BIN);
    }

    /**
     * Sets <code>value</code> as the attribute value for Bin.
     * @param value value to set the Bin
     */
    public void setBin(String value) {
        setAttributeInternal(BIN, value);
    }

    /**
     * Gets the attribute value for emailStr, using the alias name emailStr.
     * @return the value of emailStr
     */
    public String getemailStr() {
        return (String)getAttributeInternal(EMAILSTR);
    }

    /**
     * Gets the attribute value for Jobid, using the alias name Jobid.
     * @return the value of Jobid
     */
    public String getJobid() {
        return (String)getAttributeInternal(JOBID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Jobid.
     * @param value value to set the Jobid
     */
    public void setJobid(String value) {
        setAttributeInternal(JOBID, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getMrltCyclecountparts() {
        return (RowIterator)getAttributeInternal(MRLTCYCLECOUNTPARTS);
    }

    /**
     * @return the associated entity MrltFifoheaderImpl.
     */
    public MrltFifoheaderImpl getMrltFifoheader() {
        return (MrltFifoheaderImpl)getAttributeInternal(MRLTFIFOHEADER);
    }

    /**
     * Sets <code>value</code> as the associated entity MrltFifoheaderImpl.
     */
    public void setMrltFifoheader(MrltFifoheaderImpl value) {
        setAttributeInternal(MRLTFIFOHEADER, value);
    }

    /**
     * @param listid key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Integer listid) {
        return new Key(new Object[] { listid });
    }


}
