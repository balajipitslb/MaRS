package its.mnr.mp5.eo.local;

import its.mnr.mp5.baseclass.ExtendedEntityImpl;

import its.mnr.mp5.baseclass.ExtendedViewRowImpl;
import its.mnr.mp5.lov.POLinesImpl;
import its.mnr.mp5.lov.POTransactionExistenceImpl;

import its.mnr.mp5.vo.workorder.CurrentAccountRateVersionImpl;

import java.util.Hashtable;

import oracle.adf.share.ADFContext;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.RowSetIterator;
import oracle.jbo.VariableValueManager;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.TransactionEvent;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Dec 18 15:47:52 PST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class R5ordersImpl extends ExtendedEntityImpl {

    public void updOrdPrice_ORIG() {
        //System.out.println("updOrdPrice()");
        Double dPrice =  0.0;
        Double dMultiply = 0.0;
        Double dQty = 0.0;
        Double dtotal = 0.0;
        Double dtotalDiscount = 0.0;
        RowSet rs = this.getPOLines();
        
        POLinesImpl impl = (POLinesImpl)rs.getViewObject();
        ViewCriteria vc = impl.getViewCriteria("POLinesByOrder");
        //vc.resetCriteria();
        impl.setbOrder(getOrdCode());
        impl.setbOrderOrg(getOrdOrg());
        impl.applyViewCriteria(vc);
        // set range size to 1 since we expect a single record
        //impl.setRangeSize(1);
        // execute query to make sure we get latest data!
        impl.executeQuery();
        Row rw = impl.first();
        
        //OrlPrice *(OrlMultiply * OrlOrdqty)
        if (rw != null) {
            //System.out.println("RW != null");
            dPrice = (Double)rw.getAttribute("OrlPrice");
            dMultiply = (Double)rw.getAttribute("OrlMultiply");
            dQty = (Double)rw.getAttribute("OrlOrdqty");
            dtotal = dtotal + (dPrice * (dMultiply * dQty));
            dtotalDiscount = dtotalDiscount + ((Double)rw.getAttribute("OrlTotextra") == null? 0.0 : (Double)rw.getAttribute("OrlTotextra"));
        }
        while (impl.hasNext()) {
            //System.out.println("impl.hasNext()");
            rw = impl.next();
            dPrice = (Double)rw.getAttribute("OrlPrice");
            dMultiply = (Double)rw.getAttribute("OrlMultiply");
            dQty = (Double)rw.getAttribute("OrlOrdqty");
            dtotal = dtotal + (dPrice * (dMultiply * dQty));
            dtotalDiscount = dtotalDiscount + ((Double)rw.getAttribute("OrlTotextra") == null? 0.0 : (Double)rw.getAttribute("OrlTotextra"));
        }
        if (dPrice != null && dMultiply != null && dQty != null) {
            setOrdPrice(dtotal);
        }
        if (dtotalDiscount != null) {
            setOrdDiscount(dtotalDiscount);
        }
        rs.closeRowSet();
    }
    public void updOrdPrice_Back4() {
        //System.out.println("updOrdPrice()");
        Double dPrice =  0.0;
        //Double dMultiply = 0.0;
        Double dQty = 0.0;
        Double dtotal = 0.0;
        Double dtotalDiscount = 0.0;
        //RowSet rs = this.getPOLines();
        RowIterator iter = this.getR5orderlines();
        Row rw = iter.first();
        //OrlPrice *(OrlMultiply * OrlOrdqty)
        if (iter != null) {
            //System.out.println("RW != null");
            //System.out.println("Ord Line: "+ rw.getAttribute("OrlOrdline"));
            dPrice = (Double)rw.getAttribute("OrlPrice");
            dQty = (Double)rw.getAttribute("OrlOrdqty");
            if (dPrice != null && dQty != null) {
                dtotal = dtotal + (dPrice * dQty);
            }
            dtotalDiscount = dtotalDiscount + ((Double)rw.getAttribute("OrlTotextra") == null? 0.0 : (Double)rw.getAttribute("OrlTotextra"));
        }
        while (iter.hasNext()) {
            //System.out.println("impl.hasNext()");
            rw = iter.next();
            //System.out.println("Ord Line: "+ rw.getAttribute("OrlOrdline"));
            dPrice = (Double)rw.getAttribute("OrlPrice");
            dQty = (Double)rw.getAttribute("OrlOrdqty");
            if (dPrice != null && dQty != null) {
                dtotal = dtotal + (dPrice * dQty);
            }
            dtotalDiscount = dtotalDiscount + ((Double)rw.getAttribute("OrlTotextra") == null? 0.0 : (Double)rw.getAttribute("OrlTotextra"));
        }
        if (dPrice != null /*&& dMultiply != null*/ && dQty != null) {
            setOrdPrice(dtotal);
        }
        if (dtotalDiscount != null) {
            setOrdDiscount(dtotalDiscount);
        }
        //rs.closeRowSet();
    }
      
    public void updOrdPrice() {
        //System.out.println("updOrdPrice()");
        Double dPrice =  0.0;
        //Double dMultiply = 0.0;
        Double dQty = 0.0;
        Double dtotal = 0.0;
        Double dtotalDiscount = 0.0;
        String sPart="";
        String sOrdType="";
       // RowIterator iter;
        
      //  if()
        //RowSet rs = this.getPOLines();
        RowIterator iter = this.getR5orderlines();
        Row rw = iter.first();
        //OrlPrice *(OrlMultiply * OrlOrdqty)
        if (iter != null) {
            //System.out.println("RW != null");
            //System.out.println("Ord Line: "+ rw.getAttribute("OrlOrdline"));
            if(rw!=null){
                if(rw.getAttributeIndexOf("OrlPart")!=-1){
                    sPart = (String)rw.getAttribute("OrlPart");
                    //System.out.println("sPart:" + sPart);
                }
            if(rw.getAttributeIndexOf("ItsOrltype")!=-1){
                sOrdType =(String)rw.getAttribute("ItsOrltype");
                //System.out.println("sOrdType:" + sOrdType);
            }                

            
            if ("PART".equals(sOrdType)) {
                dPrice = (Double)rw.getAttribute("OrlPrice");
                dQty = (Double)rw.getAttribute("OrlOrdqty");
            }else if("SERVICE".equals(sOrdType)) {
                dPrice = (Double)rw.getAttribute("ItsTaskprice");
                dQty = (Double)rw.getAttribute("OrlTaskqty");
            }
            
            //System.out.println("dPrice:" +dPrice);
            //System.out.println("dQty:"+dQty);
            
            try{
                dtotal = dtotal + (dPrice * dQty);
            }catch(NullPointerException nullPointer){
                throw new NullPointerException(nullPointer + sPart +  " Price or Qty is null"); 
            }
            dtotalDiscount = dtotalDiscount + ((Double)rw.getAttribute("OrlTotextra") == null? 0.0 : (Double)rw.getAttribute("OrlTotextra"));
        }
        while (iter.hasNext()) {
            //System.out.println("impl.hasNext()");
            rw = iter.next();
            //System.out.println("Ord Line: "+ rw.getAttribute("OrlOrdline"));
            sPart = (String)rw.getAttribute("OrlPart");
            //System.out.println("sPart:" + sPart);
            dPrice = (Double)rw.getAttribute("OrlPrice");
            //System.out.println("dPrice:" +dPrice);
            dQty = (Double)rw.getAttribute("OrlOrdqty");
            //System.out.println("dQty:"+dQty);
            try{
                dtotal = dtotal + (dPrice * dQty);
            }catch(NullPointerException nullPointer){
                throw new NullPointerException(nullPointer + sPart +  " Price or Qty is null"); 
            }
            dtotalDiscount = dtotalDiscount + ((Double)rw.getAttribute("OrlTotextra") == null? 0.0 : (Double)rw.getAttribute("OrlTotextra"));
        }
        if (dPrice != null /*&& dMultiply != null*/ && dQty != null) {
            setOrdPrice(dtotal);
        }
        if (dtotalDiscount != null) {
            setOrdDiscount(dtotalDiscount);
        }
        //rs.closeRowSet();
        }
    }  
  
    public void updOrdPrice_back1() {
        System.out.println("updOrdPrice()");
        Double dPrice =  0.0;
        //Double dMultiply = 0.0;
        Double dQty = 0.0;
        Double dtotal = 0.0;
        Double dtotalDiscount = 0.0;
        String sPart;
        //RowSet rs = this.getPOLines();
        //RowSetIterator iter = this.getPOLines().createRowSetIterator(null);
        RowIterator iter = this.getR5orderlines();
        iter.reset();
        //Row rw = iter.first();
        //OrlPrice *(OrlMultiply * OrlOrdqty)
//        System.out.println("Order: "+ rw.getAttribute("OrlOrder"));
        while (iter.hasNext()) {
            //System.out.println("impl.hasNext()");
            Row rw = iter.next();
            //System.out.println("Ord Line: "+ rw.getAttribute("OrlOrdline"));
            sPart = (String)rw.getAttribute("OrlPart");
            //System.out.println("sPart:" + sPart);
            dPrice = (Double)rw.getAttribute("OrlPrice");
           // System.out.println("dPrice:" +dPrice);
            dQty = (Double)rw.getAttribute("OrlOrdqty");
           // System.out.println("dQty:"+dQty);
            try{
                dtotal = dtotal + (dPrice * dQty);
            }catch(NullPointerException nullPointer){
                throw new NullPointerException(nullPointer + " Price or Qty is null"); 
            }
            dtotalDiscount = dtotalDiscount + ((Double)rw.getAttribute("OrlTotextra") == null? 0.0 : (Double)rw.getAttribute("OrlTotextra"));
        }
        if (dPrice != null /*&& dMultiply != null*/ && dQty != null) {
            setOrdPrice(dtotal);
        }
        if (dtotalDiscount != null) {
            setOrdDiscount(dtotalDiscount);
        }
        //iter.closeRowSetIterator();
    }

    public void updOrdPrice_back() {
        //System.out.println("updOrdPrice()");

        Double dtotal = gettOrderlineSum() == null ? 0.0 : gettOrderlineSum();
        Double dtotalDiscount = gettPriceExtended() == null ? 0.0 : gettPriceExtended();
        //System.out.println("dtotal:" +dtotal);
        setOrdPrice(dtotal);

        setOrdDiscount(dtotalDiscount);
    }

    /**
     * BR: When Purchase Order Status changes to Approved, automatically change the Unfinished Status for the Orderlines
     */
    public void brChangeOrderlineStatusApprove() {
        //String oldWOCostCode = (String)getPostedAttribute(EVTCOSTCODE);
        //String newOrdSts = getOrdStatus();
        String olineSts;
        final String cFINISHED = "A";
        final String cUNFINISHED = "U";

        if (isApprover()) {
            //System.out.println("Setting Authorize User: " + getCurrentUser());
            setOrdAuth(getCurrentUser());
        }

        RowIterator olineSet = getR5orderlines();
        // execute query to make sure we get latest data!
        ((RowSet)olineSet).executeQuery();
        R5orderlinesImpl oline;
        while (olineSet.hasNext()) {
            oline = (R5orderlinesImpl)olineSet.next();
            olineSts = oline.getOrlStatus();
            if ((cUNFINISHED.equals(olineSts)))
                //System.out.println("updating ActAccountCode");
                oline.setOrlStatus(cFINISHED);
                oline.setOrlRstatus(cFINISHED);
        }
    }

    /**
     * BR: When Purchase Order Status changes to Cancel, automatically change the Orderlines status
     */
    public void brChangeOrderlineStatusCancel() {
        final String cCANCELLED = "C";

        RowIterator olineSet = getR5orderlines();
        // execute query to make sure we get latest data!
        ((RowSet)olineSet).executeQuery();
        R5orderlinesImpl oline;
        while (olineSet.hasNext()) {
            oline = (R5orderlinesImpl)olineSet.next();
            oline.setOrlStatus(cCANCELLED);
            oline.setOrlRstatus(cCANCELLED);
        }
    }
    
    public String getCurrentUser() {
        return ADFContext.getCurrent().getSecurityContext().getUserName().toUpperCase();
    }

    public boolean isApprover() {
        //System.out.println("Inside isApprover()");
        //false returns validition error
        boolean ret = false;
        String sUser = getCurrentUser();
        try{
        if (sUser.equals("R5")){return true;};
                                            
        //System.out.println("C(Completed) -> CRV(Clerk Review)");
        //check View Object for Estimate existence.
        RowSet rs = this.getPOApprovers();
        VariableValueManager vm = rs.ensureVariableManager();
        vm.setVariableValue("bUsrcode", sUser);
        rs.setForwardOnly(true);
        rs.executeQuery();
        Row rw = rs.first();
        if (rw != null) {
            //System.out.println("User is Approver");
            ret = true;
        }
        }
        catch(Exception e){
            System.out.println("Inside R5OrdersImpl isApprover catch");
            e.printStackTrace();
        }
        //System.out.println("ret: " + ret);
        return ret;
    }
    
    /**
     * Validation method for OrdStatus.
     */
    public boolean validateOrdStatusRecvClsd(String ordstatus) {
        //System.out.println("Inside R5OrdersImpl validateOrdStatusRecvClsd");
        boolean ret = true;
        try{
            RowSet rs = this.getPOTransactionExistence();
            VariableValueManager vm = rs.ensureVariableManager();
            vm.setVariableValue("bOrder", getOrdCode());
            rs.setForwardOnly(true);
            rs.executeQuery();
            Row rw = rs.first();
            if (rw != null) {
                ret = false;
               // System.out.println("Found record");
            }
        }
        catch(Exception e){
            System.out.println("Inside R5OrdersImpl validateOrdStatusRecvClsd catch");
            e.printStackTrace();
        }
        return ret;
    }

    /**
     * Validation method for OrdStatus.
     */
    public boolean validateOrdStatusCanc(String ordstatus) {
        //false returns validition error
        boolean ret = true;
        try{
            RowSet rs = this.getPOTransactionExistenceCanc();
            VariableValueManager vm = rs.ensureVariableManager();
            vm.setVariableValue("bOrder", getOrdCode());
            rs.setForwardOnly(true);
            rs.executeQuery();
            Row rw = rs.first();
            if (rw != null) {
                ret = false;
            }
        }
        catch(Exception e){
            System.out.println("Inside R5OrdersImpl validateOrdStatusCanc catch");
            e.printStackTrace();
        }
        return ret;
    }
    
    protected void doDML(int i, TransactionEvent transactionEvent) {
        //System.out.println("R5Orders:doDML");
        /**
          * Business Rule calls
          */
        if (i == DML_UPDATE && isAttributeChanged(ORDSTATUS)) {
            //System.out.println("calling brChangeOrderlineStatusApprove()");
            //System.out.println("getOrdAuth():: " + getOrdCode() + ":" +getOrdAuth());
            if (getOrdStatus().equals("A")) {
                brChangeOrderlineStatusApprove();
            } else if (getOrdStatus().equals("C")) {
                brChangeOrderlineStatusCancel();
            }
        }
        
        super.doDML(i, transactionEvent);
    }


    public boolean isAttributeUpdateable(int index) {
      //  System.out.println("Inside isAttributeUpdateable.");
        final String MANAGEMENT_GROUP = "3";
        final String OFFICECLERKSNONMNR_GROUP = "19";
        final String APPROVED = "A";
        final String CANCELLED = "C";
        final String READYFORAPPROVAL = "R";
        final String RECIEVECOMPLETED = "RC";
        final String UNFINISHED = "U";
        final String STATUS = getPostedAttribute(ORDSTATUS).toString(); //this.getEvtStatus();
        //System.out.println("STATUS: " + STATUS);
        Hashtable userData = getDBTransaction().getSession().getUserData();
        if (userData == null) {
            System.out.println("userData is null.");
            userData = new Hashtable();
        }
        String sGrp = (String)userData.get("UserGroup");
       // System.out.println("sGrp: " + sGrp+" MANAGEMENT_GROUP: "+MANAGEMENT_GROUP+" OFFICECLERKSNONMNR_GROUP: "+OFFICECLERKSNONMNR_GROUP);
        //Value of False means attribute is not updateable
        
        if (sGrp.equals(MANAGEMENT_GROUP) || sGrp.equals(OFFICECLERKSNONMNR_GROUP)) {
            System.out.println("Value of False means attribute is not updateable.");
            return false;
        } else
            /*
        if ((MANAGEMENT_GROUP).equals(sGrp) || (OFFICECLERKSNONMNR_GROUP).equals(sGrp)) {
            System.out.println("Value of False means attribute is not updateable.");
            return false;
        } else
       
        if ((MANAGEMENT_GROUP)==(sGrp) || (OFFICECLERKSNONMNR_GROUP)==(sGrp)) {
            System.out.println("Value of False means attribute is not updateable.");
            return false;
        } else
        */
        if (STATUS.equals(APPROVED) &&
            (index == ORDBUYER || index == ORDORIGIN || index == ORDDESC || index == ORDDUE  || index == ORDSUPPLIER)) {
            return false;
        } else if (STATUS.equals(CANCELLED) &&
            (index == ORDBUYER || index == ORDORIGIN || index == ORDDESC || index == ORDDUE  || index == ORDSUPPLIER   || index == ORDSTATUS)) {
            return false;
        }  else if (STATUS.equals(READYFORAPPROVAL) &&
            (index == ORDBUYER || index == ORDORIGIN || index == ORDDESC || index == ORDDUE  || index == ORDSUPPLIER)) {
            return false;
        } else if (STATUS.equals(RECIEVECOMPLETED) &&
            (index == ORDBUYER || index == ORDORIGIN || index == ORDDESC || index == ORDDUE  || index == ORDSUPPLIER  || index == ORDSTATUS)) {
            return false;
        } 
        
        return super.isAttributeUpdateable(index);
    }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        OrdCode {
            public Object get(R5ordersImpl obj) {
                return obj.getOrdCode();
            }

            public void put(R5ordersImpl obj, Object value) {
                obj.setOrdCode((String) value);
            }
        }
        ,
        OrdDesc {
            public Object get(R5ordersImpl obj) {
                return obj.getOrdDesc();
            }

            public void put(R5ordersImpl obj, Object value) {
                obj.setOrdDesc((String) value);
            }
        }
        ,
        OrdType {
            public Object get(R5ordersImpl obj) {
                return obj.getOrdType();
            }

            public void put(R5ordersImpl obj, Object value) {
                obj.setOrdType((String) value);
            }
        }
        ,
        OrdRtype {
            public Object get(R5ordersImpl obj) {
                return obj.getOrdRtype();
            }

            public void put(R5ordersImpl obj, Object value) {
                obj.setOrdRtype((String) value);
            }
        }
        ,
        OrdSupplier {
            public Object get(R5ordersImpl obj) {
                return obj.getOrdSupplier();
            }

            public void put(R5ordersImpl obj, Object value) {
                obj.setOrdSupplier((String) value);
            }
        }
        ,
        OrdDate {
            public Object get(R5ordersImpl obj) {
                return obj.getOrdDate();
            }

            public void put(R5ordersImpl obj, Object value) {
                obj.setOrdDate((Date) value);
            }
        }
        ,
        OrdDue {
            public Object get(R5ordersImpl obj) {
                return obj.getOrdDue();
            }

            public void put(R5ordersImpl obj, Object value) {
                obj.setOrdDue((Date) value);
            }
        }
        ,
        OrdApprov {
            public Object get(R5ordersImpl obj) {
                return obj.getOrdApprov();
            }

            public void put(R5ordersImpl obj, Object value) {
                obj.setOrdApprov((Date) value);
            }
        }
        ,
        OrdStatus {
            public Object get(R5ordersImpl obj) {
                return obj.getOrdStatus();
            }

            public void put(R5ordersImpl obj, Object value) {
                obj.setOrdStatus((String) value);
            }
        }
        ,
        OrdRstatus {
            public Object get(R5ordersImpl obj) {
                return obj.getOrdRstatus();
            }

            public void put(R5ordersImpl obj, Object value) {
                obj.setOrdRstatus((String) value);
            }
        }
        ,
        OrdAuth {
            public Object get(R5ordersImpl obj) {
                return obj.getOrdAuth();
            }

            public void put(R5ordersImpl obj, Object value) {
                obj.setOrdAuth((String) value);
            }
        }
        ,
        OrdDiscount {
            public Object get(R5ordersImpl obj) {
                return obj.getOrdDiscount();
            }

            public void put(R5ordersImpl obj, Object value) {
                obj.setOrdDiscount((Double) value);
            }
        }
        ,
        OrdPrice {
            public Object get(R5ordersImpl obj) {
                return obj.getOrdPrice();
            }

            public void put(R5ordersImpl obj, Object value) {
                obj.setOrdPrice((Double) value);
            }
        }
        ,
        OrdCurr {
            public Object get(R5ordersImpl obj) {
                return obj.getOrdCurr();
            }

            public void put(R5ordersImpl obj, Object value) {
                obj.setOrdCurr((String) value);
            }
        }
        ,
        OrdExch {
            public Object get(R5ordersImpl obj) {
                return obj.getOrdExch();
            }

            public void put(R5ordersImpl obj, Object value) {
                obj.setOrdExch((Double) value);
            }
        }
        ,
        OrdOrigin {
            public Object get(R5ordersImpl obj) {
                return obj.getOrdOrigin();
            }

            public void put(R5ordersImpl obj, Object value) {
                obj.setOrdOrigin((String) value);
            }
        }
        ,
        OrdStore {
            public Object get(R5ordersImpl obj) {
                return obj.getOrdStore();
            }

            public void put(R5ordersImpl obj, Object value) {
                obj.setOrdStore((String) value);
            }
        }
        ,
        OrdPrinted {
            public Object get(R5ordersImpl obj) {
                return obj.getOrdPrinted();
            }

            public void put(R5ordersImpl obj, Object value) {
                obj.setOrdPrinted((String) value);
            }
        }
        ,
        OrdBuyer {
            public Object get(R5ordersImpl obj) {
                return obj.getOrdBuyer();
            }

            public void put(R5ordersImpl obj, Object value) {
                obj.setOrdBuyer((String) value);
            }
        }
        ,
        OrdRevision {
            public Object get(R5ordersImpl obj) {
                return obj.getOrdRevision();
            }

            public void put(R5ordersImpl obj, Object value) {
                obj.setOrdRevision((Integer) value);
            }
        }
        ,
        OrdOrg {
            public Object get(R5ordersImpl obj) {
                return obj.getOrdOrg();
            }

            public void put(R5ordersImpl obj, Object value) {
                obj.setOrdOrg((String) value);
            }
        }
        ,
        OrdSupplierOrg {
            public Object get(R5ordersImpl obj) {
                return obj.getOrdSupplierOrg();
            }

            public void put(R5ordersImpl obj, Object value) {
                obj.setOrdSupplierOrg((String) value);
            }
        }
        ,
        tOrdCode {
            public Object get(R5ordersImpl obj) {
                return obj.gettOrdCode();
            }

            public void put(R5ordersImpl obj, Object value) {
                obj.settOrdCode((String) value);
            }
        }
        ,
        ItsIsadf {
            public Object get(R5ordersImpl obj) {
                return obj.getItsIsadf();
            }

            public void put(R5ordersImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        tOrderlineSum {
            public Object get(R5ordersImpl obj) {
                return obj.gettOrderlineSum();
            }

            public void put(R5ordersImpl obj, Object value) {
                obj.settOrderlineSum((Double) value);
            }
        }
        ,
        tPriceExtended {
            public Object get(R5ordersImpl obj) {
                return obj.gettPriceExtended();
            }

            public void put(R5ordersImpl obj, Object value) {
                obj.settPriceExtended((Double) value);
            }
        }
        ,
        ItsCustfld1 {
            public Object get(R5ordersImpl obj) {
                return obj.getItsCustfld1();
            }

            public void put(R5ordersImpl obj, Object value) {
                obj.setItsCustfld1((String) value);
            }
        }
        ,
        ItsDeptcd {
            public Object get(R5ordersImpl obj) {
                return obj.getItsDeptcd();
            }

            public void put(R5ordersImpl obj, Object value) {
                obj.setItsDeptcd((String) value);
            }
        }
        ,
        ItsCustfld2 {
            public Object get(R5ordersImpl obj) {
                return obj.getItsCustfld2();
            }

            public void put(R5ordersImpl obj, Object value) {
                obj.setItsCustfld2((String) value);
            }
        }
        ,
        tGrandTot {
            public Object get(R5ordersImpl obj) {
                return obj.gettGrandTot();
            }

            public void put(R5ordersImpl obj, Object value) {
                obj.settGrandTot((Double) value);
            }
        }
        ,
        ItsProjcd {
            public Object get(R5ordersImpl obj) {
                return obj.getItsProjcd();
            }

            public void put(R5ordersImpl obj, Object value) {
                obj.setItsProjcd((String) value);
            }
        }
        ,
        R5activities {
            public Object get(R5ordersImpl obj) {
                return obj.getR5activities();
            }

            public void put(R5ordersImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        R5companies {
            public Object get(R5ordersImpl obj) {
                return obj.getR5companies();
            }

            public void put(R5ordersImpl obj, Object value) {
                obj.setR5companies((ExtendedEntityImpl) value);
            }
        }
        ,
        R5users {
            public Object get(R5ordersImpl obj) {
                return obj.getR5users();
            }

            public void put(R5ordersImpl obj, Object value) {
                obj.setR5users((ExtendedEntityImpl) value);
            }
        }
        ,
        R5users1 {
            public Object get(R5ordersImpl obj) {
                return obj.getR5users1();
            }

            public void put(R5ordersImpl obj, Object value) {
                obj.setR5users1((ExtendedEntityImpl) value);
            }
        }
        ,
        R5orderlines {
            public Object get(R5ordersImpl obj) {
                return obj.getR5orderlines();
            }

            public void put(R5ordersImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        R5addetails {
            public Object get(R5ordersImpl obj) {
                return obj.getR5addetails();
            }

            public void put(R5ordersImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        R5transactions {
            public Object get(R5ordersImpl obj) {
                return obj.getR5transactions();
            }

            public void put(R5ordersImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        POCompanies {
            public Object get(R5ordersImpl obj) {
                return obj.getPOCompanies();
            }

            public void put(R5ordersImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        POApprovers {
            public Object get(R5ordersImpl obj) {
                return obj.getPOApprovers();
            }

            public void put(R5ordersImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        POTransactionExistence {
            public Object get(R5ordersImpl obj) {
                return obj.getPOTransactionExistence();
            }

            public void put(R5ordersImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        POTransactionExistenceCanc {
            public Object get(R5ordersImpl obj) {
                return obj.getPOTransactionExistenceCanc();
            }

            public void put(R5ordersImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        POLines {
            public Object get(R5ordersImpl obj) {
                return obj.getPOLines();
            }

            public void put(R5ordersImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(R5ordersImpl object);

        public abstract void put(R5ordersImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ORDCODE = AttributesEnum.OrdCode.index();
    public static final int ORDDESC = AttributesEnum.OrdDesc.index();
    public static final int ORDTYPE = AttributesEnum.OrdType.index();
    public static final int ORDRTYPE = AttributesEnum.OrdRtype.index();
    public static final int ORDSUPPLIER = AttributesEnum.OrdSupplier.index();
    public static final int ORDDATE = AttributesEnum.OrdDate.index();
    public static final int ORDDUE = AttributesEnum.OrdDue.index();
    public static final int ORDAPPROV = AttributesEnum.OrdApprov.index();
    public static final int ORDSTATUS = AttributesEnum.OrdStatus.index();
    public static final int ORDRSTATUS = AttributesEnum.OrdRstatus.index();
    public static final int ORDAUTH = AttributesEnum.OrdAuth.index();
    public static final int ORDDISCOUNT = AttributesEnum.OrdDiscount.index();
    public static final int ORDPRICE = AttributesEnum.OrdPrice.index();
    public static final int ORDCURR = AttributesEnum.OrdCurr.index();
    public static final int ORDEXCH = AttributesEnum.OrdExch.index();
    public static final int ORDORIGIN = AttributesEnum.OrdOrigin.index();
    public static final int ORDSTORE = AttributesEnum.OrdStore.index();
    public static final int ORDPRINTED = AttributesEnum.OrdPrinted.index();
    public static final int ORDBUYER = AttributesEnum.OrdBuyer.index();
    public static final int ORDREVISION = AttributesEnum.OrdRevision.index();
    public static final int ORDORG = AttributesEnum.OrdOrg.index();
    public static final int ORDSUPPLIERORG = AttributesEnum.OrdSupplierOrg.index();
    public static final int TORDCODE = AttributesEnum.tOrdCode.index();
    public static final int ITSISADF = AttributesEnum.ItsIsadf.index();
    public static final int TORDERLINESUM = AttributesEnum.tOrderlineSum.index();
    public static final int TPRICEEXTENDED = AttributesEnum.tPriceExtended.index();
    public static final int ITSCUSTFLD1 = AttributesEnum.ItsCustfld1.index();
    public static final int ITSDEPTCD = AttributesEnum.ItsDeptcd.index();
    public static final int ITSCUSTFLD2 = AttributesEnum.ItsCustfld2.index();
    public static final int TGRANDTOT = AttributesEnum.tGrandTot.index();
    public static final int ITSPROJCD = AttributesEnum.ItsProjcd.index();
    public static final int R5ACTIVITIES = AttributesEnum.R5activities.index();
    public static final int R5COMPANIES = AttributesEnum.R5companies.index();
    public static final int R5USERS = AttributesEnum.R5users.index();
    public static final int R5USERS1 = AttributesEnum.R5users1.index();
    public static final int R5ORDERLINES = AttributesEnum.R5orderlines.index();
    public static final int R5ADDETAILS = AttributesEnum.R5addetails.index();
    public static final int R5TRANSACTIONS = AttributesEnum.R5transactions.index();
    public static final int POCOMPANIES = AttributesEnum.POCompanies.index();
    public static final int POAPPROVERS = AttributesEnum.POApprovers.index();
    public static final int POTRANSACTIONEXISTENCE = AttributesEnum.POTransactionExistence.index();
    public static final int POTRANSACTIONEXISTENCECANC = AttributesEnum.POTransactionExistenceCanc.index();
    public static final int POLINES = AttributesEnum.POLines.index();

    /**
     * This is the default constructor (do not remove).
     */
    public R5ordersImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("its.mnr.mp5.eo.local.R5orders");
    }


    /**
     * Gets the attribute value for OrdCode, using the alias name OrdCode.
     * @return the value of OrdCode
     */
    public String getOrdCode() {
        return (String)getAttributeInternal(ORDCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrdCode.
     * @param value value to set the OrdCode
     */
    public void setOrdCode(String value) {
        setAttributeInternal(ORDCODE, value);
    }

    /**
     * Gets the attribute value for OrdDesc, using the alias name OrdDesc.
     * @return the value of OrdDesc
     */
    public String getOrdDesc() {
        return (String)getAttributeInternal(ORDDESC);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrdDesc.
     * @param value value to set the OrdDesc
     */
    public void setOrdDesc(String value) {
        setAttributeInternal(ORDDESC, value);
    }

    /**
     * Gets the attribute value for OrdType, using the alias name OrdType.
     * @return the value of OrdType
     */
    public String getOrdType() {
        return (String)getAttributeInternal(ORDTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrdType.
     * @param value value to set the OrdType
     */
    public void setOrdType(String value) {
        setAttributeInternal(ORDTYPE, value);
    }

    /**
     * Gets the attribute value for OrdRtype, using the alias name OrdRtype.
     * @return the value of OrdRtype
     */
    public String getOrdRtype() {
        return (String)getAttributeInternal(ORDRTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrdRtype.
     * @param value value to set the OrdRtype
     */
    public void setOrdRtype(String value) {
        setAttributeInternal(ORDRTYPE, value);
    }

    /**
     * Gets the attribute value for OrdSupplier, using the alias name OrdSupplier.
     * @return the value of OrdSupplier
     */
    public String getOrdSupplier() {
        return (String)getAttributeInternal(ORDSUPPLIER);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrdSupplier.
     * @param value value to set the OrdSupplier
     */
    public void setOrdSupplier(String value) {
        setAttributeInternal(ORDSUPPLIER, value);
    }

    /**
     * Gets the attribute value for OrdDate, using the alias name OrdDate.
     * @return the value of OrdDate
     */
    public Date getOrdDate() {
        return (Date)getAttributeInternal(ORDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrdDate.
     * @param value value to set the OrdDate
     */
    public void setOrdDate(Date value) {
        setAttributeInternal(ORDDATE, value);
    }

    /**
     * Gets the attribute value for OrdDue, using the alias name OrdDue.
     * @return the value of OrdDue
     */
    public Date getOrdDue() {
        return (Date)getAttributeInternal(ORDDUE);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrdDue.
     * @param value value to set the OrdDue
     */
    public void setOrdDue(Date value) {
        setAttributeInternal(ORDDUE, value);
    }

    /**
     * Gets the attribute value for OrdApprov, using the alias name OrdApprov.
     * @return the value of OrdApprov
     */
    public Date getOrdApprov() {
        return (Date)getAttributeInternal(ORDAPPROV);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrdApprov.
     * @param value value to set the OrdApprov
     */
    public void setOrdApprov(Date value) {
        setAttributeInternal(ORDAPPROV, value);
    }

    /**
     * Gets the attribute value for OrdStatus, using the alias name OrdStatus.
     * @return the value of OrdStatus
     */
    public String getOrdStatus() {
        return (String)getAttributeInternal(ORDSTATUS);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrdStatus.
     * @param value value to set the OrdStatus
     */
    public void setOrdStatus(String value) {
        setAttributeInternal(ORDSTATUS, value);
    }

    /**
     * Gets the attribute value for OrdRstatus, using the alias name OrdRstatus.
     * @return the value of OrdRstatus
     */
    public String getOrdRstatus() {
        return (String)getAttributeInternal(ORDRSTATUS);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrdRstatus.
     * @param value value to set the OrdRstatus
     */
    public void setOrdRstatus(String value) {
        setAttributeInternal(ORDRSTATUS, value);
    }

    /**
     * Gets the attribute value for OrdAuth, using the alias name OrdAuth.
     * @return the value of OrdAuth
     */
    public String getOrdAuth() {
        return (String)getAttributeInternal(ORDAUTH);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrdAuth.
     * @param value value to set the OrdAuth
     */
    public void setOrdAuth(String value) {
        setAttributeInternal(ORDAUTH, value);
    }

    /**
     * Gets the attribute value for OrdDiscount, using the alias name OrdDiscount.
     * @return the value of OrdDiscount
     */
    public Double getOrdDiscount() {
        return (Double)getAttributeInternal(ORDDISCOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrdDiscount.
     * @param value value to set the OrdDiscount
     */
    public void setOrdDiscount(Double value) {
        setAttributeInternal(ORDDISCOUNT, value);
    }

    /**
     * Gets the attribute value for OrdPrice, using the alias name OrdPrice.
     * @return the value of OrdPrice
     */
    public Double getOrdPrice() {
        return (Double)getAttributeInternal(ORDPRICE);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrdPrice.
     * @param value value to set the OrdPrice
     */
    public void setOrdPrice(Double value) {
        setAttributeInternal(ORDPRICE, value);
    }

    /**
     * Gets the attribute value for OrdCurr, using the alias name OrdCurr.
     * @return the value of OrdCurr
     */
    public String getOrdCurr() {
        return (String)getAttributeInternal(ORDCURR);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrdCurr.
     * @param value value to set the OrdCurr
     */
    public void setOrdCurr(String value) {
        setAttributeInternal(ORDCURR, value);
    }

    /**
     * Gets the attribute value for OrdExch, using the alias name OrdExch.
     * @return the value of OrdExch
     */
    public Double getOrdExch() {
        return (Double)getAttributeInternal(ORDEXCH);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrdExch.
     * @param value value to set the OrdExch
     */
    public void setOrdExch(Double value) {
        setAttributeInternal(ORDEXCH, value);
    }

    /**
     * Gets the attribute value for OrdOrigin, using the alias name OrdOrigin.
     * @return the value of OrdOrigin
     */
    public String getOrdOrigin() {
        return (String)getAttributeInternal(ORDORIGIN);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrdOrigin.
     * @param value value to set the OrdOrigin
     */
    public void setOrdOrigin(String value) {
        setAttributeInternal(ORDORIGIN, value);
    }

    /**
     * Gets the attribute value for OrdStore, using the alias name OrdStore.
     * @return the value of OrdStore
     */
    public String getOrdStore() {
        return (String)getAttributeInternal(ORDSTORE);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrdStore.
     * @param value value to set the OrdStore
     */
    public void setOrdStore(String value) {
        setAttributeInternal(ORDSTORE, value);
    }

    /**
     * Gets the attribute value for OrdPrinted, using the alias name OrdPrinted.
     * @return the value of OrdPrinted
     */
    public String getOrdPrinted() {
        return (String)getAttributeInternal(ORDPRINTED);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrdPrinted.
     * @param value value to set the OrdPrinted
     */
    public void setOrdPrinted(String value) {
        setAttributeInternal(ORDPRINTED, value);
    }

    /**
     * Gets the attribute value for OrdBuyer, using the alias name OrdBuyer.
     * @return the value of OrdBuyer
     */
    public String getOrdBuyer() {
        return (String)getAttributeInternal(ORDBUYER);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrdBuyer.
     * @param value value to set the OrdBuyer
     */
    public void setOrdBuyer(String value) {
        setAttributeInternal(ORDBUYER, value);
    }

    /**
     * Gets the attribute value for OrdRevision, using the alias name OrdRevision.
     * @return the value of OrdRevision
     */
    public Integer getOrdRevision() {
        return (Integer)getAttributeInternal(ORDREVISION);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrdRevision.
     * @param value value to set the OrdRevision
     */
    public void setOrdRevision(Integer value) {
        setAttributeInternal(ORDREVISION, value);
    }

    /**
     * Gets the attribute value for OrdOrg, using the alias name OrdOrg.
     * @return the value of OrdOrg
     */
    public String getOrdOrg() {
        return (String)getAttributeInternal(ORDORG);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrdOrg.
     * @param value value to set the OrdOrg
     */
    public void setOrdOrg(String value) {
        setAttributeInternal(ORDORG, value);
    }

    /**
     * Gets the attribute value for OrdSupplierOrg, using the alias name OrdSupplierOrg.
     * @return the value of OrdSupplierOrg
     */
    public String getOrdSupplierOrg() {
        return (String)getAttributeInternal(ORDSUPPLIERORG);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrdSupplierOrg.
     * @param value value to set the OrdSupplierOrg
     */
    public void setOrdSupplierOrg(String value) {
        setAttributeInternal(ORDSUPPLIERORG, value);
    }

    /**
     * Gets the attribute value for tOrdCode, using the alias name tOrdCode.
     * @return the value of tOrdCode
     */
    public String gettOrdCode() {
        return (String)getAttributeInternal(TORDCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for tOrdCode.
     * @param value value to set the tOrdCode
     */
    public void settOrdCode(String value) {
        setAttributeInternal(TORDCODE, value);
    }


    /**
     * Gets the attribute value for ItsIsadf, using the alias name ItsIsadf.
     * @return the value of ItsIsadf
     */
    public String getItsIsadf() {
        return (String)getAttributeInternal(ITSISADF);
    }


    /**
     * Gets the attribute value for tOrderlineSum, using the alias name tOrderlineSum.
     * @return the value of tOrderlineSum
     */
    public Double gettOrderlineSum() {
        return (Double)getAttributeInternal(TORDERLINESUM);
    }

    /**
     * Sets <code>value</code> as the attribute value for tOrderlineSum.
     * @param value value to set the tOrderlineSum
     */
    public void settOrderlineSum(Double value) {
        setAttributeInternal(TORDERLINESUM, value);
    }

    /**
     * Gets the attribute value for tPriceExtended, using the alias name tPriceExtended.
     * @return the value of tPriceExtended
     */
    public Double gettPriceExtended() {
        return (Double)getAttributeInternal(TPRICEEXTENDED);
    }

    /**
     * Sets <code>value</code> as the attribute value for tPriceExtended.
     * @param value value to set the tPriceExtended
     */
    public void settPriceExtended(Double value) {
        setAttributeInternal(TPRICEEXTENDED, value);
    }

    /**
     * Gets the attribute value for ItsCustfld1, using the alias name ItsCustfld1.
     * @return the value of ItsCustfld1
     */
    public String getItsCustfld1() {
        return (String)getAttributeInternal(ITSCUSTFLD1);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItsCustfld1.
     * @param value value to set the ItsCustfld1
     */
    public void setItsCustfld1(String value) {
       // System.out.println("Inside setItsCustfld1 value: "+value);
        if((value!=null)&&(value!="")){
            setAttributeInternal(ITSCUSTFLD1, value.toUpperCase());
        }
        else
            setAttributeInternal(ITSCUSTFLD1, value);
    }

    /**
     * Gets the attribute value for ItsDeptcd, using the alias name ItsDeptcd.
     * @return the value of ItsDeptcd
     */
    public String getItsDeptcd() {
        return (String)getAttributeInternal(ITSDEPTCD);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItsDeptcd.
     * @param value value to set the ItsDeptcd
     */
    public void setItsDeptcd(String value) {
        setAttributeInternal(ITSDEPTCD, value);
    }

    /**
     * Gets the attribute value for ItsCustfld2, using the alias name ItsCustfld2.
     * @return the value of ItsCustfld2
     */
    public String getItsCustfld2() {
        return (String)getAttributeInternal(ITSCUSTFLD2);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItsCustfld2.
     * @param value value to set the ItsCustfld2
     */
    public void setItsCustfld2(String value) {
        setAttributeInternal(ITSCUSTFLD2, value);
    }

    /**
     * Gets the attribute value for tGrandTot, using the alias name tGrandTot.
     * @return the value of tGrandTot
     */
    public Double gettGrandTot() {
        return (Double)getAttributeInternal(TGRANDTOT);
    }

    /**
     * Sets <code>value</code> as the attribute value for tGrandTot.
     * @param value value to set the tGrandTot
     */
    public void settGrandTot(Double value) {
        setAttributeInternal(TGRANDTOT, value);
    }

    /**
     * Gets the attribute value for ItsProjcd, using the alias name ItsProjcd.
     * @return the value of ItsProjcd
     */
    public String getItsProjcd() {
        return (String) getAttributeInternal(ITSPROJCD);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItsProjcd.
     * @param value value to set the ItsProjcd
     */
    public void setItsProjcd(String value) {
        setAttributeInternal(ITSPROJCD, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }


    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getR5activities() {
        return (RowIterator)getAttributeInternal(R5ACTIVITIES);
    }

    /**
     * @return the associated entity its.mnr.mp5.baseclass.ExtendedEntityImpl.
     */
    public ExtendedEntityImpl getR5companies() {
        return (ExtendedEntityImpl)getAttributeInternal(R5COMPANIES);
    }

    /**
     * Sets <code>value</code> as the associated entity its.mnr.mp5.baseclass.ExtendedEntityImpl.
     */
    public void setR5companies(ExtendedEntityImpl value) {
        setAttributeInternal(R5COMPANIES, value);
    }

    /**
     * @return the associated entity its.mnr.mp5.baseclass.ExtendedEntityImpl.
     */
    public ExtendedEntityImpl getR5users() {
        return (ExtendedEntityImpl)getAttributeInternal(R5USERS);
    }

    /**
     * Sets <code>value</code> as the associated entity its.mnr.mp5.baseclass.ExtendedEntityImpl.
     */
    public void setR5users(ExtendedEntityImpl value) {
        setAttributeInternal(R5USERS, value);
    }

    /**
     * @return the associated entity its.mnr.mp5.baseclass.ExtendedEntityImpl.
     */
    public ExtendedEntityImpl getR5users1() {
        return (ExtendedEntityImpl)getAttributeInternal(R5USERS1);
    }

    /**
     * Sets <code>value</code> as the associated entity its.mnr.mp5.baseclass.ExtendedEntityImpl.
     */
    public void setR5users1(ExtendedEntityImpl value) {
        setAttributeInternal(R5USERS1, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getR5orderlines() {
        return (RowIterator)getAttributeInternal(R5ORDERLINES);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getR5addetails() {
        return (RowIterator)getAttributeInternal(R5ADDETAILS);
    }


    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getR5transactions() {
        return (RowIterator)getAttributeInternal(R5TRANSACTIONS);
    }

    /**
     * Uses the link POrdersCompaniesLink to return rows of POrdersView
     */
    public ExtendedViewRowImpl getPOCompanies() {
        return (ExtendedViewRowImpl)getAttributeInternal(POCOMPANIES);
    }

    /**
     * Gets the view accessor <code>RowSet</code> POApprovers.
     */
    public RowSet getPOApprovers() {
        return (RowSet)getAttributeInternal(POAPPROVERS);
    }

    /**
     * Gets the view accessor <code>RowSet</code> POTransactionExistence.
     */
    public RowSet getPOTransactionExistence() {
        return (RowSet)getAttributeInternal(POTRANSACTIONEXISTENCE);
    }

    /**
     * Gets the view accessor <code>RowSet</code> POTransactionExistenceCanc.
     */
    public RowSet getPOTransactionExistenceCanc() {
        return (RowSet)getAttributeInternal(POTRANSACTIONEXISTENCECANC);
    }

    /**
     * Gets the view accessor <code>RowSet</code> POLines.
     */
    public RowSet getPOLines() {
        return (RowSet)getAttributeInternal(POLINES);
    }

    /**
     * @param ordCode key constituent
     * @param ordOrg key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String ordCode, String ordOrg) {
        return new Key(new Object[] { ordCode, ordOrg });
    }


}
