package its.mnr.mp5.eo.local;

import its.mnr.mp5.baseclass.ExtendedEntityImpl;

import java.math.BigDecimal;

import java.sql.Timestamp;

import java.text.ParseException;
import java.text.SimpleDateFormat;

import java.util.Date;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Sep 01 15:24:31 PDT 2021
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MrltInvoicexmlfeedImpl extends ExtendedEntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Invnum {
            public Object get(MrltInvoicexmlfeedImpl obj) {
                return obj.getInvnum();
            }

            public void put(MrltInvoicexmlfeedImpl obj, Object value) {
                obj.setInvnum((BigDecimal) value);
            }
        },
        Isprocessed {
            public Object get(MrltInvoicexmlfeedImpl obj) {
                return obj.getIsprocessed();
            }

            public void put(MrltInvoicexmlfeedImpl obj, Object value) {
                obj.setIsprocessed((String) value);
            }
        },
        Processeddate {
            public Object get(MrltInvoicexmlfeedImpl obj) {
                return obj.getProcesseddate();
            }

            public void put(MrltInvoicexmlfeedImpl obj, Object value) {
                obj.setProcesseddate((Timestamp) value);
            }
        };
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(MrltInvoicexmlfeedImpl object);

        public abstract void put(MrltInvoicexmlfeedImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int INVNUM = AttributesEnum.Invnum.index();
    public static final int ISPROCESSED = AttributesEnum.Isprocessed.index();
    public static final int PROCESSEDDATE = AttributesEnum.Processeddate.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MrltInvoicexmlfeedImpl() {
    }

    /**
     * Gets the attribute value for Invnum, using the alias name Invnum.
     * @return the value of Invnum
     */
    public BigDecimal getInvnum() {
        return (BigDecimal) getAttributeInternal(INVNUM);
    }

    /**
     * Sets <code>value</code> as the attribute value for Invnum.
     * @param value value to set the Invnum
     */
    public void setInvnum(BigDecimal value) {
        setAttributeInternal(INVNUM, value);
    }

    /**
     * Gets the attribute value for Isprocessed, using the alias name Isprocessed.
     * @return the value of Isprocessed
     */
    public String getIsprocessed() {
        return (String) getAttributeInternal(ISPROCESSED);
    }

    /**
     * Sets <code>value</code> as the attribute value for Isprocessed.
     * @param value value to set the Isprocessed
     */
    public void setIsprocessed(String value) {
        setAttributeInternal(ISPROCESSED, value);
    }

    /**
     * Gets the attribute value for Processeddate, using the alias name Processeddate.
     * @return the value of Processeddate
     */
    public Timestamp getProcesseddate() {
        return (Timestamp) getAttributeInternal(PROCESSEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Processeddate.
     * @param value value to set the Processeddate
     */
    public void setProcesseddate(Timestamp value) {
        setAttributeInternal(PROCESSEDDATE, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @param invnum key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal invnum) {
        return new Key(new Object[] { invnum });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("its.mnr.mp5.eo.local.MrltInvoicexmlfeed");
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        //&& isAttributeChanged(ISPROCESSED)
        if (operation == DML_UPDATE ) {
            System.out.println("Inside MrltInvoicexmlfeedImpl get: "+getIsprocessed());
            try {
                SimpleDateFormat formatter = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a");
                String str_date = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a").format(new Date());
                Date date;
                date = formatter.parse(str_date);
                java.sql.Timestamp timeStampDate = new Timestamp(date.getTime());
                System.out.println("Inside MrltInvoicexmlfeedImpl DML_UPDATE: timeStampDate: "+timeStampDate);
                 setProcesseddate(timeStampDate);
            } catch (ParseException f) {
                System.out.println("Inside MrltInvoicexmlfeedImpl DML_UPDATE catch f: "+f.getMessage());
            }
            

            
        }
        super.doDML(operation, e);
    }
}

