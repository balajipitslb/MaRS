package its.mnr.mp5.eo.master;

import its.mnr.mp5.baseclass.ExtendedEntityImpl;

import oracle.jbo.Key;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Jul 24 07:22:21 PDT 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MrltTaskrepairImpl extends ExtendedEntityImpl {


    protected void validateEntity() {
            // invalidate TaskDamage whenever a new Repair is
            // added or when the Default value of an existing
            // Repair is changed to enforce the rule that one default Repair code 
            // exists for the Damage code
            if ((getEntityState() == STATUS_NEW) ||
                (getEntityState() == STATUS_MODIFIED && ((isAttributeChanged(TASKREPDFLT))))) {
                getMrltTaskdamage().invalidateMe();
            }
            super.validateEntity();
        }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Taskrepairid {
            public Object get(MrltTaskrepairImpl obj) {
                return obj.getTaskrepairid();
            }

            public void put(MrltTaskrepairImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Taskdamageid {
            public Object get(MrltTaskrepairImpl obj) {
                return obj.getTaskdamageid();
            }

            public void put(MrltTaskrepairImpl obj, Object value) {
                obj.setTaskdamageid((String)value);
            }
        }
        ,
        Taskrepdescription {
            public Object get(MrltTaskrepairImpl obj) {
                return obj.getTaskrepdescription();
            }

            public void put(MrltTaskrepairImpl obj, Object value) {
                obj.setTaskrepdescription((String)value);
            }
        }
        ,
        Taskrepcode {
            public Object get(MrltTaskrepairImpl obj) {
                return obj.getTaskrepcode();
            }

            public void put(MrltTaskrepairImpl obj, Object value) {
                obj.setTaskrepcode((String)value);
            }
        }
        ,
        Taskrepdflt {
            public Object get(MrltTaskrepairImpl obj) {
                return obj.getTaskrepdflt();
            }

            public void put(MrltTaskrepairImpl obj, Object value) {
                obj.setTaskrepdflt((String)value);
            }
        }
        ,
        TaskRepDamCodeId {
            public Object get(MrltTaskrepairImpl obj) {
                return obj.getTaskRepDamCodeId();
            }

            public void put(MrltTaskrepairImpl obj, Object value) {
                obj.setTaskRepDamCodeId((String)value);
            }
        }
        ,
        MrltTaskdamage {
            public Object get(MrltTaskrepairImpl obj) {
                return obj.getMrltTaskdamage();
            }

            public void put(MrltTaskrepairImpl obj, Object value) {
                obj.setMrltTaskdamage((MrltTaskdamageImpl)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(MrltTaskrepairImpl object);

        public abstract void put(MrltTaskrepairImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int TASKREPAIRID = AttributesEnum.Taskrepairid.index();
    public static final int TASKDAMAGEID = AttributesEnum.Taskdamageid.index();
    public static final int TASKREPDESCRIPTION = AttributesEnum.Taskrepdescription.index();
    public static final int TASKREPCODE = AttributesEnum.Taskrepcode.index();
    public static final int TASKREPDFLT = AttributesEnum.Taskrepdflt.index();
    public static final int TASKREPDAMCODEID = AttributesEnum.TaskRepDamCodeId.index();
    public static final int MRLTTASKDAMAGE = AttributesEnum.MrltTaskdamage.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MrltTaskrepairImpl() {
    }

    /**
     * Gets the attribute value for Taskrepairid, using the alias name Taskrepairid.
     * @return the value of Taskrepairid
     */
    public String getTaskrepairid() {
        return (String)getAttributeInternal(TASKREPAIRID);
    }

    /**
     * Gets the attribute value for Taskdamageid, using the alias name Taskdamageid.
     * @return the value of Taskdamageid
     */
    public String getTaskdamageid() {
        return (String)getAttributeInternal(TASKDAMAGEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Taskdamageid.
     * @param value value to set the Taskdamageid
     */
    public void setTaskdamageid(String value) {
        setAttributeInternal(TASKDAMAGEID, value);
    }

    /**
     * Gets the attribute value for Taskrepdescription, using the alias name Taskrepdescription.
     * @return the value of Taskrepdescription
     */
    public String getTaskrepdescription() {
        return (String)getAttributeInternal(TASKREPDESCRIPTION);
    }

    /**
     * Sets <code>value</code> as the attribute value for Taskrepdescription.
     * @param value value to set the Taskrepdescription
     */
    public void setTaskrepdescription(String value) {
        setAttributeInternal(TASKREPDESCRIPTION, value);
    }

    /**
     * Gets the attribute value for Taskrepcode, using the alias name Taskrepcode.
     * @return the value of Taskrepcode
     */
    public String getTaskrepcode() {
        return (String)getAttributeInternal(TASKREPCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Taskrepcode.
     * @param value value to set the Taskrepcode
     */
    public void setTaskrepcode(String value) {
        setAttributeInternal(TASKREPCODE, value);
    }

    /**
     * Gets the attribute value for Taskrepdflt, using the alias name Taskrepdflt.
     * @return the value of Taskrepdflt
     */
    public String getTaskrepdflt() {
        return (String)getAttributeInternal(TASKREPDFLT);
    }

    /**
     * Sets <code>value</code> as the attribute value for Taskrepdflt.
     * @param value value to set the Taskrepdflt
     */
    public void setTaskrepdflt(String value) {
        setAttributeInternal(TASKREPDFLT, value);
    }

    /**
     * Gets the attribute value for TaskRepDamCodeId, using the alias name TaskRepDamCodeId.
     * @return the value of TaskRepDamCodeId
     */
    public String getTaskRepDamCodeId() {
        return (String)getAttributeInternal(TASKREPDAMCODEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for TaskRepDamCodeId.
     * @param value value to set the TaskRepDamCodeId
     */
    public void setTaskRepDamCodeId(String value) {
        setAttributeInternal(TASKREPDAMCODEID, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity MrltTaskdamageImpl.
     */
    public MrltTaskdamageImpl getMrltTaskdamage() {
        return (MrltTaskdamageImpl)getAttributeInternal(MRLTTASKDAMAGE);
    }

    /**
     * Sets <code>value</code> as the associated entity MrltTaskdamageImpl.
     */
    public void setMrltTaskdamage(MrltTaskdamageImpl value) {
        setAttributeInternal(MRLTTASKDAMAGE, value);
    }

    /**
     * @param taskrepairid key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String taskrepairid) {
        return new Key(new Object[]{taskrepairid});
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("its.mnr.mp5.eo.master.MrltTaskrepair");
    }

}
