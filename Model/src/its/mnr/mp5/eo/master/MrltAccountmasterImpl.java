package its.mnr.mp5.eo.master;

import its.mnr.mp5.baseclass.ExtendedEntityImpl;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.VariableValueManager;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Jul 03 13:26:19 PDT 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MrltAccountmasterImpl extends ExtendedEntityImpl {
    /**
     * Validation method for Billtype.
     */
    public boolean validateBilltype(String billtype) {
        //System.out.println("Inside validateBilltype()");
        //false returns validition error
        boolean ret = true;

        //System.out.println("C(Completed) -> CRV(Clerk Review)");
        //check View Object for Estimate existence.
        RowSet rs = this.getUnfinishedWOExistence();
        VariableValueManager vm = rs.ensureVariableManager();
        vm.setVariableValue("WOAcctNum", getAcctnum());
        rs.setForwardOnly(true);
        rs.executeQuery();
        Row rw = rs.first();
        if (rw != null) {
            //unfinished WO exists
            ret = false;
        }
        //System.out.println("ret: " + ret);
        return ret;
    }

    /**
     * Validation method for Amstractive.
     */
    public boolean validateActive(String amstractive) {
        //System.out.println("Inside validateActive()");
        //false returns validition error
        boolean ret = true;
        
        //System.out.println("C(Completed) -> CRV(Clerk Review)");
        //check View Object for Estimate existence.
        RowSet rs = this.getUnfinishedWOExistence();
        VariableValueManager vm = rs.ensureVariableManager();
        vm.setVariableValue("WOAcctNum", getAcctnum());
        rs.setForwardOnly(true);
        rs.executeQuery();
        Row rw = rs.first();
        if (rw != null) {
            //unfinished WO exists
            ret = false;
        }
        //System.out.println("ret: " + ret);
        return ret;
    }

    /**
     * Validation method for Parttax.
     */
    public boolean validateParttax(String parttax) {
        //System.out.println("Inside validateParttax()");
        //false returns validition error
        boolean ret = true;
        
        //System.out.println("C(Completed) -> CRV(Clerk Review)");
        //check View Object for Estimate existence.
        RowSet rs = this.getUnfinishedWOExistence();
        VariableValueManager vm = rs.ensureVariableManager();
        vm.setVariableValue("WOAcctNum", getAcctnum());
        rs.setForwardOnly(true);
        rs.executeQuery();
        Row rw = rs.first();
        if (rw != null) {
            //unfinished WO exists
            ret = false;
        }
        //System.out.println("ret: " + ret);
        return ret;
    }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Acctnum {
            public Object get(MrltAccountmasterImpl obj) {
                return obj.getAcctnum();
            }

            public void put(MrltAccountmasterImpl obj, Object value) {
                obj.setAcctnum((String)value);
            }
        }
        ,
        Accountnm {
            public Object get(MrltAccountmasterImpl obj) {
                return obj.getAccountnm();
            }

            public void put(MrltAccountmasterImpl obj, Object value) {
                obj.setAccountnm((String)value);
            }
        }
        ,
        Accountnmlong {
            public Object get(MrltAccountmasterImpl obj) {
                return obj.getAccountnmlong();
            }

            public void put(MrltAccountmasterImpl obj, Object value) {
                obj.setAccountnmlong((String)value);
            }
        }
        ,
        Locode {
            public Object get(MrltAccountmasterImpl obj) {
                return obj.getLocode();
            }

            public void put(MrltAccountmasterImpl obj, Object value) {
                obj.setLocode((String)value);
            }
        }
        ,
        Billtype {
            public Object get(MrltAccountmasterImpl obj) {
                return obj.getBilltype();
            }

            public void put(MrltAccountmasterImpl obj, Object value) {
                obj.setBilltype((String)value);
            }
        }
        ,
        Amstractive {
            public Object get(MrltAccountmasterImpl obj) {
                return obj.getAmstractive();
            }

            public void put(MrltAccountmasterImpl obj, Object value) {
                obj.setAmstractive((String)value);
            }
        }
        ,
        Estimate {
            public Object get(MrltAccountmasterImpl obj) {
                return obj.getEstimate();
            }

            public void put(MrltAccountmasterImpl obj, Object value) {
                obj.setEstimate((String)value);
            }
        }
        ,
        Over {
            public Object get(MrltAccountmasterImpl obj) {
                return obj.getOver();
            }

            public void put(MrltAccountmasterImpl obj, Object value) {
                obj.setOver((Double)value);
            }
        }
        ,
        Overuom {
            public Object get(MrltAccountmasterImpl obj) {
                return obj.getOveruom();
            }

            public void put(MrltAccountmasterImpl obj, Object value) {
                obj.setOveruom((String)value);
            }
        }
        ,
        Invrej {
            public Object get(MrltAccountmasterImpl obj) {
                return obj.getInvrej();
            }

            public void put(MrltAccountmasterImpl obj, Object value) {
                obj.setInvrej((String)value);
            }
        }
        ,
        Parttax {
            public Object get(MrltAccountmasterImpl obj) {
                return obj.getParttax();
            }

            public void put(MrltAccountmasterImpl obj, Object value) {
                obj.setParttax((String)value);
            }
        }
        ,
        Estcmpltn {
            public Object get(MrltAccountmasterImpl obj) {
                return obj.getEstcmpltn();
            }

            public void put(MrltAccountmasterImpl obj, Object value) {
                obj.setEstcmpltn((String)value);
            }
        }
        ,
        MrltAccountrate {
            public Object get(MrltAccountmasterImpl obj) {
                return obj.getMrltAccountrate();
            }

            public void put(MrltAccountmasterImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        UnfinishedWOExistence {
            public Object get(MrltAccountmasterImpl obj) {
                return obj.getUnfinishedWOExistence();
            }

            public void put(MrltAccountmasterImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(MrltAccountmasterImpl object);

        public abstract void put(MrltAccountmasterImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ACCTNUM = AttributesEnum.Acctnum.index();
    public static final int ACCOUNTNM = AttributesEnum.Accountnm.index();
    public static final int ACCOUNTNMLONG = AttributesEnum.Accountnmlong.index();
    public static final int LOCODE = AttributesEnum.Locode.index();
    public static final int BILLTYPE = AttributesEnum.Billtype.index();
    public static final int AMSTRACTIVE = AttributesEnum.Amstractive.index();
    public static final int ESTIMATE = AttributesEnum.Estimate.index();
    public static final int OVER = AttributesEnum.Over.index();
    public static final int OVERUOM = AttributesEnum.Overuom.index();
    public static final int INVREJ = AttributesEnum.Invrej.index();
    public static final int PARTTAX = AttributesEnum.Parttax.index();
    public static final int ESTCMPLTN = AttributesEnum.Estcmpltn.index();
    public static final int MRLTACCOUNTRATE = AttributesEnum.MrltAccountrate.index();
    public static final int UNFINISHEDWOEXISTENCE = AttributesEnum.UnfinishedWOExistence.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MrltAccountmasterImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("its.mnr.mp5.eo.master.MrltAccountmaster");
    }

    /**
     * Gets the attribute value for Acctnum, using the alias name Acctnum.
     * @return the value of Acctnum
     */
    public String getAcctnum() {
        return (String)getAttributeInternal(ACCTNUM);
    }

    /**
     * Sets <code>value</code> as the attribute value for Acctnum.
     * @param value value to set the Acctnum
     */
    public void setAcctnum(String value) {
        setAttributeInternal(ACCTNUM, value);
    }

    /**
     * Gets the attribute value for Accountnm, using the alias name Accountnm.
     * @return the value of Accountnm
     */
    public String getAccountnm() {
        return (String)getAttributeInternal(ACCOUNTNM);
    }

    /**
     * Sets <code>value</code> as the attribute value for Accountnm.
     * @param value value to set the Accountnm
     */
    public void setAccountnm(String value) {
        setAttributeInternal(ACCOUNTNM, value);
    }

    /**
     * Gets the attribute value for Accountnmlong, using the alias name Accountnmlong.
     * @return the value of Accountnmlong
     */
    public String getAccountnmlong() {
        return (String)getAttributeInternal(ACCOUNTNMLONG);
    }

    /**
     * Sets <code>value</code> as the attribute value for Accountnmlong.
     * @param value value to set the Accountnmlong
     */
    public void setAccountnmlong(String value) {
        setAttributeInternal(ACCOUNTNMLONG, value);
    }

    /**
     * Gets the attribute value for Locode, using the alias name Locode.
     * @return the value of Locode
     */
    public String getLocode() {
        return (String)getAttributeInternal(LOCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Locode.
     * @param value value to set the Locode
     */
    public void setLocode(String value) {
        setAttributeInternal(LOCODE, value);
    }

    /**
     * Gets the attribute value for Billtype, using the alias name Billtype.
     * @return the value of Billtype
     */
    public String getBilltype() {
        return (String)getAttributeInternal(BILLTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Billtype.
     * @param value value to set the Billtype
     */
    public void setBilltype(String value) {
        setAttributeInternal(BILLTYPE, value);
    }

    /**
     * Gets the attribute value for Amstractive, using the alias name Amstractive.
     * @return the value of Amstractive
     */
    public String getAmstractive() {
        return (String)getAttributeInternal(AMSTRACTIVE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Amstractive.
     * @param value value to set the Amstractive
     */
    public void setAmstractive(String value) {
        setAttributeInternal(AMSTRACTIVE, value);
    }

    /**
     * Gets the attribute value for Estimate, using the alias name Estimate.
     * @return the value of Estimate
     */
    public String getEstimate() {
        return (String)getAttributeInternal(ESTIMATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Estimate.
     * @param value value to set the Estimate
     */
    public void setEstimate(String value) {
        setAttributeInternal(ESTIMATE, value);
    }

    /**
     * Gets the attribute value for Over, using the alias name Over.
     * @return the value of Over
     */
    public Double getOver() {
        return (Double)getAttributeInternal(OVER);
    }

    /**
     * Sets <code>value</code> as the attribute value for Over.
     * @param value value to set the Over
     */
    public void setOver(Double value) {
        setAttributeInternal(OVER, value);
    }

    /**
     * Gets the attribute value for Overuom, using the alias name Overuom.
     * @return the value of Overuom
     */
    public String getOveruom() {
        return (String)getAttributeInternal(OVERUOM);
    }

    /**
     * Sets <code>value</code> as the attribute value for Overuom.
     * @param value value to set the Overuom
     */
    public void setOveruom(String value) {
        setAttributeInternal(OVERUOM, value);
    }

    /**
     * Gets the attribute value for Invrej, using the alias name Invrej.
     * @return the value of Invrej
     */
    public String getInvrej() {
        return (String)getAttributeInternal(INVREJ);
    }

    /**
     * Sets <code>value</code> as the attribute value for Invrej.
     * @param value value to set the Invrej
     */
    public void setInvrej(String value) {
        setAttributeInternal(INVREJ, value);
    }

    /**
     * Gets the attribute value for Parttax, using the alias name Parttax.
     * @return the value of Parttax
     */
    public String getParttax() {
        return (String)getAttributeInternal(PARTTAX);
    }

    /**
     * Sets <code>value</code> as the attribute value for Parttax.
     * @param value value to set the Parttax
     */
    public void setParttax(String value) {
        setAttributeInternal(PARTTAX, value);
    }

    /**
     * Gets the attribute value for Estcmpltn, using the alias name Estcmpltn.
     * @return the value of Estcmpltn
     */
    public String getEstcmpltn() {
        return (String)getAttributeInternal(ESTCMPLTN);
    }

    /**
     * Sets <code>value</code> as the attribute value for Estcmpltn.
     * @param value value to set the Estcmpltn
     */
    public void setEstcmpltn(String value) {
        setAttributeInternal(ESTCMPLTN, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getMrltAccountrate() {
        return (RowIterator)getAttributeInternal(MRLTACCOUNTRATE);
    }

    /**
     * Gets the view accessor <code>RowSet</code> UnfinishedWOExistence.
     */
    public RowSet getUnfinishedWOExistence() {
        return (RowSet)getAttributeInternal(UNFINISHEDWOEXISTENCE);
    }

    /**
     * @param acctnum key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String acctnum) {
        return new Key(new Object[]{acctnum});
    }


}
