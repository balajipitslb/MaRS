package its.mnr.mp5.eo.master;

import its.mnr.mp5.baseclass.ExtendedEntityImpl;

import oracle.jbo.Key;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Jul 24 09:49:53 PDT 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MrltTasklocationImpl extends ExtendedEntityImpl {
    
    protected void validateEntity() {
            // invalidate Task whenever a new Location is
            // added or when the Default value of an existing
            // Location is changed to enforce the rule that one default Location code 
            // exists for the Task
            if ((getEntityState() == STATUS_NEW) ||
                (getEntityState() == STATUS_MODIFIED && ((isAttributeChanged(TASKLOCDFLT))))) {
                getMrltTask().invalidateMe();
            }
            super.validateEntity();
        }
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Tasklocationid {
            public Object get(MrltTasklocationImpl obj) {
                return obj.getTasklocationid();
            }

            public void put(MrltTasklocationImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Taskid {
            public Object get(MrltTasklocationImpl obj) {
                return obj.getTaskid();
            }

            public void put(MrltTasklocationImpl obj, Object value) {
                obj.setTaskid((String)value);
            }
        }
        ,
        Taskloccode {
            public Object get(MrltTasklocationImpl obj) {
                return obj.getTaskloccode();
            }

            public void put(MrltTasklocationImpl obj, Object value) {
                obj.setTaskloccode((String)value);
            }
        }
        ,
        Tasklocdescription {
            public Object get(MrltTasklocationImpl obj) {
                return obj.getTasklocdescription();
            }

            public void put(MrltTasklocationImpl obj, Object value) {
                obj.setTasklocdescription((String)value);
            }
        }
        ,
        Tasklocdflt {
            public Object get(MrltTasklocationImpl obj) {
                return obj.getTasklocdflt();
            }

            public void put(MrltTasklocationImpl obj, Object value) {
                obj.setTasklocdflt((String)value);
            }
        }
        ,
        TaskLocCompCodeId {
            public Object get(MrltTasklocationImpl obj) {
                return obj.getTaskLocCompCodeId();
            }

            public void put(MrltTasklocationImpl obj, Object value) {
                obj.setTaskLocCompCodeId((String)value);
            }
        }
        ,
        MrltTask {
            public Object get(MrltTasklocationImpl obj) {
                return obj.getMrltTask();
            }

            public void put(MrltTasklocationImpl obj, Object value) {
                obj.setMrltTask((MrltTaskImpl)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(MrltTasklocationImpl object);

        public abstract void put(MrltTasklocationImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int TASKLOCATIONID = AttributesEnum.Tasklocationid.index();
    public static final int TASKID = AttributesEnum.Taskid.index();
    public static final int TASKLOCCODE = AttributesEnum.Taskloccode.index();
    public static final int TASKLOCDESCRIPTION = AttributesEnum.Tasklocdescription.index();
    public static final int TASKLOCDFLT = AttributesEnum.Tasklocdflt.index();
    public static final int TASKLOCCOMPCODEID = AttributesEnum.TaskLocCompCodeId.index();
    public static final int MRLTTASK = AttributesEnum.MrltTask.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MrltTasklocationImpl() {
    }

    /**
     * Gets the attribute value for Tasklocationid, using the alias name Tasklocationid.
     * @return the value of Tasklocationid
     */
    public String getTasklocationid() {
        return (String)getAttributeInternal(TASKLOCATIONID);
    }

    /**
     * Gets the attribute value for Taskid, using the alias name Taskid.
     * @return the value of Taskid
     */
    public String getTaskid() {
        return (String)getAttributeInternal(TASKID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Taskid.
     * @param value value to set the Taskid
     */
    public void setTaskid(String value) {
        setAttributeInternal(TASKID, value);
    }

    /**
     * Gets the attribute value for Taskloccode, using the alias name Taskloccode.
     * @return the value of Taskloccode
     */
    public String getTaskloccode() {
        return (String)getAttributeInternal(TASKLOCCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Taskloccode.
     * @param value value to set the Taskloccode
     */
    public void setTaskloccode(String value) {
        setAttributeInternal(TASKLOCCODE, value);
    }

    /**
     * Gets the attribute value for Tasklocdescription, using the alias name Tasklocdescription.
     * @return the value of Tasklocdescription
     */
    public String getTasklocdescription() {
        return (String)getAttributeInternal(TASKLOCDESCRIPTION);
    }

    /**
     * Sets <code>value</code> as the attribute value for Tasklocdescription.
     * @param value value to set the Tasklocdescription
     */
    public void setTasklocdescription(String value) {
        setAttributeInternal(TASKLOCDESCRIPTION, value);
    }

    /**
     * Gets the attribute value for Tasklocdflt, using the alias name Tasklocdflt.
     * @return the value of Tasklocdflt
     */
    public String getTasklocdflt() {
        return (String)getAttributeInternal(TASKLOCDFLT);
    }

    /**
     * Sets <code>value</code> as the attribute value for Tasklocdflt.
     * @param value value to set the Tasklocdflt
     */
    public void setTasklocdflt(String value) {
        setAttributeInternal(TASKLOCDFLT, value);
    }

    /**
     * Gets the attribute value for TaskLocCompCodeId, using the alias name TaskLocCompCodeId.
     * @return the value of TaskLocCompCodeId
     */
    public String getTaskLocCompCodeId() {
        return (String)getAttributeInternal(TASKLOCCOMPCODEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for TaskLocCompCodeId.
     * @param value value to set the TaskLocCompCodeId
     */
    public void setTaskLocCompCodeId(String value) {
        setAttributeInternal(TASKLOCCOMPCODEID, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity MrltTaskImpl.
     */
    public MrltTaskImpl getMrltTask() {
        return (MrltTaskImpl)getAttributeInternal(MRLTTASK);
    }

    /**
     * Sets <code>value</code> as the associated entity MrltTaskImpl.
     */
    public void setMrltTask(MrltTaskImpl value) {
        setAttributeInternal(MRLTTASK, value);
    }

    /**
     * @param tasklocationid key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String tasklocationid) {
        return new Key(new Object[]{tasklocationid});
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("its.mnr.mp5.eo.master.MrltTasklocation");
    }
}
